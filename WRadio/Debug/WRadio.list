
WRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d38  08001d38  00002d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d68  08001d68  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d68  08001d68  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d68  08001d68  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d68  08001d68  00002d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d6c  08001d6c  00002d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d70  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000000c  08001d7c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08001d7c  0000331c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b40f  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4d  00000000  00000000  0000e443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000568e  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  00015a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000994  00000000  00000000  00016338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f118  00000000  00000000  00016ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de74  00000000  00000000  00025de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f2f3  00000000  00000000  00033c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00092f4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001860  00000000  00000000  00092f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000947f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d20 	.word	0x08001d20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d20 	.word	0x08001d20

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	2610      	movs	r6, #16
{
 800040c:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	222c      	movs	r2, #44	@ 0x2c
 8000410:	2100      	movs	r1, #0
 8000412:	a805      	add	r0, sp, #20
 8000414:	f001 fc58 	bl	8001cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	0032      	movs	r2, r6
 800041a:	2100      	movs	r1, #0
 800041c:	4668      	mov	r0, sp
 800041e:	f001 fc53 	bl	8001cc8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000422:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000428:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042c:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000434:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f000 fc79 	bl	8000d2c <HAL_RCC_OscConfig>
 800043a:	2800      	cmp	r0, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000448:	0029      	movs	r1, r5
 800044a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000450:	f000 fe90 	bl	8001174 <HAL_RCC_ClockConfig>
 8000454:	2800      	cmp	r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x54>
 8000458:	b672      	cpsid	i
  while (1)
 800045a:	e7fe      	b.n	800045a <SystemClock_Config+0x52>
}
 800045c:	b010      	add	sp, #64	@ 0x40
 800045e:	bd70      	pop	{r4, r5, r6, pc}

08000460 <main>:
{
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 8000464:	f000 fa4e 	bl	8000904 <HAL_Init>
  SystemClock_Config();
 8000468:	f7ff ffce 	bl	8000408 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	2210      	movs	r2, #16
 800046e:	2100      	movs	r1, #0
 8000470:	a80a      	add	r0, sp, #40	@ 0x28
 8000472:	f001 fc29 	bl	8001cc8 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	2280      	movs	r2, #128	@ 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800047a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4c39      	ldr	r4, [pc, #228]	@ (8000564 <main+0x104>)
 800047e:	0292      	lsls	r2, r2, #10
 8000480:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000482:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4313      	orrs	r3, r2
 8000486:	6163      	str	r3, [r4, #20]
 8000488:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4013      	ands	r3, r2
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000492:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f000 fb92 	bl	8000bbc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000498:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800049a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800049c:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800049e:	432b      	orrs	r3, r5
 80004a0:	6163      	str	r3, [r4, #20]
 80004a2:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004a4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a6:	402b      	ands	r3, r5
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004ac:	f000 fa5e 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80004b0:	200b      	movs	r0, #11
 80004b2:	f000 fa85 	bl	80009c0 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	2210      	movs	r2, #16
 80004b8:	2100      	movs	r1, #0
 80004ba:	a805      	add	r0, sp, #20
 80004bc:	f001 fc04 	bl	8001cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c0:	2208      	movs	r2, #8
 80004c2:	2100      	movs	r1, #0
 80004c4:	a803      	add	r0, sp, #12
 80004c6:	f001 fbff 	bl	8001cc8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ca:	221c      	movs	r2, #28
 80004cc:	2100      	movs	r1, #0
 80004ce:	a809      	add	r0, sp, #36	@ 0x24
 80004d0:	f001 fbfa 	bl	8001cc8 <memset>
  htim3.Instance = TIM3;
 80004d4:	4c24      	ldr	r4, [pc, #144]	@ (8000568 <main+0x108>)
 80004d6:	4b25      	ldr	r3, [pc, #148]	@ (800056c <main+0x10c>)
  htim3.Init.Period = 59;
 80004d8:	223b      	movs	r2, #59	@ 0x3b
  htim3.Instance = TIM3;
 80004da:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 0;
 80004dc:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004de:	0020      	movs	r0, r4
  htim3.Init.Prescaler = 0;
 80004e0:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e4:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e6:	3380      	adds	r3, #128	@ 0x80
  htim3.Init.Period = 59;
 80004e8:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ea:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ec:	f001 f8e2 	bl	80016b4 <HAL_TIM_Base_Init>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d001      	beq.n	80004f8 <main+0x98>
 80004f4:	b672      	cpsid	i
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004fa:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fc:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004fe:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000502:	f001 f9cf 	bl	80018a4 <HAL_TIM_ConfigClockSource>
 8000506:	2800      	cmp	r0, #0
 8000508:	d001      	beq.n	800050e <main+0xae>
 800050a:	b672      	cpsid	i
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0xac>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800050e:	0020      	movs	r0, r4
 8000510:	f001 f8f8 	bl	8001704 <HAL_TIM_PWM_Init>
 8000514:	2800      	cmp	r0, #0
 8000516:	d001      	beq.n	800051c <main+0xbc>
 8000518:	b672      	cpsid	i
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0xba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000520:	a903      	add	r1, sp, #12
 8000522:	0020      	movs	r0, r4
 8000524:	f001 fba6 	bl	8001c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	1e02      	subs	r2, r0, #0
 800052a:	d001      	beq.n	8000530 <main+0xd0>
 800052c:	b672      	cpsid	i
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0xce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000530:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000532:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000534:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000536:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000538:	a909      	add	r1, sp, #36	@ 0x24
 800053a:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	f001 f945 	bl	80017cc <HAL_TIM_PWM_ConfigChannel>
 8000542:	2800      	cmp	r0, #0
 8000544:	d001      	beq.n	800054a <main+0xea>
 8000546:	b672      	cpsid	i
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0xe8>
  HAL_TIM_MspPostInit(&htim3);
 800054a:	0020      	movs	r0, r4
 800054c:	f000 f866 	bl	800061c <HAL_TIM_MspPostInit>
  WS2812B_Init();
 8000550:	f000 f928 	bl	80007a4 <WS2812B_Init>
{
 8000554:	2464      	movs	r4, #100	@ 0x64
	  	       WS2812B_Rainbow(20);  // Update every 20ms
 8000556:	2014      	movs	r0, #20
	  for (int i = 0; i < 100; i++) {
 8000558:	3c01      	subs	r4, #1
	  	       WS2812B_Rainbow(20);  // Update every 20ms
 800055a:	f000 f931 	bl	80007c0 <WS2812B_Rainbow>
	  for (int i = 0; i < 100; i++) {
 800055e:	2c00      	cmp	r4, #0
 8000560:	d1f9      	bne.n	8000556 <main+0xf6>
 8000562:	e7f7      	b.n	8000554 <main+0xf4>
 8000564:	40021000 	.word	0x40021000
 8000568:	2000006c 	.word	0x2000006c
 800056c:	40000400 	.word	0x40000400

08000570 <Error_Handler>:
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <Error_Handler+0x2>

08000574 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000574:	2101      	movs	r1, #1
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_MspInit+0x2c>)
{
 8000578:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	430a      	orrs	r2, r1
 800057e:	619a      	str	r2, [r3, #24]
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	0549      	lsls	r1, r1, #21
 800058e:	430a      	orrs	r2, r1
 8000590:	61da      	str	r2, [r3, #28]
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	400b      	ands	r3, r1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	b002      	add	sp, #8
 800059c:	4770      	bx	lr
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM3)
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <HAL_TIM_Base_MspInit+0x68>)
 80005a8:	6802      	ldr	r2, [r0, #0]
{
 80005aa:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM3)
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d12c      	bne.n	800060a <HAL_TIM_Base_MspInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005b0:	2102      	movs	r1, #2
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <HAL_TIM_Base_MspInit+0x6c>)

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 80005b4:	4c17      	ldr	r4, [pc, #92]	@ (8000614 <HAL_TIM_Base_MspInit+0x70>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005b6:	69da      	ldr	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80005b8:	0020      	movs	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ba:	430a      	orrs	r2, r1
 80005bc:	61da      	str	r2, [r3, #28]
 80005be:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80005c0:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005c2:	400b      	ands	r3, r1
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_TIM_Base_MspInit+0x74>)
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80005ca:	60e2      	str	r2, [r4, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 80005cc:	6023      	str	r3, [r4, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ce:	2310      	movs	r3, #16
 80005d0:	6063      	str	r3, [r4, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d2:	2300      	movs	r3, #0
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d4:	1892      	adds	r2, r2, r2
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d6:	60a3      	str	r3, [r4, #8]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d8:	6122      	str	r2, [r4, #16]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80005da:	61a3      	str	r3, [r4, #24]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005dc:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80005de:	2380      	movs	r3, #128	@ 0x80
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005e0:	00d2      	lsls	r2, r2, #3
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80005e2:	019b      	lsls	r3, r3, #6
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005e4:	6162      	str	r2, [r4, #20]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80005e6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80005e8:	f000 fa10 	bl	8000a0c <HAL_DMA_Init>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d001      	beq.n	80005f4 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 80005f0:	f7ff ffbe 	bl	8000570 <Error_Handler>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2010      	movs	r0, #16
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80005f8:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80005fa:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80005fc:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80005fe:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000600:	f000 f9b4 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000604:	2010      	movs	r0, #16
 8000606:	f000 f9db 	bl	80009c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800060a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800060c:	40000400 	.word	0x40000400
 8000610:	40021000 	.word	0x40021000
 8000614:	20000028 	.word	0x20000028
 8000618:	40020044 	.word	0x40020044

0800061c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800061c:	b510      	push	{r4, lr}
 800061e:	0004      	movs	r4, r0
 8000620:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2214      	movs	r2, #20
 8000624:	2100      	movs	r1, #0
 8000626:	a801      	add	r0, sp, #4
 8000628:	f001 fb4e 	bl	8001cc8 <memset>
  if(htim->Instance==TIM3)
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <HAL_TIM_MspPostInit+0x48>)
 800062e:	6822      	ldr	r2, [r4, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d114      	bne.n	800065e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	2180      	movs	r1, #128	@ 0x80
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <HAL_TIM_MspPostInit+0x4c>)
 8000638:	0289      	lsls	r1, r1, #10
 800063a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	400b      	ands	r3, r1
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	3b3e      	subs	r3, #62	@ 0x3e
 8000652:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000656:	3b01      	subs	r3, #1
 8000658:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f000 faaf 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800065e:	b006      	add	sp, #24
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40000400 	.word	0x40000400
 8000668:	40021000 	.word	0x40021000

0800066c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler>

0800066e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler>

08000670 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f955 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bd10      	pop	{r4, pc}

0800067c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800067c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800067e:	4802      	ldr	r0, [pc, #8]	@ (8000688 <DMA1_Channel4_5_IRQHandler+0xc>)
 8000680:	f000 fa53 	bl	8000b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000684:	bd10      	pop	{r4, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	20000028 	.word	0x20000028

0800068c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800068c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800068e:	4802      	ldr	r0, [pc, #8]	@ (8000698 <TIM3_IRQHandler+0xc>)
 8000690:	f000 feff 	bl	8001492 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000694:	bd10      	pop	{r4, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	2000006c 	.word	0x2000006c

0800069c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069c:	4770      	bx	lr
	...

080006a0 <WS2812B_SetLED>:
  * @param red Red component (0-255)
  * @param green Green component (0-255)
  * @param blue Blue component (0-255)
  */
void WS2812B_SetLED(uint16_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 80006a0:	b530      	push	{r4, r5, lr}
 80006a2:	0005      	movs	r5, r0
  if (index < LED_COUNT) {
 80006a4:	2809      	cmp	r0, #9
 80006a6:	d806      	bhi.n	80006b6 <WS2812B_SetLED+0x16>
    ledColors[index].red = red;
 80006a8:	2003      	movs	r0, #3
 80006aa:	4368      	muls	r0, r5
 80006ac:	4c02      	ldr	r4, [pc, #8]	@ (80006b8 <WS2812B_SetLED+0x18>)
 80006ae:	1825      	adds	r5, r4, r0
 80006b0:	7069      	strb	r1, [r5, #1]
    ledColors[index].green = green;
 80006b2:	5502      	strb	r2, [r0, r4]
    ledColors[index].blue = blue;
 80006b4:	70ab      	strb	r3, [r5, #2]
  }
}
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	200000b6 	.word	0x200000b6

080006bc <WS2812B_PrepareBuffer>:
  * @brief Prepare the buffer according to the WS2812B protocol
  * @note  The WS2812B protocol sends data in GRB order, MSB first
  */
void WS2812B_PrepareBuffer(void)
{
  uint16_t bufferIndex = 0;
 80006bc:	2300      	movs	r3, #0
{
 80006be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80006c0:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <WS2812B_PrepareBuffer+0x98>)

  // For each LED
  for (uint16_t i = 0; i < LED_COUNT; i++) {
    // Green byte (sent first in WS2812B)
    for (int8_t bit = 7; bit >= 0; bit--) {
      ledBuffer[bufferIndex++] = (ledColors[i].green & (1 << bit)) ?
 80006c2:	2100      	movs	r1, #0
 80006c4:	7816      	ldrb	r6, [r2, #0]
 80006c6:	2407      	movs	r4, #7
 80006c8:	0035      	movs	r5, r6
 80006ca:	1a64      	subs	r4, r4, r1
 80006cc:	4125      	asrs	r5, r4
 80006ce:	2701      	movs	r7, #1
 80006d0:	002c      	movs	r4, r5
 80006d2:	1858      	adds	r0, r3, r1
 80006d4:	2514      	movs	r5, #20
 80006d6:	b280      	uxth	r0, r0
 80006d8:	423c      	tst	r4, r7
 80006da:	d000      	beq.n	80006de <WS2812B_PrepareBuffer+0x22>
 80006dc:	196d      	adds	r5, r5, r5
 80006de:	4c1e      	ldr	r4, [pc, #120]	@ (8000758 <WS2812B_PrepareBuffer+0x9c>)
 80006e0:	0040      	lsls	r0, r0, #1
    for (int8_t bit = 7; bit >= 0; bit--) {
 80006e2:	3101      	adds	r1, #1
      ledBuffer[bufferIndex++] = (ledColors[i].green & (1 << bit)) ?
 80006e4:	5305      	strh	r5, [r0, r4]
    for (int8_t bit = 7; bit >= 0; bit--) {
 80006e6:	2908      	cmp	r1, #8
 80006e8:	d1ed      	bne.n	80006c6 <WS2812B_PrepareBuffer+0xa>
                                  WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
    }

    // Red byte
    for (int8_t bit = 7; bit >= 0; bit--) {
      ledBuffer[bufferIndex++] = (ledColors[i].red & (1 << bit)) ?
 80006ea:	7851      	ldrb	r1, [r2, #1]
 80006ec:	001d      	movs	r5, r3
 80006ee:	468c      	mov	ip, r1
 80006f0:	2107      	movs	r1, #7
 80006f2:	350f      	adds	r5, #15
 80006f4:	b2ad      	uxth	r5, r5
 80006f6:	4666      	mov	r6, ip
 80006f8:	1a68      	subs	r0, r5, r1
 80006fa:	b280      	uxth	r0, r0
 80006fc:	9001      	str	r0, [sp, #4]
 80006fe:	410e      	asrs	r6, r1
 8000700:	2001      	movs	r0, #1
 8000702:	2714      	movs	r7, #20
 8000704:	4206      	tst	r6, r0
 8000706:	d000      	beq.n	800070a <WS2812B_PrepareBuffer+0x4e>
 8000708:	19ff      	adds	r7, r7, r7
 800070a:	9801      	ldr	r0, [sp, #4]
 800070c:	0040      	lsls	r0, r0, #1
 800070e:	5227      	strh	r7, [r4, r0]
    for (int8_t bit = 7; bit >= 0; bit--) {
 8000710:	3901      	subs	r1, #1
 8000712:	d2f0      	bcs.n	80006f6 <WS2812B_PrepareBuffer+0x3a>
                                  WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
    }

    // Blue byte
    for (int8_t bit = 7; bit >= 0; bit--) {
      ledBuffer[bufferIndex++] = (ledColors[i].blue & (1 << bit)) ?
 8000714:	7891      	ldrb	r1, [r2, #2]
 8000716:	001d      	movs	r5, r3
 8000718:	468c      	mov	ip, r1
 800071a:	2107      	movs	r1, #7
 800071c:	3517      	adds	r5, #23
 800071e:	b2ad      	uxth	r5, r5
 8000720:	4666      	mov	r6, ip
 8000722:	1a68      	subs	r0, r5, r1
 8000724:	b280      	uxth	r0, r0
 8000726:	9001      	str	r0, [sp, #4]
 8000728:	410e      	asrs	r6, r1
 800072a:	2001      	movs	r0, #1
 800072c:	2714      	movs	r7, #20
 800072e:	4206      	tst	r6, r0
 8000730:	d000      	beq.n	8000734 <WS2812B_PrepareBuffer+0x78>
 8000732:	19ff      	adds	r7, r7, r7
 8000734:	9801      	ldr	r0, [sp, #4]
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	5227      	strh	r7, [r4, r0]
    for (int8_t bit = 7; bit >= 0; bit--) {
 800073a:	3901      	subs	r1, #1
 800073c:	d2f0      	bcs.n	8000720 <WS2812B_PrepareBuffer+0x64>
      ledBuffer[bufferIndex++] = (ledColors[i].blue & (1 << bit)) ?
 800073e:	3318      	adds	r3, #24
 8000740:	b29b      	uxth	r3, r3
  for (uint16_t i = 0; i < LED_COUNT; i++) {
 8000742:	3203      	adds	r2, #3
 8000744:	2bf0      	cmp	r3, #240	@ 0xf0
 8000746:	d1bc      	bne.n	80006c2 <WS2812B_PrepareBuffer+0x6>
    }
  }

  // Reset pulse (all zeros, will output 0V)
  for (uint16_t i = 0; i < WS2812B_RESET_LEN; i++) {
    ledBuffer[bufferIndex++] = 0;
 8000748:	2264      	movs	r2, #100	@ 0x64
 800074a:	2100      	movs	r1, #0
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <WS2812B_PrepareBuffer+0xa0>)
 800074e:	f001 fabb 	bl	8001cc8 <memset>
  }
}
 8000752:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000754:	200000b6 	.word	0x200000b6
 8000758:	200000d4 	.word	0x200000d4
 800075c:	200002b4 	.word	0x200002b4

08000760 <WS2812B_SendToLEDs>:

/**
  * @brief Send the prepared buffer to the LEDs
  */
void WS2812B_SendToLEDs(void)
{
 8000760:	b570      	push	{r4, r5, r6, lr}
  transferComplete = false;
 8000762:	2600      	movs	r6, #0

  // Stop the timer and DMA if they're running
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000764:	4c0c      	ldr	r4, [pc, #48]	@ (8000798 <WS2812B_SendToLEDs+0x38>)
  transferComplete = false;
 8000766:	4d0d      	ldr	r5, [pc, #52]	@ (800079c <WS2812B_SendToLEDs+0x3c>)
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000768:	0031      	movs	r1, r6
 800076a:	0020      	movs	r0, r4
  transferComplete = false;
 800076c:	702e      	strb	r6, [r5, #0]
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800076e:	f001 fa7d 	bl	8001c6c <HAL_TIM_PWM_Stop_DMA>

  // Start the PWM with DMA
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)ledBuffer, WS2812B_BUFFER_SIZE);
 8000772:	2391      	movs	r3, #145	@ 0x91
 8000774:	0031      	movs	r1, r6
 8000776:	0020      	movs	r0, r4
 8000778:	4a09      	ldr	r2, [pc, #36]	@ (80007a0 <WS2812B_SendToLEDs+0x40>)
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	f001 f9fc 	bl	8001b78 <HAL_TIM_PWM_Start_DMA>

  // Wait for transfer completion
  // In a real application, you might want to use a non-blocking approach
  uint32_t timeout = HAL_GetTick() + 100; // 100ms timeout
 8000780:	f000 f8dc 	bl	800093c <HAL_GetTick>
 8000784:	3064      	adds	r0, #100	@ 0x64
 8000786:	0004      	movs	r4, r0
  while (!transferComplete && HAL_GetTick() < timeout) {
 8000788:	782b      	ldrb	r3, [r5, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d103      	bne.n	8000796 <WS2812B_SendToLEDs+0x36>
 800078e:	f000 f8d5 	bl	800093c <HAL_GetTick>
 8000792:	42a0      	cmp	r0, r4
 8000794:	d3f8      	bcc.n	8000788 <WS2812B_SendToLEDs+0x28>
    // Could do other tasks here or use HAL_Delay
  }
}
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	2000006c 	.word	0x2000006c
 800079c:	200000b5 	.word	0x200000b5
 80007a0:	200000d4 	.word	0x200000d4

080007a4 <WS2812B_Init>:
{
 80007a4:	b510      	push	{r4, lr}
  memset(ledColors, 0, sizeof(ledColors));
 80007a6:	221e      	movs	r2, #30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <WS2812B_Init+0x18>)
 80007ac:	f001 fa8c 	bl	8001cc8 <memset>
  WS2812B_PrepareBuffer();
 80007b0:	f7ff ff84 	bl	80006bc <WS2812B_PrepareBuffer>
  WS2812B_SendToLEDs();
 80007b4:	f7ff ffd4 	bl	8000760 <WS2812B_SendToLEDs>
}
 80007b8:	bd10      	pop	{r4, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	200000b6 	.word	0x200000b6

080007c0 <WS2812B_Rainbow>:
/**
  * @brief Simple rainbow animation effect
  * @param delay_ms Delay between animation frames in milliseconds
  */
void WS2812B_Rainbow(uint32_t delay_ms)
{
 80007c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t hsv_s = 255;
    uint8_t hsv_v = 128;

    // Simple HSV to RGB conversion for rainbow effect
    uint8_t region = hsv_h / 43;
    uint8_t remainder = (hsv_h - (region * 43)) * 6;
 80007c2:	272b      	movs	r7, #43	@ 0x2b
{
 80007c4:	2500      	movs	r5, #0
 80007c6:	9000      	str	r0, [sp, #0]
    uint8_t remainder = (hsv_h - (region * 43)) * 6;
 80007c8:	427f      	negs	r7, r7
 80007ca:	b2ab      	uxth	r3, r5
    uint8_t hsv_h = hue + (i * 256 / LED_COUNT);
 80007cc:	210a      	movs	r1, #10
 80007ce:	0228      	lsls	r0, r5, #8
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f7ff fd2d 	bl	8000230 <__divsi3>
 80007d6:	4e23      	ldr	r6, [pc, #140]	@ (8000864 <WS2812B_Rainbow+0xa4>)
    uint8_t region = hsv_h / 43;
 80007d8:	212b      	movs	r1, #43	@ 0x2b
    uint8_t hsv_h = hue + (i * 256 / LED_COUNT);
 80007da:	7834      	ldrb	r4, [r6, #0]
 80007dc:	1904      	adds	r4, r0, r4
 80007de:	b2e4      	uxtb	r4, r4
    uint8_t region = hsv_h / 43;
 80007e0:	0020      	movs	r0, r4
 80007e2:	f7ff fc9b 	bl	800011c <__udivsi3>
    uint8_t remainder = (hsv_h - (region * 43)) * 6;
 80007e6:	003a      	movs	r2, r7
    uint8_t region = hsv_h / 43;
 80007e8:	b2c3      	uxtb	r3, r0
    uint8_t remainder = (hsv_h - (region * 43)) * 6;
 80007ea:	435a      	muls	r2, r3
 80007ec:	1914      	adds	r4, r2, r4
 80007ee:	2206      	movs	r2, #6
 80007f0:	4354      	muls	r4, r2

    uint8_t p = (hsv_v * (255 - hsv_s)) >> 8;
    uint8_t q = (hsv_v * (255 - ((hsv_s * remainder) >> 8))) >> 8;
 80007f2:	32f9      	adds	r2, #249	@ 0xf9
 80007f4:	0011      	movs	r1, r2
 80007f6:	b2e4      	uxtb	r4, r4
 80007f8:	4361      	muls	r1, r4
    uint8_t t = (hsv_v * (255 - ((hsv_s * (255 - remainder)) >> 8))) >> 8;
 80007fa:	1b14      	subs	r4, r2, r4
 80007fc:	4354      	muls	r4, r2
    uint8_t q = (hsv_v * (255 - ((hsv_s * remainder) >> 8))) >> 8;
 80007fe:	1209      	asrs	r1, r1, #8
    uint8_t t = (hsv_v * (255 - ((hsv_s * (255 - remainder)) >> 8))) >> 8;
 8000800:	1224      	asrs	r4, r4, #8
    uint8_t q = (hsv_v * (255 - ((hsv_s * remainder) >> 8))) >> 8;
 8000802:	1a51      	subs	r1, r2, r1
    uint8_t t = (hsv_v * (255 - ((hsv_s * (255 - remainder)) >> 8))) >> 8;
 8000804:	1b12      	subs	r2, r2, r4
    uint8_t q = (hsv_v * (255 - ((hsv_s * remainder) >> 8))) >> 8;
 8000806:	1049      	asrs	r1, r1, #1
    uint8_t t = (hsv_v * (255 - ((hsv_s * (255 - remainder)) >> 8))) >> 8;
 8000808:	1052      	asrs	r2, r2, #1
    uint8_t q = (hsv_v * (255 - ((hsv_s * remainder) >> 8))) >> 8;
 800080a:	b2c9      	uxtb	r1, r1
    uint8_t t = (hsv_v * (255 - ((hsv_s * (255 - remainder)) >> 8))) >> 8;
 800080c:	b2d2      	uxtb	r2, r2

    uint8_t r, g, b;

    switch (region) {
 800080e:	2b04      	cmp	r3, #4
 8000810:	d820      	bhi.n	8000854 <WS2812B_Rainbow+0x94>
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fc78 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000818:	17032220 	.word	0x17032220
 800081c:	1a          	.byte	0x1a
 800081d:	00          	.byte	0x00
      case 0: r = hsv_v; g = t; b = p; break;
      case 1: r = q; g = hsv_v; b = p; break;
      case 2: r = p; g = hsv_v; b = t; break;
 800081e:	0013      	movs	r3, r2
 8000820:	2280      	movs	r2, #128	@ 0x80
      case 3: r = p; g = q; b = hsv_v; break;
 8000822:	2100      	movs	r1, #0
      case 4: r = t; g = p; b = hsv_v; break;
      default: r = hsv_v; g = p; b = q; break;
    }

    WS2812B_SetLED(i, r, g, b);
 8000824:	b2a8      	uxth	r0, r5
  for (uint16_t i = 0; i < LED_COUNT; i++) {
 8000826:	3501      	adds	r5, #1
    WS2812B_SetLED(i, r, g, b);
 8000828:	f7ff ff3a 	bl	80006a0 <WS2812B_SetLED>
  for (uint16_t i = 0; i < LED_COUNT; i++) {
 800082c:	2d0a      	cmp	r5, #10
 800082e:	d1cc      	bne.n	80007ca <WS2812B_Rainbow+0xa>
  }

  WS2812B_PrepareBuffer();
 8000830:	f7ff ff44 	bl	80006bc <WS2812B_PrepareBuffer>
  WS2812B_SendToLEDs();
 8000834:	f7ff ff94 	bl	8000760 <WS2812B_SendToLEDs>

  // Delay a bit
  HAL_Delay(delay_ms);
 8000838:	9800      	ldr	r0, [sp, #0]
 800083a:	f000 f885 	bl	8000948 <HAL_Delay>

  // Increment hue for next time
  hue += 1;
 800083e:	7833      	ldrb	r3, [r6, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	7033      	strb	r3, [r6, #0]
}
 8000844:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      case 3: r = p; g = q; b = hsv_v; break;
 8000846:	000a      	movs	r2, r1
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	e7ea      	b.n	8000822 <WS2812B_Rainbow+0x62>
      case 4: r = t; g = p; b = hsv_v; break;
 800084c:	0011      	movs	r1, r2
 800084e:	2380      	movs	r3, #128	@ 0x80
 8000850:	2200      	movs	r2, #0
 8000852:	e7e7      	b.n	8000824 <WS2812B_Rainbow+0x64>
      default: r = hsv_v; g = p; b = q; break;
 8000854:	000b      	movs	r3, r1
 8000856:	2200      	movs	r2, #0
 8000858:	2180      	movs	r1, #128	@ 0x80
 800085a:	e7e3      	b.n	8000824 <WS2812B_Rainbow+0x64>
    switch (region) {
 800085c:	2300      	movs	r3, #0
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	e7e0      	b.n	8000824 <WS2812B_Rainbow+0x64>
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	200000b4 	.word	0x200000b4

08000868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff ff16 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000896:	f001 fa1f 	bl	8001cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fde1 	bl	8000460 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   r0, =_estack
 80008a0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	08001d70 	.word	0x08001d70
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	2000031c 	.word	0x2000031c

080008b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_IRQHandler>
	...

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	20fa      	movs	r0, #250	@ 0xfa
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_InitTick+0x3c>)
 80008c4:	0080      	lsls	r0, r0, #2
 80008c6:	7819      	ldrb	r1, [r3, #0]
 80008c8:	f7ff fc28 	bl	800011c <__udivsi3>
 80008cc:	4c0b      	ldr	r4, [pc, #44]	@ (80008fc <HAL_InitTick+0x40>)
 80008ce:	0001      	movs	r1, r0
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	f7ff fc23 	bl	800011c <__udivsi3>
 80008d6:	f000 f87f 	bl	80009d8 <HAL_SYSTICK_Config>
 80008da:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d109      	bne.n	80008f6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	2d03      	cmp	r5, #3
 80008e4:	d807      	bhi.n	80008f6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e6:	3802      	subs	r0, #2
 80008e8:	0022      	movs	r2, r4
 80008ea:	0029      	movs	r1, r5
 80008ec:	f000 f83e 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	0020      	movs	r0, r4
 80008f2:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_InitTick+0x44>)
 80008f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	20000004 	.word	0x20000004
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008

08000904 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	2310      	movs	r3, #16
 8000906:	4a06      	ldr	r2, [pc, #24]	@ (8000920 <HAL_Init+0x1c>)
{
 8000908:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800090c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090e:	430b      	orrs	r3, r1
 8000910:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	f7ff ffd3 	bl	80008bc <HAL_InitTick>
  HAL_MspInit();
 8000916:	f7ff fe2d 	bl	8000574 <HAL_MspInit>
}
 800091a:	2000      	movs	r0, #0
 800091c:	bd10      	pop	{r4, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000924:	4a03      	ldr	r2, [pc, #12]	@ (8000934 <HAL_IncTick+0x10>)
 8000926:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <HAL_IncTick+0x14>)
 8000928:	6811      	ldr	r1, [r2, #0]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	185b      	adds	r3, r3, r1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	20000318 	.word	0x20000318
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800093c:	4b01      	ldr	r3, [pc, #4]	@ (8000944 <HAL_GetTick+0x8>)
 800093e:	6818      	ldr	r0, [r3, #0]
}
 8000940:	4770      	bx	lr
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	20000318 	.word	0x20000318

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff fff6 	bl	800093c <HAL_GetTick>
 8000950:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	1c63      	adds	r3, r4, #1
 8000954:	d002      	beq.n	800095c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <HAL_Delay+0x20>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800095c:	f7ff ffee 	bl	800093c <HAL_GetTick>
 8000960:	1b40      	subs	r0, r0, r5
 8000962:	42a0      	cmp	r0, r4
 8000964:	d3fa      	bcc.n	800095c <HAL_Delay+0x14>
  {
  }
}
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096e:	24ff      	movs	r4, #255	@ 0xff
 8000970:	2203      	movs	r2, #3
 8000972:	000b      	movs	r3, r1
 8000974:	0021      	movs	r1, r4
 8000976:	4002      	ands	r2, r0
 8000978:	00d2      	lsls	r2, r2, #3
 800097a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000984:	2800      	cmp	r0, #0
 8000986:	db0a      	blt.n	800099e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	24c0      	movs	r4, #192	@ 0xc0
 800098a:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <HAL_NVIC_SetPriority+0x4c>)
 800098c:	0880      	lsrs	r0, r0, #2
 800098e:	0080      	lsls	r0, r0, #2
 8000990:	1880      	adds	r0, r0, r2
 8000992:	00a4      	lsls	r4, r4, #2
 8000994:	5902      	ldr	r2, [r0, r4]
 8000996:	400a      	ands	r2, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800099c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099e:	220f      	movs	r2, #15
 80009a0:	4010      	ands	r0, r2
 80009a2:	3808      	subs	r0, #8
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <HAL_NVIC_SetPriority+0x50>)
 80009a6:	0880      	lsrs	r0, r0, #2
 80009a8:	0080      	lsls	r0, r0, #2
 80009aa:	1880      	adds	r0, r0, r2
 80009ac:	69c2      	ldr	r2, [r0, #28]
 80009ae:	4011      	ands	r1, r2
 80009b0:	4319      	orrs	r1, r3
 80009b2:	61c1      	str	r1, [r0, #28]
 80009b4:	e7f2      	b.n	800099c <HAL_NVIC_SetPriority+0x30>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009c0:	2800      	cmp	r0, #0
 80009c2:	db05      	blt.n	80009d0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c4:	231f      	movs	r3, #31
 80009c6:	4018      	ands	r0, r3
 80009c8:	3b1e      	subs	r3, #30
 80009ca:	4083      	lsls	r3, r0
 80009cc:	4a01      	ldr	r2, [pc, #4]	@ (80009d4 <HAL_NVIC_EnableIRQ+0x14>)
 80009ce:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009d0:	4770      	bx	lr
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	1e43      	subs	r3, r0, #1
 80009dc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d20d      	bcs.n	8000a00 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	6a03      	ldr	r3, [r0, #32]
 80009ee:	0609      	lsls	r1, r1, #24
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a00:	4770      	bx	lr
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	e000e010 	.word	0xe000e010
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8000a10:	2001      	movs	r0, #1
  if (NULL == hdma)
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d024      	beq.n	8000a60 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a16:	2302      	movs	r3, #2
 8000a18:	1ca5      	adds	r5, r4, #2
 8000a1a:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a1c:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8000a20:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a22:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a24:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000a26:	6863      	ldr	r3, [r4, #4]
 8000a28:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2a:	68e1      	ldr	r1, [r4, #12]
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	6921      	ldr	r1, [r4, #16]
 8000a30:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a32:	6961      	ldr	r1, [r4, #20]
 8000a34:	430b      	orrs	r3, r1
 8000a36:	69a1      	ldr	r1, [r4, #24]
 8000a38:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a3a:	69e1      	ldr	r1, [r4, #28]
 8000a3c:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000a3e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a40:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_DMA_Init+0x5c>)
 8000a44:	2114      	movs	r1, #20
 8000a46:	18c0      	adds	r0, r0, r3
 8000a48:	f7ff fb68 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a4e:	0080      	lsls	r0, r0, #2
 8000a50:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a52:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a54:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000a56:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a58:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000a5a:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000a5c:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000a5e:	77e0      	strb	r0, [r4, #31]
}
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	ffffc00f 	.word	0xffffc00f
 8000a68:	bffdfff8 	.word	0xbffdfff8
 8000a6c:	40020000 	.word	0x40020000

08000a70 <HAL_DMA_Start_IT>:
{
 8000a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000a72:	1c44      	adds	r4, r0, #1
{
 8000a74:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8000a76:	7fe5      	ldrb	r5, [r4, #31]
 8000a78:	2d01      	cmp	r5, #1
 8000a7a:	d033      	beq.n	8000ae4 <HAL_DMA_Start_IT+0x74>
 8000a7c:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000a7e:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 8000a80:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000a82:	7ffd      	ldrb	r5, [r7, #31]
 8000a84:	2600      	movs	r6, #0
 8000a86:	46ac      	mov	ip, r5
 8000a88:	4663      	mov	r3, ip
 8000a8a:	b2ed      	uxtb	r5, r5
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d128      	bne.n	8000ae2 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a90:	2402      	movs	r4, #2
 8000a92:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a94:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a96:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a98:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a9a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a9c:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a9e:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa0:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 8000aa2:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000aa4:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8000aa6:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000aa8:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000aaa:	6843      	ldr	r3, [r0, #4]
 8000aac:	2b10      	cmp	r3, #16
 8000aae:	d10e      	bne.n	8000ace <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000ab0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ab2:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8000ab4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ab6:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000abc:	230e      	movs	r3, #14
 8000abe:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ac0:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ac2:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000ac4:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6023      	str	r3, [r4, #0]
}
 8000acc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000ace:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ad0:	60e2      	str	r2, [r4, #12]
 8000ad2:	e7ef      	b.n	8000ab4 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ad8:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ada:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	4393      	bics	r3, r2
 8000ae0:	e7ee      	b.n	8000ac0 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8000ae2:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	e7f1      	b.n	8000acc <HAL_DMA_Start_IT+0x5c>

08000ae8 <HAL_DMA_Abort_IT>:
{
 8000ae8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000aea:	1c84      	adds	r4, r0, #2
 8000aec:	7fe3      	ldrb	r3, [r4, #31]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d003      	beq.n	8000afa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af2:	2304      	movs	r3, #4
 8000af4:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8000af6:	2001      	movs	r0, #1
}
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000afa:	210e      	movs	r1, #14
 8000afc:	6803      	ldr	r3, [r0, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	438a      	bics	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b04:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b06:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	4391      	bics	r1, r2
 8000b0c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b0e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8000b10:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000b12:	408d      	lsls	r5, r1
 8000b14:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b16:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000b18:	1883      	adds	r3, r0, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8000b1e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d000      	beq.n	8000b26 <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8000b24:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000b26:	2000      	movs	r0, #0
 8000b28:	e7e6      	b.n	8000af8 <HAL_DMA_Abort_IT+0x10>

08000b2a <HAL_DMA_IRQHandler>:
{
 8000b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b2c:	2704      	movs	r7, #4
 8000b2e:	003e      	movs	r6, r7
 8000b30:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b34:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b36:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b38:	6803      	ldr	r3, [r0, #0]
 8000b3a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b3c:	4235      	tst	r5, r6
 8000b3e:	d00d      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x32>
 8000b40:	423c      	tst	r4, r7
 8000b42:	d00b      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	0689      	lsls	r1, r1, #26
 8000b48:	d402      	bmi.n	8000b50 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	43b9      	bics	r1, r7
 8000b4e:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000b50:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b52:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d019      	beq.n	8000b8c <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8000b58:	4798      	blx	r3
}
 8000b5a:	e017      	b.n	8000b8c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b5c:	2702      	movs	r7, #2
 8000b5e:	003e      	movs	r6, r7
 8000b60:	408e      	lsls	r6, r1
 8000b62:	4235      	tst	r5, r6
 8000b64:	d013      	beq.n	8000b8e <HAL_DMA_IRQHandler+0x64>
 8000b66:	423c      	tst	r4, r7
 8000b68:	d011      	beq.n	8000b8e <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b6a:	6819      	ldr	r1, [r3, #0]
 8000b6c:	0689      	lsls	r1, r1, #26
 8000b6e:	d406      	bmi.n	8000b7e <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b70:	240a      	movs	r4, #10
 8000b72:	6819      	ldr	r1, [r3, #0]
 8000b74:	43a1      	bics	r1, r4
 8000b76:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000b78:	2101      	movs	r1, #1
 8000b7a:	19c3      	adds	r3, r0, r7
 8000b7c:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b7e:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000b80:	2200      	movs	r2, #0
 8000b82:	1c43      	adds	r3, r0, #1
 8000b84:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8000b86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d1e5      	bne.n	8000b58 <HAL_DMA_IRQHandler+0x2e>
}
 8000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b8e:	2608      	movs	r6, #8
 8000b90:	0037      	movs	r7, r6
 8000b92:	408f      	lsls	r7, r1
 8000b94:	423d      	tst	r5, r7
 8000b96:	d0f9      	beq.n	8000b8c <HAL_DMA_IRQHandler+0x62>
 8000b98:	4234      	tst	r4, r6
 8000b9a:	d0f7      	beq.n	8000b8c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b9c:	250e      	movs	r5, #14
 8000b9e:	681c      	ldr	r4, [r3, #0]
 8000ba0:	43ac      	bics	r4, r5
 8000ba2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	408c      	lsls	r4, r1
 8000baa:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000bac:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bae:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000bb0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	18c3      	adds	r3, r0, r3
 8000bb6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000bb8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000bba:	e7e5      	b.n	8000b88 <HAL_DMA_IRQHandler+0x5e>

08000bbc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000bbc:	2300      	movs	r3, #0
{
 8000bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	680a      	ldr	r2, [r1, #0]
 8000bc4:	0014      	movs	r4, r2
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	d101      	bne.n	8000bce <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000bca:	b007      	add	sp, #28
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bce:	2501      	movs	r5, #1
 8000bd0:	0014      	movs	r4, r2
 8000bd2:	409d      	lsls	r5, r3
 8000bd4:	402c      	ands	r4, r5
 8000bd6:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000bd8:	422a      	tst	r2, r5
 8000bda:	d100      	bne.n	8000bde <HAL_GPIO_Init+0x22>
 8000bdc:	e098      	b.n	8000d10 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bde:	684a      	ldr	r2, [r1, #4]
 8000be0:	005f      	lsls	r7, r3, #1
 8000be2:	4694      	mov	ip, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	4664      	mov	r4, ip
 8000be8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bea:	2403      	movs	r4, #3
 8000bec:	40bc      	lsls	r4, r7
 8000bee:	43e4      	mvns	r4, r4
 8000bf0:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf2:	1e54      	subs	r4, r2, #1
 8000bf4:	2c01      	cmp	r4, #1
 8000bf6:	d82e      	bhi.n	8000c56 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000bf8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfa:	9c01      	ldr	r4, [sp, #4]
 8000bfc:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bfe:	68cc      	ldr	r4, [r1, #12]
 8000c00:	40bc      	lsls	r4, r7
 8000c02:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c04:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c06:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c08:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	43ac      	bics	r4, r5
 8000c0c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	4664      	mov	r4, ip
 8000c10:	0924      	lsrs	r4, r4, #4
 8000c12:	4034      	ands	r4, r6
 8000c14:	409c      	lsls	r4, r3
 8000c16:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000c18:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c1a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c1c:	9c01      	ldr	r4, [sp, #4]
 8000c1e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c20:	688c      	ldr	r4, [r1, #8]
 8000c22:	40bc      	lsls	r4, r7
 8000c24:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000c26:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c28:	2a02      	cmp	r2, #2
 8000c2a:	d116      	bne.n	8000c5a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2c:	2507      	movs	r5, #7
 8000c2e:	260f      	movs	r6, #15
 8000c30:	401d      	ands	r5, r3
 8000c32:	00ad      	lsls	r5, r5, #2
 8000c34:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000c36:	08dc      	lsrs	r4, r3, #3
 8000c38:	00a4      	lsls	r4, r4, #2
 8000c3a:	1904      	adds	r4, r0, r4
 8000c3c:	9402      	str	r4, [sp, #8]
 8000c3e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c40:	9603      	str	r6, [sp, #12]
 8000c42:	0026      	movs	r6, r4
 8000c44:	9c03      	ldr	r4, [sp, #12]
 8000c46:	43a6      	bics	r6, r4
 8000c48:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c4a:	690e      	ldr	r6, [r1, #16]
 8000c4c:	40ae      	lsls	r6, r5
 8000c4e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000c50:	9c02      	ldr	r4, [sp, #8]
 8000c52:	6226      	str	r6, [r4, #32]
 8000c54:	e001      	b.n	8000c5a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c56:	2a03      	cmp	r2, #3
 8000c58:	d1df      	bne.n	8000c1a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c5a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000c5c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c5e:	9d01      	ldr	r5, [sp, #4]
 8000c60:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c62:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c64:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000c66:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c68:	4662      	mov	r2, ip
 8000c6a:	02a4      	lsls	r4, r4, #10
 8000c6c:	4222      	tst	r2, r4
 8000c6e:	d04f      	beq.n	8000d10 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	2501      	movs	r5, #1
 8000c72:	4a28      	ldr	r2, [pc, #160]	@ (8000d14 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c78:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	432c      	orrs	r4, r5
 8000c7c:	6194      	str	r4, [r2, #24]
 8000c7e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c80:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	402a      	ands	r2, r5
 8000c84:	9205      	str	r2, [sp, #20]
 8000c86:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c88:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <HAL_GPIO_Init+0x15c>)
 8000c8a:	00a4      	lsls	r4, r4, #2
 8000c8c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8e:	220f      	movs	r2, #15
 8000c90:	3502      	adds	r5, #2
 8000c92:	401d      	ands	r5, r3
 8000c94:	00ad      	lsls	r5, r5, #2
 8000c96:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c98:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	42b8      	cmp	r0, r7
 8000ca0:	d00c      	beq.n	8000cbc <HAL_GPIO_Init+0x100>
 8000ca2:	4f1e      	ldr	r7, [pc, #120]	@ (8000d1c <HAL_GPIO_Init+0x160>)
 8000ca4:	3201      	adds	r2, #1
 8000ca6:	42b8      	cmp	r0, r7
 8000ca8:	d008      	beq.n	8000cbc <HAL_GPIO_Init+0x100>
 8000caa:	4f1d      	ldr	r7, [pc, #116]	@ (8000d20 <HAL_GPIO_Init+0x164>)
 8000cac:	3201      	adds	r2, #1
 8000cae:	42b8      	cmp	r0, r7
 8000cb0:	d004      	beq.n	8000cbc <HAL_GPIO_Init+0x100>
 8000cb2:	4f1c      	ldr	r7, [pc, #112]	@ (8000d24 <HAL_GPIO_Init+0x168>)
 8000cb4:	3203      	adds	r2, #3
 8000cb6:	42b8      	cmp	r0, r7
 8000cb8:	d100      	bne.n	8000cbc <HAL_GPIO_Init+0x100>
 8000cba:	3a02      	subs	r2, #2
 8000cbc:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cbe:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cc0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000cc4:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8000cc6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000cc8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000cca:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000ccc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000cce:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd0:	02ff      	lsls	r7, r7, #11
 8000cd2:	d401      	bmi.n	8000cd8 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8000cd4:	0035      	movs	r5, r6
 8000cd6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000cda:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000cdc:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000cde:	9d00      	ldr	r5, [sp, #0]
 8000ce0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	02bf      	lsls	r7, r7, #10
 8000ce4:	d401      	bmi.n	8000cea <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8000ce6:	0035      	movs	r5, r6
 8000ce8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cea:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000cec:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000cee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000cf0:	9d00      	ldr	r5, [sp, #0]
 8000cf2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf4:	03bf      	lsls	r7, r7, #14
 8000cf6:	d401      	bmi.n	8000cfc <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000cfe:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000d00:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000d02:	9e00      	ldr	r6, [sp, #0]
 8000d04:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d06:	03ff      	lsls	r7, r7, #15
 8000d08:	d401      	bmi.n	8000d0e <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 8000d0a:	4025      	ands	r5, r4
 8000d0c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000d0e:	6016      	str	r6, [r2, #0]
    position++;
 8000d10:	3301      	adds	r3, #1
 8000d12:	e756      	b.n	8000bc2 <HAL_GPIO_Init+0x6>
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	0004      	movs	r4, r0
 8000d30:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d045      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	6803      	ldr	r3, [r0, #0]
 8000d38:	07db      	lsls	r3, r3, #31
 8000d3a:	d42f      	bmi.n	8000d9c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	079b      	lsls	r3, r3, #30
 8000d40:	d500      	bpl.n	8000d44 <HAL_RCC_OscConfig+0x18>
 8000d42:	e081      	b.n	8000e48 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	071b      	lsls	r3, r3, #28
 8000d48:	d500      	bpl.n	8000d4c <HAL_RCC_OscConfig+0x20>
 8000d4a:	e0bc      	b.n	8000ec6 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	075b      	lsls	r3, r3, #29
 8000d50:	d500      	bpl.n	8000d54 <HAL_RCC_OscConfig+0x28>
 8000d52:	e0df      	b.n	8000f14 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	06db      	lsls	r3, r3, #27
 8000d58:	d51a      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000d5a:	6962      	ldr	r2, [r4, #20]
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	4db4      	ldr	r5, [pc, #720]	@ (8001030 <HAL_RCC_OscConfig+0x304>)
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d000      	beq.n	8000d66 <HAL_RCC_OscConfig+0x3a>
 8000d64:	e148      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d66:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d68:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000d6e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000d70:	431a      	orrs	r2, r3
 8000d72:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000d74:	f7ff fde2 	bl	800093c <HAL_GetTick>
 8000d78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d7a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000d7c:	423b      	tst	r3, r7
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x56>
 8000d80:	e133      	b.n	8000fea <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d82:	21f8      	movs	r1, #248	@ 0xf8
 8000d84:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000d86:	69a3      	ldr	r3, [r4, #24]
 8000d88:	438a      	bics	r2, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d90:	6a23      	ldr	r3, [r4, #32]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d000      	beq.n	8000d98 <HAL_RCC_OscConfig+0x6c>
 8000d96:	e157      	b.n	8001048 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e02a      	b.n	8000df2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4da4      	ldr	r5, [pc, #656]	@ (8001030 <HAL_RCC_OscConfig+0x304>)
 8000da0:	686b      	ldr	r3, [r5, #4]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d006      	beq.n	8000db6 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	686b      	ldr	r3, [r5, #4]
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d10a      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x9a>
 8000db0:	686b      	ldr	r3, [r5, #4]
 8000db2:	03db      	lsls	r3, r3, #15
 8000db4:	d507      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	682b      	ldr	r3, [r5, #0]
 8000db8:	039b      	lsls	r3, r3, #14
 8000dba:	d5bf      	bpl.n	8000d3c <HAL_RCC_OscConfig+0x10>
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1bc      	bne.n	8000d3c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc6:	6863      	ldr	r3, [r4, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d114      	bne.n	8000df6 <HAL_RCC_OscConfig+0xca>
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	682a      	ldr	r2, [r5, #0]
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fdb1 	bl	800093c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000ddc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	02bf      	lsls	r7, r7, #10
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	423b      	tst	r3, r7
 8000de4:	d1aa      	bne.n	8000d3c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fda9 	bl	800093c <HAL_GetTick>
 8000dea:	1b80      	subs	r0, r0, r6
 8000dec:	2864      	cmp	r0, #100	@ 0x64
 8000dee:	d9f7      	bls.n	8000de0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
}
 8000df2:	b005      	add	sp, #20
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d116      	bne.n	8000e28 <HAL_RCC_OscConfig+0xfc>
 8000dfa:	682b      	ldr	r3, [r5, #0]
 8000dfc:	4a8d      	ldr	r2, [pc, #564]	@ (8001034 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e00:	4013      	ands	r3, r2
 8000e02:	602b      	str	r3, [r5, #0]
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	4a8c      	ldr	r2, [pc, #560]	@ (8001038 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e08:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fd95 	bl	800093c <HAL_GetTick>
 8000e12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	423b      	tst	r3, r7
 8000e18:	d100      	bne.n	8000e1c <HAL_RCC_OscConfig+0xf0>
 8000e1a:	e78f      	b.n	8000d3c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fd8e 	bl	800093c <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2864      	cmp	r0, #100	@ 0x64
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0xe8>
 8000e26:	e7e3      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d105      	bne.n	8000e38 <HAL_RCC_OscConfig+0x10c>
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	682a      	ldr	r2, [r5, #0]
 8000e30:	02db      	lsls	r3, r3, #11
 8000e32:	4313      	orrs	r3, r2
 8000e34:	602b      	str	r3, [r5, #0]
 8000e36:	e7c9      	b.n	8000dcc <HAL_RCC_OscConfig+0xa0>
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001034 <HAL_RCC_OscConfig+0x308>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	602b      	str	r3, [r5, #0]
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	4a7d      	ldr	r2, [pc, #500]	@ (8001038 <HAL_RCC_OscConfig+0x30c>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	e7c5      	b.n	8000dd4 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4d79      	ldr	r5, [pc, #484]	@ (8001030 <HAL_RCC_OscConfig+0x304>)
 8000e4c:	686b      	ldr	r3, [r5, #4]
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d006      	beq.n	8000e60 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e52:	686b      	ldr	r3, [r5, #4]
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d110      	bne.n	8000e7c <HAL_RCC_OscConfig+0x150>
 8000e5a:	686b      	ldr	r3, [r5, #4]
 8000e5c:	03db      	lsls	r3, r3, #15
 8000e5e:	d40d      	bmi.n	8000e7c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	079b      	lsls	r3, r3, #30
 8000e64:	d502      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x140>
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d1aa      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	21f8      	movs	r1, #248	@ 0xf8
 8000e6e:	682a      	ldr	r2, [r5, #0]
 8000e70:	6923      	ldr	r3, [r4, #16]
 8000e72:	438a      	bics	r2, r1
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	602b      	str	r3, [r5, #0]
 8000e7a:	e763      	b.n	8000d44 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e7c:	68e2      	ldr	r2, [r4, #12]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	d00f      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000e84:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fd56 	bl	800093c <HAL_GetTick>
 8000e90:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	682b      	ldr	r3, [r5, #0]
 8000e94:	423b      	tst	r3, r7
 8000e96:	d1e9      	bne.n	8000e6c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fd50 	bl	800093c <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9f7      	bls.n	8000e92 <HAL_RCC_OscConfig+0x166>
 8000ea2:	e7a5      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8000ea4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000ea8:	439a      	bics	r2, r3
 8000eaa:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000eac:	f7ff fd46 	bl	800093c <HAL_GetTick>
 8000eb0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	423b      	tst	r3, r7
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x18e>
 8000eb8:	e744      	b.n	8000d44 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fd3f 	bl	800093c <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	2802      	cmp	r0, #2
 8000ec2:	d9f6      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x186>
 8000ec4:	e794      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec6:	69e2      	ldr	r2, [r4, #28]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	4d59      	ldr	r5, [pc, #356]	@ (8001030 <HAL_RCC_OscConfig+0x304>)
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d010      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000ed0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fd30 	bl	800093c <HAL_GetTick>
 8000edc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ede:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000ee0:	423b      	tst	r3, r7
 8000ee2:	d000      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1ba>
 8000ee4:	e732      	b.n	8000d4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fd29 	bl	800093c <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f6      	bls.n	8000ede <HAL_RCC_OscConfig+0x1b2>
 8000ef0:	e77e      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8000ef2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000ef6:	439a      	bics	r2, r3
 8000ef8:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000efa:	f7ff fd1f 	bl	800093c <HAL_GetTick>
 8000efe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f00:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f02:	423b      	tst	r3, r7
 8000f04:	d100      	bne.n	8000f08 <HAL_RCC_OscConfig+0x1dc>
 8000f06:	e721      	b.n	8000d4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fd18 	bl	800093c <HAL_GetTick>
 8000f0c:	1b80      	subs	r0, r0, r6
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9f6      	bls.n	8000f00 <HAL_RCC_OscConfig+0x1d4>
 8000f12:	e76d      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f14:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f18:	4d45      	ldr	r5, [pc, #276]	@ (8001030 <HAL_RCC_OscConfig+0x304>)
 8000f1a:	0552      	lsls	r2, r2, #21
 8000f1c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f1e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f20:	4213      	tst	r3, r2
 8000f22:	d108      	bne.n	8000f36 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	69eb      	ldr	r3, [r5, #28]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61eb      	str	r3, [r5, #28]
 8000f2a:	69eb      	ldr	r3, [r5, #28]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f36:	2780      	movs	r7, #128	@ 0x80
 8000f38:	4e40      	ldr	r6, [pc, #256]	@ (800103c <HAL_RCC_OscConfig+0x310>)
 8000f3a:	007f      	lsls	r7, r7, #1
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	423b      	tst	r3, r7
 8000f40:	d015      	beq.n	8000f6e <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d122      	bne.n	8000f8e <HAL_RCC_OscConfig+0x262>
 8000f48:	6a2a      	ldr	r2, [r5, #32]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fcf5 	bl	800093c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f52:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000f54:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f56:	6a2b      	ldr	r3, [r5, #32]
 8000f58:	423b      	tst	r3, r7
 8000f5a:	d03f      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8000f5c:	9b00      	ldr	r3, [sp, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d000      	beq.n	8000f64 <HAL_RCC_OscConfig+0x238>
 8000f62:	e6f7      	b.n	8000d54 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f64:	69eb      	ldr	r3, [r5, #28]
 8000f66:	4a36      	ldr	r2, [pc, #216]	@ (8001040 <HAL_RCC_OscConfig+0x314>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61eb      	str	r3, [r5, #28]
 8000f6c:	e6f2      	b.n	8000d54 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6e:	6833      	ldr	r3, [r6, #0]
 8000f70:	433b      	orrs	r3, r7
 8000f72:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f74:	f7ff fce2 	bl	800093c <HAL_GetTick>
 8000f78:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7a:	6833      	ldr	r3, [r6, #0]
 8000f7c:	423b      	tst	r3, r7
 8000f7e:	d1e0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f80:	f7ff fcdc 	bl	800093c <HAL_GetTick>
 8000f84:	9b01      	ldr	r3, [sp, #4]
 8000f86:	1ac0      	subs	r0, r0, r3
 8000f88:	2864      	cmp	r0, #100	@ 0x64
 8000f8a:	d9f6      	bls.n	8000f7a <HAL_RCC_OscConfig+0x24e>
 8000f8c:	e730      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d114      	bne.n	8000fbe <HAL_RCC_OscConfig+0x292>
 8000f94:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f96:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f98:	4393      	bics	r3, r2
 8000f9a:	622b      	str	r3, [r5, #32]
 8000f9c:	6a2b      	ldr	r3, [r5, #32]
 8000f9e:	3203      	adds	r2, #3
 8000fa0:	4393      	bics	r3, r2
 8000fa2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fcca 	bl	800093c <HAL_GetTick>
 8000fa8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000faa:	6a2b      	ldr	r3, [r5, #32]
 8000fac:	423b      	tst	r3, r7
 8000fae:	d0d5      	beq.n	8000f5c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcc4 	bl	800093c <HAL_GetTick>
 8000fb4:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <HAL_RCC_OscConfig+0x318>)
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	d9f6      	bls.n	8000faa <HAL_RCC_OscConfig+0x27e>
 8000fbc:	e718      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d105      	bne.n	8000fce <HAL_RCC_OscConfig+0x2a2>
 8000fc2:	6a29      	ldr	r1, [r5, #32]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	622b      	str	r3, [r5, #32]
 8000fca:	6a2b      	ldr	r3, [r5, #32]
 8000fcc:	e7bd      	b.n	8000f4a <HAL_RCC_OscConfig+0x21e>
 8000fce:	6a2b      	ldr	r3, [r5, #32]
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	622b      	str	r3, [r5, #32]
 8000fd6:	6a2b      	ldr	r3, [r5, #32]
 8000fd8:	4393      	bics	r3, r2
 8000fda:	e7b7      	b.n	8000f4c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcae 	bl	800093c <HAL_GetTick>
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_RCC_OscConfig+0x318>)
 8000fe2:	1b80      	subs	r0, r0, r6
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	d9b6      	bls.n	8000f56 <HAL_RCC_OscConfig+0x22a>
 8000fe8:	e702      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fea:	f7ff fca7 	bl	800093c <HAL_GetTick>
 8000fee:	1b80      	subs	r0, r0, r6
 8000ff0:	2802      	cmp	r0, #2
 8000ff2:	d800      	bhi.n	8000ff6 <HAL_RCC_OscConfig+0x2ca>
 8000ff4:	e6c1      	b.n	8000d7a <HAL_RCC_OscConfig+0x4e>
 8000ff6:	e6fb      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ff8:	3205      	adds	r2, #5
 8000ffa:	d103      	bne.n	8001004 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ffc:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000ffe:	439a      	bics	r2, r3
 8001000:	636a      	str	r2, [r5, #52]	@ 0x34
 8001002:	e6be      	b.n	8000d82 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001004:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001006:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001008:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800100a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800100c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800100e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001010:	4393      	bics	r3, r2
 8001012:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001014:	f7ff fc92 	bl	800093c <HAL_GetTick>
 8001018:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800101a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800101c:	423b      	tst	r3, r7
 800101e:	d100      	bne.n	8001022 <HAL_RCC_OscConfig+0x2f6>
 8001020:	e6b6      	b.n	8000d90 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001022:	f7ff fc8b 	bl	800093c <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2802      	cmp	r0, #2
 800102a:	d9f6      	bls.n	800101a <HAL_RCC_OscConfig+0x2ee>
 800102c:	e6e0      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	fffeffff 	.word	0xfffeffff
 8001038:	fffbffff 	.word	0xfffbffff
 800103c:	40007000 	.word	0x40007000
 8001040:	efffffff 	.word	0xefffffff
 8001044:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001048:	210c      	movs	r1, #12
 800104a:	4d34      	ldr	r5, [pc, #208]	@ (800111c <HAL_RCC_OscConfig+0x3f0>)
 800104c:	686a      	ldr	r2, [r5, #4]
 800104e:	400a      	ands	r2, r1
 8001050:	2a08      	cmp	r2, #8
 8001052:	d047      	beq.n	80010e4 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001054:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <HAL_RCC_OscConfig+0x3f4>)
 8001056:	2b02      	cmp	r3, #2
 8001058:	d132      	bne.n	80010c0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 800105a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800105e:	4013      	ands	r3, r2
 8001060:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001062:	f7ff fc6b 	bl	800093c <HAL_GetTick>
 8001066:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001068:	04bf      	lsls	r7, r7, #18
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	423b      	tst	r3, r7
 800106e:	d121      	bne.n	80010b4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001070:	220f      	movs	r2, #15
 8001072:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001076:	4393      	bics	r3, r2
 8001078:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800107a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	4313      	orrs	r3, r2
 800107e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001080:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001082:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001084:	686a      	ldr	r2, [r5, #4]
 8001086:	430b      	orrs	r3, r1
 8001088:	4926      	ldr	r1, [pc, #152]	@ (8001124 <HAL_RCC_OscConfig+0x3f8>)
 800108a:	400a      	ands	r2, r1
 800108c:	4313      	orrs	r3, r2
 800108e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	682a      	ldr	r2, [r5, #0]
 8001094:	045b      	lsls	r3, r3, #17
 8001096:	4313      	orrs	r3, r2
 8001098:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800109a:	f7ff fc4f 	bl	800093c <HAL_GetTick>
 800109e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	4233      	tst	r3, r6
 80010a4:	d000      	beq.n	80010a8 <HAL_RCC_OscConfig+0x37c>
 80010a6:	e677      	b.n	8000d98 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fc48 	bl	800093c <HAL_GetTick>
 80010ac:	1b00      	subs	r0, r0, r4
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d9f6      	bls.n	80010a0 <HAL_RCC_OscConfig+0x374>
 80010b2:	e69d      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b4:	f7ff fc42 	bl	800093c <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d9d5      	bls.n	800106a <HAL_RCC_OscConfig+0x33e>
 80010be:	e697      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 80010c0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80010c4:	4013      	ands	r3, r2
 80010c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010c8:	f7ff fc38 	bl	800093c <HAL_GetTick>
 80010cc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	04b6      	lsls	r6, r6, #18
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	4233      	tst	r3, r6
 80010d4:	d100      	bne.n	80010d8 <HAL_RCC_OscConfig+0x3ac>
 80010d6:	e65f      	b.n	8000d98 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fc30 	bl	800093c <HAL_GetTick>
 80010dc:	1b00      	subs	r0, r0, r4
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9f6      	bls.n	80010d0 <HAL_RCC_OscConfig+0x3a4>
 80010e2:	e685      	b.n	8000df0 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d100      	bne.n	80010ea <HAL_RCC_OscConfig+0x3be>
 80010e8:	e66b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 80010ec:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80010f0:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80010f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f4:	4002      	ands	r2, r0
 80010f6:	428a      	cmp	r2, r1
 80010f8:	d000      	beq.n	80010fc <HAL_RCC_OscConfig+0x3d0>
 80010fa:	e662      	b.n	8000dc2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010fc:	220f      	movs	r2, #15
 80010fe:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001100:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001102:	4293      	cmp	r3, r2
 8001104:	d000      	beq.n	8001108 <HAL_RCC_OscConfig+0x3dc>
 8001106:	e65c      	b.n	8000dc2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001108:	23f0      	movs	r3, #240	@ 0xf0
 800110a:	039b      	lsls	r3, r3, #14
 800110c:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800110e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001110:	1ac0      	subs	r0, r0, r3
 8001112:	1e43      	subs	r3, r0, #1
 8001114:	4198      	sbcs	r0, r3
 8001116:	b2c0      	uxtb	r0, r0
 8001118:	e66b      	b.n	8000df2 <HAL_RCC_OscConfig+0xc6>
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	40021000 	.word	0x40021000
 8001120:	feffffff 	.word	0xfeffffff
 8001124:	ffc2ffff 	.word	0xffc2ffff

08001128 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001128:	220c      	movs	r2, #12
{
 800112a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800112c:	4d0c      	ldr	r5, [pc, #48]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x38>)
 800112e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001130:	401a      	ands	r2, r3
 8001132:	2a08      	cmp	r2, #8
 8001134:	d111      	bne.n	800115a <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001136:	200f      	movs	r0, #15
 8001138:	490a      	ldr	r1, [pc, #40]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x3c>)
 800113a:	0c9a      	lsrs	r2, r3, #18
 800113c:	4002      	ands	r2, r0
 800113e:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001140:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001142:	03db      	lsls	r3, r3, #15
 8001144:	d507      	bpl.n	8001156 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001146:	4908      	ldr	r1, [pc, #32]	@ (8001168 <HAL_RCC_GetSysClockFreq+0x40>)
 8001148:	4002      	ands	r2, r0
 800114a:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800114c:	4807      	ldr	r0, [pc, #28]	@ (800116c <HAL_RCC_GetSysClockFreq+0x44>)
 800114e:	f7fe ffe5 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001152:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001154:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <HAL_RCC_GetSysClockFreq+0x48>)
 8001158:	e7fb      	b.n	8001152 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800115a:	4804      	ldr	r0, [pc, #16]	@ (800116c <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 800115c:	e7fa      	b.n	8001154 <HAL_RCC_GetSysClockFreq+0x2c>
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	40021000 	.word	0x40021000
 8001164:	08001d58 	.word	0x08001d58
 8001168:	08001d48 	.word	0x08001d48
 800116c:	007a1200 	.word	0x007a1200
 8001170:	003d0900 	.word	0x003d0900

08001174 <HAL_RCC_ClockConfig>:
{
 8001174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001176:	0004      	movs	r4, r0
 8001178:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800117a:	2800      	cmp	r0, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
}
 8001180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001182:	2201      	movs	r2, #1
 8001184:	4d37      	ldr	r5, [pc, #220]	@ (8001264 <HAL_RCC_ClockConfig+0xf0>)
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	4013      	ands	r3, r2
 800118a:	428b      	cmp	r3, r1
 800118c:	d31c      	bcc.n	80011c8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	0793      	lsls	r3, r2, #30
 8001192:	d422      	bmi.n	80011da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001194:	07d2      	lsls	r2, r2, #31
 8001196:	d42f      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001198:	2301      	movs	r3, #1
 800119a:	682a      	ldr	r2, [r5, #0]
 800119c:	401a      	ands	r2, r3
 800119e:	42b2      	cmp	r2, r6
 80011a0:	d851      	bhi.n	8001246 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	4d30      	ldr	r5, [pc, #192]	@ (8001268 <HAL_RCC_ClockConfig+0xf4>)
 80011a6:	075b      	lsls	r3, r3, #29
 80011a8:	d454      	bmi.n	8001254 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011aa:	f7ff ffbd 	bl	8001128 <HAL_RCC_GetSysClockFreq>
 80011ae:	686b      	ldr	r3, [r5, #4]
 80011b0:	4a2e      	ldr	r2, [pc, #184]	@ (800126c <HAL_RCC_ClockConfig+0xf8>)
 80011b2:	061b      	lsls	r3, r3, #24
 80011b4:	0f1b      	lsrs	r3, r3, #28
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	492d      	ldr	r1, [pc, #180]	@ (8001270 <HAL_RCC_ClockConfig+0xfc>)
 80011ba:	40d8      	lsrs	r0, r3
 80011bc:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fb7c 	bl	80008bc <HAL_InitTick>
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
 80011c6:	e7db      	b.n	8001180 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	4393      	bics	r3, r2
 80011cc:	430b      	orrs	r3, r1
 80011ce:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	4013      	ands	r3, r2
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d1d2      	bne.n	800117e <HAL_RCC_ClockConfig+0xa>
 80011d8:	e7d9      	b.n	800118e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011da:	4923      	ldr	r1, [pc, #140]	@ (8001268 <HAL_RCC_ClockConfig+0xf4>)
 80011dc:	0753      	lsls	r3, r2, #29
 80011de:	d504      	bpl.n	80011ea <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011e0:	23e0      	movs	r3, #224	@ 0xe0
 80011e2:	6848      	ldr	r0, [r1, #4]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4303      	orrs	r3, r0
 80011e8:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ea:	20f0      	movs	r0, #240	@ 0xf0
 80011ec:	684b      	ldr	r3, [r1, #4]
 80011ee:	4383      	bics	r3, r0
 80011f0:	68a0      	ldr	r0, [r4, #8]
 80011f2:	4303      	orrs	r3, r0
 80011f4:	604b      	str	r3, [r1, #4]
 80011f6:	e7cd      	b.n	8001194 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f8:	4f1b      	ldr	r7, [pc, #108]	@ (8001268 <HAL_RCC_ClockConfig+0xf4>)
 80011fa:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	2a01      	cmp	r2, #1
 8001200:	d119      	bne.n	8001236 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	d5bb      	bpl.n	800117e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	2103      	movs	r1, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	438b      	bics	r3, r1
 800120c:	4313      	orrs	r3, r2
 800120e:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8001210:	f7ff fb94 	bl	800093c <HAL_GetTick>
 8001214:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	230c      	movs	r3, #12
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	401a      	ands	r2, r3
 800121c:	6863      	ldr	r3, [r4, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d0b9      	beq.n	8001198 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001224:	f7ff fb8a 	bl	800093c <HAL_GetTick>
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	1ac0      	subs	r0, r0, r3
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_RCC_ClockConfig+0x100>)
 800122e:	4298      	cmp	r0, r3
 8001230:	d9f1      	bls.n	8001216 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001232:	2003      	movs	r0, #3
 8001234:	e7a4      	b.n	8001180 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001236:	2a02      	cmp	r2, #2
 8001238:	d102      	bne.n	8001240 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	d4e3      	bmi.n	8001206 <HAL_RCC_ClockConfig+0x92>
 800123e:	e79e      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	079b      	lsls	r3, r3, #30
 8001242:	d4e0      	bmi.n	8001206 <HAL_RCC_ClockConfig+0x92>
 8001244:	e79b      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	682a      	ldr	r2, [r5, #0]
 8001248:	439a      	bics	r2, r3
 800124a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124c:	682a      	ldr	r2, [r5, #0]
 800124e:	421a      	tst	r2, r3
 8001250:	d0a7      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x2e>
 8001252:	e794      	b.n	800117e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	686b      	ldr	r3, [r5, #4]
 8001256:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_RCC_ClockConfig+0x104>)
 8001258:	4013      	ands	r3, r2
 800125a:	68e2      	ldr	r2, [r4, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	606b      	str	r3, [r5, #4]
 8001260:	e7a3      	b.n	80011aa <HAL_RCC_ClockConfig+0x36>
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	40022000 	.word	0x40022000
 8001268:	40021000 	.word	0x40021000
 800126c:	08001d38 	.word	0x08001d38
 8001270:	20000000 	.word	0x20000000
 8001274:	00001388 	.word	0x00001388
 8001278:	fffff8ff 	.word	0xfffff8ff

0800127c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800127c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800127e:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8001280:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001282:	6a02      	ldr	r2, [r0, #32]
 8001284:	43a2      	bics	r2, r4
 8001286:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001288:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800128a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800128c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800128e:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001290:	680a      	ldr	r2, [r1, #0]
 8001292:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001294:	2202      	movs	r2, #2
 8001296:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001298:	688a      	ldr	r2, [r1, #8]
 800129a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800129c:	4a11      	ldr	r2, [pc, #68]	@ (80012e4 <TIM_OC1_SetConfig+0x68>)
 800129e:	4290      	cmp	r0, r2
 80012a0:	d005      	beq.n	80012ae <TIM_OC1_SetConfig+0x32>
 80012a2:	4e11      	ldr	r6, [pc, #68]	@ (80012e8 <TIM_OC1_SetConfig+0x6c>)
 80012a4:	42b0      	cmp	r0, r6
 80012a6:	d002      	beq.n	80012ae <TIM_OC1_SetConfig+0x32>
 80012a8:	4e10      	ldr	r6, [pc, #64]	@ (80012ec <TIM_OC1_SetConfig+0x70>)
 80012aa:	42b0      	cmp	r0, r6
 80012ac:	d113      	bne.n	80012d6 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80012ae:	2608      	movs	r6, #8
 80012b0:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012b2:	68ce      	ldr	r6, [r1, #12]
 80012b4:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80012b6:	2604      	movs	r6, #4
 80012b8:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d005      	beq.n	80012ca <TIM_OC1_SetConfig+0x4e>
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <TIM_OC1_SetConfig+0x6c>)
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d002      	beq.n	80012ca <TIM_OC1_SetConfig+0x4e>
 80012c4:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <TIM_OC1_SetConfig+0x70>)
 80012c6:	4290      	cmp	r0, r2
 80012c8:	d105      	bne.n	80012d6 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80012cc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012ce:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80012d0:	694c      	ldr	r4, [r1, #20]
 80012d2:	4334      	orrs	r4, r6
 80012d4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80012d6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80012d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012da:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80012dc:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012de:	6203      	str	r3, [r0, #32]
}
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	40012c00 	.word	0x40012c00
 80012e8:	40014400 	.word	0x40014400
 80012ec:	40014800 	.word	0x40014800
 80012f0:	fffffcff 	.word	0xfffffcff

080012f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80012f4:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80012f6:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 80012f8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80012fa:	6a03      	ldr	r3, [r0, #32]
 80012fc:	4013      	ands	r3, r2
 80012fe:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001300:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8001302:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001304:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001306:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001308:	680b      	ldr	r3, [r1, #0]
 800130a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <TIM_OC3_SetConfig+0x64>)
 800130e:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001310:	688b      	ldr	r3, [r1, #8]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001316:	4d11      	ldr	r5, [pc, #68]	@ (800135c <TIM_OC3_SetConfig+0x68>)
 8001318:	42a8      	cmp	r0, r5
 800131a:	d10e      	bne.n	800133a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800131c:	4d10      	ldr	r5, [pc, #64]	@ (8001360 <TIM_OC3_SetConfig+0x6c>)
 800131e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001320:	68cb      	ldr	r3, [r1, #12]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001326:	4d0f      	ldr	r5, [pc, #60]	@ (8001364 <TIM_OC3_SetConfig+0x70>)
 8001328:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800132a:	4d0f      	ldr	r5, [pc, #60]	@ (8001368 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800132c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800132e:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001330:	698a      	ldr	r2, [r1, #24]
 8001332:	4332      	orrs	r2, r6
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	432a      	orrs	r2, r5
 8001338:	e005      	b.n	8001346 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800133a:	4d0c      	ldr	r5, [pc, #48]	@ (800136c <TIM_OC3_SetConfig+0x78>)
 800133c:	42a8      	cmp	r0, r5
 800133e:	d0f4      	beq.n	800132a <TIM_OC3_SetConfig+0x36>
 8001340:	4d0b      	ldr	r5, [pc, #44]	@ (8001370 <TIM_OC3_SetConfig+0x7c>)
 8001342:	42a8      	cmp	r0, r5
 8001344:	d0f1      	beq.n	800132a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001346:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001348:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800134a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800134c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800134e:	6203      	str	r3, [r0, #32]
}
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	fffffeff 	.word	0xfffffeff
 8001358:	fffffdff 	.word	0xfffffdff
 800135c:	40012c00 	.word	0x40012c00
 8001360:	fffff7ff 	.word	0xfffff7ff
 8001364:	fffffbff 	.word	0xfffffbff
 8001368:	ffffcfff 	.word	0xffffcfff
 800136c:	40014400 	.word	0x40014400
 8001370:	40014800 	.word	0x40014800

08001374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001374:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8001378:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800137a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800137c:	4d11      	ldr	r5, [pc, #68]	@ (80013c4 <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800137e:	4013      	ands	r3, r2
 8001380:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001382:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001384:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001386:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001388:	680d      	ldr	r5, [r1, #0]
 800138a:	022d      	lsls	r5, r5, #8
 800138c:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <TIM_OC4_SetConfig+0x54>)
 8001390:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001392:	688a      	ldr	r2, [r1, #8]
 8001394:	0312      	lsls	r2, r2, #12
 8001396:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001398:	4c0c      	ldr	r4, [pc, #48]	@ (80013cc <TIM_OC4_SetConfig+0x58>)
 800139a:	42a0      	cmp	r0, r4
 800139c:	d005      	beq.n	80013aa <TIM_OC4_SetConfig+0x36>
 800139e:	4c0c      	ldr	r4, [pc, #48]	@ (80013d0 <TIM_OC4_SetConfig+0x5c>)
 80013a0:	42a0      	cmp	r0, r4
 80013a2:	d002      	beq.n	80013aa <TIM_OC4_SetConfig+0x36>
 80013a4:	4c0b      	ldr	r4, [pc, #44]	@ (80013d4 <TIM_OC4_SetConfig+0x60>)
 80013a6:	42a0      	cmp	r0, r4
 80013a8:	d104      	bne.n	80013b4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80013aa:	4c0b      	ldr	r4, [pc, #44]	@ (80013d8 <TIM_OC4_SetConfig+0x64>)
 80013ac:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80013ae:	694b      	ldr	r3, [r1, #20]
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b4:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80013b6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013b8:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80013ba:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013bc:	6202      	str	r2, [r0, #32]
}
 80013be:	bd30      	pop	{r4, r5, pc}
 80013c0:	ffffefff 	.word	0xffffefff
 80013c4:	ffff8cff 	.word	0xffff8cff
 80013c8:	ffffdfff 	.word	0xffffdfff
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	40014400 	.word	0x40014400
 80013d4:	40014800 	.word	0x40014800
 80013d8:	ffffbfff 	.word	0xffffbfff

080013dc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80013dc:	4770      	bx	lr

080013de <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80013de:	4770      	bx	lr

080013e0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80013e4:	4770      	bx	lr

080013e6 <TIM_DMADelayPulseCplt>:
{
 80013e6:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013e8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80013ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80013ec:	4282      	cmp	r2, r0
 80013ee:	d10d      	bne.n	800140c <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80013f4:	6992      	ldr	r2, [r2, #24]
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d102      	bne.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80013fa:	0022      	movs	r2, r4
 80013fc:	323e      	adds	r2, #62	@ 0x3e
 80013fe:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001400:	0020      	movs	r0, r4
 8001402:	f7ff ffef 	bl	80013e4 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001406:	2300      	movs	r3, #0
 8001408:	7723      	strb	r3, [r4, #28]
}
 800140a:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800140c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800140e:	4283      	cmp	r3, r0
 8001410:	d109      	bne.n	8001426 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001412:	2202      	movs	r2, #2
 8001414:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f1      	bne.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800141c:	0023      	movs	r3, r4
 800141e:	3a01      	subs	r2, #1
 8001420:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e7ec      	b.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001426:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001428:	4283      	cmp	r3, r0
 800142a:	d108      	bne.n	800143e <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800142c:	2204      	movs	r2, #4
 800142e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e4      	bne.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001436:	0023      	movs	r3, r4
 8001438:	3a03      	subs	r2, #3
 800143a:	3340      	adds	r3, #64	@ 0x40
 800143c:	e7f1      	b.n	8001422 <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800143e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001440:	4283      	cmp	r3, r0
 8001442:	d1dd      	bne.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001444:	2208      	movs	r2, #8
 8001446:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1d8      	bne.n	8001400 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800144e:	0023      	movs	r3, r4
 8001450:	3a07      	subs	r2, #7
 8001452:	3341      	adds	r3, #65	@ 0x41
 8001454:	e7e5      	b.n	8001422 <TIM_DMADelayPulseCplt+0x3c>

08001456 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8001456:	4770      	bx	lr

08001458 <TIM_DMADelayPulseHalfCplt>:
{
 8001458:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800145a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800145c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800145e:	4283      	cmp	r3, r0
 8001460:	d107      	bne.n	8001472 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001462:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001464:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8001466:	0020      	movs	r0, r4
 8001468:	f7ff fff5 	bl	8001456 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800146c:	2300      	movs	r3, #0
 800146e:	7723      	strb	r3, [r4, #28]
}
 8001470:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001472:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001474:	4283      	cmp	r3, r0
 8001476:	d101      	bne.n	800147c <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001478:	2302      	movs	r3, #2
 800147a:	e7f3      	b.n	8001464 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800147c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800147e:	4283      	cmp	r3, r0
 8001480:	d101      	bne.n	8001486 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001482:	2304      	movs	r3, #4
 8001484:	e7ee      	b.n	8001464 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001486:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001488:	4283      	cmp	r3, r0
 800148a:	d1ec      	bne.n	8001466 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800148c:	2308      	movs	r3, #8
 800148e:	e7e9      	b.n	8001464 <TIM_DMADelayPulseHalfCplt+0xc>

08001490 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001490:	4770      	bx	lr

08001492 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001492:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8001494:	6803      	ldr	r3, [r0, #0]
{
 8001496:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001498:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800149a:	691e      	ldr	r6, [r3, #16]
{
 800149c:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800149e:	4216      	tst	r6, r2
 80014a0:	d00d      	beq.n	80014be <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014a2:	4215      	tst	r5, r2
 80014a4:	d00b      	beq.n	80014be <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014a6:	3a05      	subs	r2, #5
 80014a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014aa:	3204      	adds	r2, #4
 80014ac:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	079b      	lsls	r3, r3, #30
 80014b2:	d100      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x24>
 80014b4:	e071      	b.n	800159a <HAL_TIM_IRQHandler+0x108>
          HAL_TIM_IC_CaptureCallback(htim);
 80014b6:	f7ff ff94 	bl	80013e2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ba:	2300      	movs	r3, #0
 80014bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014be:	2304      	movs	r3, #4
 80014c0:	421e      	tst	r6, r3
 80014c2:	d011      	beq.n	80014e8 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014c4:	421d      	tst	r5, r3
 80014c6:	d00f      	beq.n	80014e8 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014c8:	2205      	movs	r2, #5
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	4252      	negs	r2, r2
 80014ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014d0:	3207      	adds	r2, #7
 80014d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014d4:	699a      	ldr	r2, [r3, #24]
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80014da:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014dc:	421a      	tst	r2, r3
 80014de:	d062      	beq.n	80015a6 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80014e0:	f7ff ff7f 	bl	80013e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e4:	2300      	movs	r3, #0
 80014e6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80014e8:	2308      	movs	r3, #8
 80014ea:	421e      	tst	r6, r3
 80014ec:	d00f      	beq.n	800150e <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80014ee:	421d      	tst	r5, r3
 80014f0:	d00d      	beq.n	800150e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80014f2:	2209      	movs	r2, #9
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	4252      	negs	r2, r2
 80014f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014fa:	320d      	adds	r2, #13
 80014fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014fe:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001500:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001502:	079b      	lsls	r3, r3, #30
 8001504:	d055      	beq.n	80015b2 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8001506:	f7ff ff6c 	bl	80013e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	2300      	movs	r3, #0
 800150c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800150e:	2310      	movs	r3, #16
 8001510:	421e      	tst	r6, r3
 8001512:	d011      	beq.n	8001538 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001514:	421d      	tst	r5, r3
 8001516:	d00f      	beq.n	8001538 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001518:	2211      	movs	r2, #17
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	4252      	negs	r2, r2
 800151e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001520:	3219      	adds	r2, #25
 8001522:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	23c0      	movs	r3, #192	@ 0xc0
 8001528:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800152a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800152c:	421a      	tst	r2, r3
 800152e:	d046      	beq.n	80015be <HAL_TIM_IRQHandler+0x12c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001530:	f7ff ff57 	bl	80013e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001534:	2300      	movs	r3, #0
 8001536:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001538:	2301      	movs	r3, #1
 800153a:	421e      	tst	r6, r3
 800153c:	d008      	beq.n	8001550 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800153e:	421d      	tst	r5, r3
 8001540:	d006      	beq.n	8001550 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001542:	2202      	movs	r2, #2
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8001548:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800154a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800154c:	f7ff ff47 	bl	80013de <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	421e      	tst	r6, r3
 8001554:	d008      	beq.n	8001568 <HAL_TIM_IRQHandler+0xd6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001556:	421d      	tst	r5, r3
 8001558:	d006      	beq.n	8001568 <HAL_TIM_IRQHandler+0xd6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800155a:	2281      	movs	r2, #129	@ 0x81
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 8001560:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001562:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001564:	f000 fbaf 	bl	8001cc6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001568:	2340      	movs	r3, #64	@ 0x40
 800156a:	421e      	tst	r6, r3
 800156c:	d008      	beq.n	8001580 <HAL_TIM_IRQHandler+0xee>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800156e:	421d      	tst	r5, r3
 8001570:	d006      	beq.n	8001580 <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001572:	2241      	movs	r2, #65	@ 0x41
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8001578:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800157a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800157c:	f7ff ff88 	bl	8001490 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001580:	2320      	movs	r3, #32
 8001582:	421e      	tst	r6, r3
 8001584:	d008      	beq.n	8001598 <HAL_TIM_IRQHandler+0x106>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001586:	421d      	tst	r5, r3
 8001588:	d006      	beq.n	8001598 <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800158a:	2221      	movs	r2, #33	@ 0x21
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8001590:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001592:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001594:	f000 fb96 	bl	8001cc4 <HAL_TIMEx_CommutCallback>
}
 8001598:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	f7ff ff21 	bl	80013e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159e:	0020      	movs	r0, r4
 80015a0:	f7ff ff20 	bl	80013e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80015a4:	e789      	b.n	80014ba <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a6:	f7ff ff1b 	bl	80013e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015aa:	0020      	movs	r0, r4
 80015ac:	f7ff ff1a 	bl	80013e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80015b0:	e798      	b.n	80014e4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	f7ff ff15 	bl	80013e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b6:	0020      	movs	r0, r4
 80015b8:	f7ff ff14 	bl	80013e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80015bc:	e7a5      	b.n	800150a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015be:	f7ff ff0f 	bl	80013e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c2:	0020      	movs	r0, r4
 80015c4:	f7ff ff0e 	bl	80013e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80015c8:	e7b4      	b.n	8001534 <HAL_TIM_IRQHandler+0xa2>

080015ca <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 80015ca:	4770      	bx	lr

080015cc <TIM_DMAError>:
{
 80015cc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015ce:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80015d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80015d2:	4283      	cmp	r3, r0
 80015d4:	d105      	bne.n	80015e2 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d6:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80015d8:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015da:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80015dc:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 80015de:	7013      	strb	r3, [r2, #0]
 80015e0:	e008      	b.n	80015f4 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80015e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80015e4:	4283      	cmp	r3, r0
 80015e6:	d10b      	bne.n	8001600 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	0023      	movs	r3, r4
 80015ee:	2201      	movs	r2, #1
 80015f0:	333f      	adds	r3, #63	@ 0x3f
 80015f2:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80015f4:	0020      	movs	r0, r4
 80015f6:	f7ff ffe8 	bl	80015ca <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fa:	2300      	movs	r3, #0
 80015fc:	7723      	strb	r3, [r4, #28]
}
 80015fe:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001600:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001602:	2301      	movs	r3, #1
 8001604:	4282      	cmp	r2, r0
 8001606:	d104      	bne.n	8001612 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001608:	2204      	movs	r2, #4
 800160a:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	0022      	movs	r2, r4
 800160e:	3240      	adds	r2, #64	@ 0x40
 8001610:	e7e5      	b.n	80015de <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001612:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001614:	4282      	cmp	r2, r0
 8001616:	d104      	bne.n	8001622 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001618:	2208      	movs	r2, #8
 800161a:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800161c:	0022      	movs	r2, r4
 800161e:	3241      	adds	r2, #65	@ 0x41
 8001620:	e7dd      	b.n	80015de <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8001622:	0022      	movs	r2, r4
 8001624:	323d      	adds	r2, #61	@ 0x3d
 8001626:	e7da      	b.n	80015de <TIM_DMAError+0x12>

08001628 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <TIM_Base_SetConfig+0x74>)
{
 800162a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800162c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800162e:	4290      	cmp	r0, r2
 8001630:	d002      	beq.n	8001638 <TIM_Base_SetConfig+0x10>
 8001632:	4c1b      	ldr	r4, [pc, #108]	@ (80016a0 <TIM_Base_SetConfig+0x78>)
 8001634:	42a0      	cmp	r0, r4
 8001636:	d108      	bne.n	800164a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001638:	2470      	movs	r4, #112	@ 0x70
 800163a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800163c:	684c      	ldr	r4, [r1, #4]
 800163e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001640:	4290      	cmp	r0, r2
 8001642:	d00b      	beq.n	800165c <TIM_Base_SetConfig+0x34>
 8001644:	4c16      	ldr	r4, [pc, #88]	@ (80016a0 <TIM_Base_SetConfig+0x78>)
 8001646:	42a0      	cmp	r0, r4
 8001648:	d008      	beq.n	800165c <TIM_Base_SetConfig+0x34>
 800164a:	4c16      	ldr	r4, [pc, #88]	@ (80016a4 <TIM_Base_SetConfig+0x7c>)
 800164c:	42a0      	cmp	r0, r4
 800164e:	d005      	beq.n	800165c <TIM_Base_SetConfig+0x34>
 8001650:	4c15      	ldr	r4, [pc, #84]	@ (80016a8 <TIM_Base_SetConfig+0x80>)
 8001652:	42a0      	cmp	r0, r4
 8001654:	d002      	beq.n	800165c <TIM_Base_SetConfig+0x34>
 8001656:	4c15      	ldr	r4, [pc, #84]	@ (80016ac <TIM_Base_SetConfig+0x84>)
 8001658:	42a0      	cmp	r0, r4
 800165a:	d103      	bne.n	8001664 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800165c:	4c14      	ldr	r4, [pc, #80]	@ (80016b0 <TIM_Base_SetConfig+0x88>)
 800165e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001660:	68cb      	ldr	r3, [r1, #12]
 8001662:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001664:	2480      	movs	r4, #128	@ 0x80
 8001666:	43a3      	bics	r3, r4
 8001668:	694c      	ldr	r4, [r1, #20]
 800166a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800166c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800166e:	688b      	ldr	r3, [r1, #8]
 8001670:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001672:	680b      	ldr	r3, [r1, #0]
 8001674:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001676:	4290      	cmp	r0, r2
 8001678:	d005      	beq.n	8001686 <TIM_Base_SetConfig+0x5e>
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <TIM_Base_SetConfig+0x80>)
 800167c:	4298      	cmp	r0, r3
 800167e:	d002      	beq.n	8001686 <TIM_Base_SetConfig+0x5e>
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <TIM_Base_SetConfig+0x84>)
 8001682:	4298      	cmp	r0, r3
 8001684:	d101      	bne.n	800168a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8001686:	690b      	ldr	r3, [r1, #16]
 8001688:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800168a:	2201      	movs	r2, #1
 800168c:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800168e:	6903      	ldr	r3, [r0, #16]
 8001690:	4213      	tst	r3, r2
 8001692:	d002      	beq.n	800169a <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001694:	6903      	ldr	r3, [r0, #16]
 8001696:	4393      	bics	r3, r2
 8001698:	6103      	str	r3, [r0, #16]
}
 800169a:	bd10      	pop	{r4, pc}
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40002000 	.word	0x40002000
 80016a8:	40014400 	.word	0x40014400
 80016ac:	40014800 	.word	0x40014800
 80016b0:	fffffcff 	.word	0xfffffcff

080016b4 <HAL_TIM_Base_Init>:
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
  if (htim == NULL)
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d021      	beq.n	8001702 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80016be:	0025      	movs	r5, r4
 80016c0:	353d      	adds	r5, #61	@ 0x3d
 80016c2:	782b      	ldrb	r3, [r5, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80016ca:	0023      	movs	r3, r4
 80016cc:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016ce:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80016d0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80016d2:	f7fe ff67 	bl	80005a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	1d21      	adds	r1, r4, #4
 80016de:	f7ff ffa3 	bl	8001628 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016e2:	0022      	movs	r2, r4
 80016e4:	2301      	movs	r3, #1
  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016e8:	3246      	adds	r2, #70	@ 0x46
 80016ea:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ec:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ee:	3a08      	subs	r2, #8
 80016f0:	7013      	strb	r3, [r2, #0]
 80016f2:	7053      	strb	r3, [r2, #1]
 80016f4:	7093      	strb	r3, [r2, #2]
 80016f6:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f8:	7113      	strb	r3, [r2, #4]
 80016fa:	7153      	strb	r3, [r2, #5]
 80016fc:	7193      	strb	r3, [r2, #6]
 80016fe:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001700:	702b      	strb	r3, [r5, #0]
}
 8001702:	bd70      	pop	{r4, r5, r6, pc}

08001704 <HAL_TIM_PWM_Init>:
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
  if (htim == NULL)
 800170a:	2c00      	cmp	r4, #0
 800170c:	d021      	beq.n	8001752 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800170e:	0025      	movs	r5, r4
 8001710:	353d      	adds	r5, #61	@ 0x3d
 8001712:	782b      	ldrb	r3, [r5, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800171a:	0023      	movs	r3, r4
 800171c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800171e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8001720:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001722:	f7ff fe5b 	bl	80013dc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001726:	2302      	movs	r3, #2
 8001728:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	1d21      	adds	r1, r4, #4
 800172e:	f7ff ff7b 	bl	8001628 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001732:	0022      	movs	r2, r4
 8001734:	2301      	movs	r3, #1
  return HAL_OK;
 8001736:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001738:	3246      	adds	r2, #70	@ 0x46
 800173a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173c:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173e:	3a08      	subs	r2, #8
 8001740:	7013      	strb	r3, [r2, #0]
 8001742:	7053      	strb	r3, [r2, #1]
 8001744:	7093      	strb	r3, [r2, #2]
 8001746:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001748:	7113      	strb	r3, [r2, #4]
 800174a:	7153      	strb	r3, [r2, #5]
 800174c:	7193      	strb	r3, [r2, #6]
 800174e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001750:	702b      	strb	r3, [r5, #0]
}
 8001752:	bd70      	pop	{r4, r5, r6, pc}

08001754 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001754:	2210      	movs	r2, #16
{
 8001756:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8001758:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800175a:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800175c:	4c16      	ldr	r4, [pc, #88]	@ (80017b8 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800175e:	4393      	bics	r3, r2
 8001760:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001762:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001764:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001766:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001768:	680c      	ldr	r4, [r1, #0]
 800176a:	0224      	lsls	r4, r4, #8
 800176c:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800176e:	2320      	movs	r3, #32
 8001770:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001772:	688b      	ldr	r3, [r1, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001778:	4d10      	ldr	r5, [pc, #64]	@ (80017bc <TIM_OC2_SetConfig+0x68>)
 800177a:	42a8      	cmp	r0, r5
 800177c:	d10f      	bne.n	800179e <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800177e:	2580      	movs	r5, #128	@ 0x80
 8001780:	43ab      	bics	r3, r5
 8001782:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001784:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001786:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800178c:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800178e:	4d0c      	ldr	r5, [pc, #48]	@ (80017c0 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001790:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001792:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001794:	698a      	ldr	r2, [r1, #24]
 8001796:	4332      	orrs	r2, r6
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	432a      	orrs	r2, r5
 800179c:	e005      	b.n	80017aa <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800179e:	4d09      	ldr	r5, [pc, #36]	@ (80017c4 <TIM_OC2_SetConfig+0x70>)
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	d0f4      	beq.n	800178e <TIM_OC2_SetConfig+0x3a>
 80017a4:	4d08      	ldr	r5, [pc, #32]	@ (80017c8 <TIM_OC2_SetConfig+0x74>)
 80017a6:	42a8      	cmp	r0, r5
 80017a8:	d0f1      	beq.n	800178e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80017aa:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80017ac:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80017ae:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80017b0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80017b2:	6203      	str	r3, [r0, #32]
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	ffff8cff 	.word	0xffff8cff
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	fffff3ff 	.word	0xfffff3ff
 80017c4:	40014400 	.word	0x40014400
 80017c8:	40014800 	.word	0x40014800

080017cc <HAL_TIM_PWM_ConfigChannel>:
{
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80017ce:	0006      	movs	r6, r0
 80017d0:	363c      	adds	r6, #60	@ 0x3c
{
 80017d2:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80017d4:	7832      	ldrb	r2, [r6, #0]
{
 80017d6:	0003      	movs	r3, r0
 80017d8:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80017da:	2002      	movs	r0, #2
 80017dc:	2a01      	cmp	r2, #1
 80017de:	d00a      	beq.n	80017f6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80017e0:	3801      	subs	r0, #1
 80017e2:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 80017e4:	2d08      	cmp	r5, #8
 80017e6:	d03f      	beq.n	8001868 <HAL_TIM_PWM_ConfigChannel+0x9c>
 80017e8:	d806      	bhi.n	80017f8 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80017ea:	2d00      	cmp	r5, #0
 80017ec:	d019      	beq.n	8001822 <HAL_TIM_PWM_ConfigChannel+0x56>
 80017ee:	2d04      	cmp	r5, #4
 80017f0:	d029      	beq.n	8001846 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 80017f2:	2300      	movs	r3, #0
 80017f4:	7033      	strb	r3, [r6, #0]
}
 80017f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80017f8:	2d0c      	cmp	r5, #12
 80017fa:	d1fa      	bne.n	80017f2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017fc:	681d      	ldr	r5, [r3, #0]
 80017fe:	0028      	movs	r0, r5
 8001800:	f7ff fdb8 	bl	8001374 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	69ea      	ldr	r2, [r5, #28]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4313      	orrs	r3, r2
 800180c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800180e:	69eb      	ldr	r3, [r5, #28]
 8001810:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8001812:	4013      	ands	r3, r2
 8001814:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001816:	6923      	ldr	r3, [r4, #16]
 8001818:	69ea      	ldr	r2, [r5, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4313      	orrs	r3, r2
 800181e:	61eb      	str	r3, [r5, #28]
      break;
 8001820:	e00f      	b.n	8001842 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001822:	681d      	ldr	r5, [r3, #0]
 8001824:	0028      	movs	r0, r5
 8001826:	f7ff fd29 	bl	800127c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800182a:	2308      	movs	r3, #8
 800182c:	69aa      	ldr	r2, [r5, #24]
 800182e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001830:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001832:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001834:	69ab      	ldr	r3, [r5, #24]
 8001836:	4393      	bics	r3, r2
 8001838:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800183a:	69ab      	ldr	r3, [r5, #24]
 800183c:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800183e:	4313      	orrs	r3, r2
 8001840:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2000      	movs	r0, #0
 8001844:	e7d5      	b.n	80017f2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001846:	681d      	ldr	r5, [r3, #0]
 8001848:	0028      	movs	r0, r5
 800184a:	f7ff ff83 	bl	8001754 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	69aa      	ldr	r2, [r5, #24]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4313      	orrs	r3, r2
 8001856:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001858:	69ab      	ldr	r3, [r5, #24]
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 800185c:	4013      	ands	r3, r2
 800185e:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001860:	6923      	ldr	r3, [r4, #16]
 8001862:	69aa      	ldr	r2, [r5, #24]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	e7ea      	b.n	800183e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001868:	681f      	ldr	r7, [r3, #0]
 800186a:	0038      	movs	r0, r7
 800186c:	f7ff fd42 	bl	80012f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001870:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	431d      	orrs	r5, r3
 8001876:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4393      	bics	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
      break;
 8001886:	e7dc      	b.n	8001842 <HAL_TIM_PWM_ConfigChannel+0x76>
 8001888:	fffffbff 	.word	0xfffffbff

0800188c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800188c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800188e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001890:	4d03      	ldr	r5, [pc, #12]	@ (80018a0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001892:	430a      	orrs	r2, r1
 8001894:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001896:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001898:	4313      	orrs	r3, r2
 800189a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800189c:	6083      	str	r3, [r0, #8]
}
 800189e:	bd30      	pop	{r4, r5, pc}
 80018a0:	ffff00ff 	.word	0xffff00ff

080018a4 <HAL_TIM_ConfigClockSource>:
{
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80018a6:	0005      	movs	r5, r0
 80018a8:	2202      	movs	r2, #2
 80018aa:	353c      	adds	r5, #60	@ 0x3c
 80018ac:	782c      	ldrb	r4, [r5, #0]
{
 80018ae:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80018b0:	0010      	movs	r0, r2
 80018b2:	2c01      	cmp	r4, #1
 80018b4:	d01b      	beq.n	80018ee <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018b6:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80018b8:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80018ba:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80018bc:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018be:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80018c0:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c2:	4a41      	ldr	r2, [pc, #260]	@ (80019c8 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80018c4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c6:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80018c8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80018ca:	680b      	ldr	r3, [r1, #0]
 80018cc:	2b60      	cmp	r3, #96	@ 0x60
 80018ce:	d04e      	beq.n	800196e <HAL_TIM_ConfigClockSource+0xca>
 80018d0:	d82d      	bhi.n	800192e <HAL_TIM_ConfigClockSource+0x8a>
 80018d2:	2b40      	cmp	r3, #64	@ 0x40
 80018d4:	d062      	beq.n	800199c <HAL_TIM_ConfigClockSource+0xf8>
 80018d6:	d813      	bhi.n	8001900 <HAL_TIM_ConfigClockSource+0x5c>
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d00b      	beq.n	80018f4 <HAL_TIM_ConfigClockSource+0x50>
 80018dc:	d808      	bhi.n	80018f0 <HAL_TIM_ConfigClockSource+0x4c>
 80018de:	2210      	movs	r2, #16
 80018e0:	0019      	movs	r1, r3
 80018e2:	4391      	bics	r1, r2
 80018e4:	d006      	beq.n	80018f4 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80018e6:	2301      	movs	r3, #1
 80018e8:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80018ea:	2300      	movs	r3, #0
 80018ec:	702b      	strb	r3, [r5, #0]
}
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80018f0:	2b30      	cmp	r3, #48	@ 0x30
 80018f2:	d1f8      	bne.n	80018e6 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 80018f4:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80018f6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018f8:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018fa:	4313      	orrs	r3, r2
 80018fc:	2207      	movs	r2, #7
 80018fe:	e028      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8001900:	2b50      	cmp	r3, #80	@ 0x50
 8001902:	d1f0      	bne.n	80018e6 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8001904:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001906:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001908:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800190a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800190c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800190e:	4387      	bics	r7, r0
 8001910:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001912:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001914:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001916:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001918:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800191a:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 800191c:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800191e:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001920:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8001922:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8001924:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001926:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001928:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800192a:	3b19      	subs	r3, #25
 800192c:	e011      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	0152      	lsls	r2, r2, #5
 8001932:	4293      	cmp	r3, r2
 8001934:	d00f      	beq.n	8001956 <HAL_TIM_ConfigClockSource+0xb2>
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	0192      	lsls	r2, r2, #6
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_TIM_ConfigClockSource+0xb6>
 800193e:	2b70      	cmp	r3, #112	@ 0x70
 8001940:	d1d1      	bne.n	80018e6 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8001942:	68cb      	ldr	r3, [r1, #12]
 8001944:	684a      	ldr	r2, [r1, #4]
 8001946:	0020      	movs	r0, r4
 8001948:	6889      	ldr	r1, [r1, #8]
 800194a:	f7ff ff9f 	bl	800188c <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800194e:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001950:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001952:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8001954:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2000      	movs	r0, #0
 8001958:	e7c5      	b.n	80018e6 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800195a:	68cb      	ldr	r3, [r1, #12]
 800195c:	684a      	ldr	r2, [r1, #4]
 800195e:	0020      	movs	r0, r4
 8001960:	6889      	ldr	r1, [r1, #8]
 8001962:	f7ff ff93 	bl	800188c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	68a2      	ldr	r2, [r4, #8]
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	e7f1      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800196e:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8001970:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001972:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001974:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001976:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001978:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800197a:	43b8      	bics	r0, r7
 800197c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800197e:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001980:	4f12      	ldr	r7, [pc, #72]	@ (80019cc <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8001982:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001984:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001986:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001988:	20a0      	movs	r0, #160	@ 0xa0
 800198a:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 800198c:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800198e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8001990:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001992:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8001994:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001996:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001998:	3b09      	subs	r3, #9
 800199a:	e7da      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 800199c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800199e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80019a0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019a4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a6:	4387      	bics	r7, r0
 80019a8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019aa:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80019ac:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019ae:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019b0:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019b2:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80019b4:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019b6:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019b8:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80019ba:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80019bc:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80019be:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019c0:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019c2:	3b29      	subs	r3, #41	@ 0x29
 80019c4:	e7c5      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xae>
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	ffff0088 	.word	0xffff0088
 80019cc:	ffff0fff 	.word	0xffff0fff

080019d0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019d0:	231f      	movs	r3, #31
{
 80019d2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019d4:	2401      	movs	r4, #1
 80019d6:	4019      	ands	r1, r3
 80019d8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80019da:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80019dc:	6a03      	ldr	r3, [r0, #32]
 80019de:	43a3      	bics	r3, r4
 80019e0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80019e2:	6a03      	ldr	r3, [r0, #32]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	6202      	str	r2, [r0, #32]
}
 80019e8:	bd10      	pop	{r4, pc}
	...

080019ec <HAL_TIM_OC_Start_DMA>:
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	000e      	movs	r6, r1
 80019f0:	0005      	movs	r5, r0
 80019f2:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80019f4:	0002      	movs	r2, r0
 80019f6:	2e00      	cmp	r6, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_TIM_OC_Start_DMA+0x22>
 80019fa:	323e      	adds	r2, #62	@ 0x3e
 80019fc:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 80019fe:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001a00:	3c02      	subs	r4, #2
 8001a02:	4262      	negs	r2, r4
 8001a04:	4154      	adcs	r4, r2
 8001a06:	b2e4      	uxtb	r4, r4
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d00a      	beq.n	8001a22 <HAL_TIM_OC_Start_DMA+0x36>
}
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001a0e:	2e04      	cmp	r6, #4
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_OC_Start_DMA+0x2a>
 8001a12:	323f      	adds	r2, #63	@ 0x3f
 8001a14:	e7f2      	b.n	80019fc <HAL_TIM_OC_Start_DMA+0x10>
 8001a16:	2e08      	cmp	r6, #8
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_OC_Start_DMA+0x32>
 8001a1a:	3240      	adds	r2, #64	@ 0x40
 8001a1c:	e7ee      	b.n	80019fc <HAL_TIM_OC_Start_DMA+0x10>
 8001a1e:	3241      	adds	r2, #65	@ 0x41
 8001a20:	e7ec      	b.n	80019fc <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001a22:	002a      	movs	r2, r5
 8001a24:	2e00      	cmp	r6, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_TIM_OC_Start_DMA+0x50>
 8001a28:	323e      	adds	r2, #62	@ 0x3e
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	4250      	negs	r0, r2
 8001a30:	4142      	adcs	r2, r0
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	d10b      	bne.n	8001a50 <HAL_TIM_OC_Start_DMA+0x64>
      return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	e7e7      	b.n	8001a0c <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001a3c:	2e04      	cmp	r6, #4
 8001a3e:	d101      	bne.n	8001a44 <HAL_TIM_OC_Start_DMA+0x58>
 8001a40:	323f      	adds	r2, #63	@ 0x3f
 8001a42:	e7f2      	b.n	8001a2a <HAL_TIM_OC_Start_DMA+0x3e>
 8001a44:	2e08      	cmp	r6, #8
 8001a46:	d101      	bne.n	8001a4c <HAL_TIM_OC_Start_DMA+0x60>
 8001a48:	3240      	adds	r2, #64	@ 0x40
 8001a4a:	e7ee      	b.n	8001a2a <HAL_TIM_OC_Start_DMA+0x3e>
 8001a4c:	3241      	adds	r2, #65	@ 0x41
 8001a4e:	e7ec      	b.n	8001a2a <HAL_TIM_OC_Start_DMA+0x3e>
    if ((pData == NULL) || (Length == 0U))
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d0f1      	beq.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ef      	beq.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a58:	2202      	movs	r2, #2
 8001a5a:	0028      	movs	r0, r5
 8001a5c:	2e00      	cmp	r6, #0
 8001a5e:	d131      	bne.n	8001ac4 <HAL_TIM_OC_Start_DMA+0xd8>
 8001a60:	303e      	adds	r0, #62	@ 0x3e
 8001a62:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001a64:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001a66:	4a3d      	ldr	r2, [pc, #244]	@ (8001b5c <HAL_TIM_OC_Start_DMA+0x170>)
 8001a68:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b60 <HAL_TIM_OC_Start_DMA+0x174>)
 8001a6c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b64 <HAL_TIM_OC_Start_DMA+0x178>)
 8001a70:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001a72:	682a      	ldr	r2, [r5, #0]
 8001a74:	3234      	adds	r2, #52	@ 0x34
 8001a76:	f7fe fffb 	bl	8000a70 <HAL_DMA_Start_IT>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1dc      	bne.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	682a      	ldr	r2, [r5, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a86:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a8c:	0031      	movs	r1, r6
 8001a8e:	2201      	movs	r2, #1
 8001a90:	0020      	movs	r0, r4
 8001a92:	f7ff ff9d 	bl	80019d0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <HAL_TIM_OC_Start_DMA+0x17c>)
 8001a98:	4294      	cmp	r4, r2
 8001a9a:	d056      	beq.n	8001b4a <HAL_TIM_OC_Start_DMA+0x15e>
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_TIM_OC_Start_DMA+0x180>)
 8001a9e:	429c      	cmp	r4, r3
 8001aa0:	d053      	beq.n	8001b4a <HAL_TIM_OC_Start_DMA+0x15e>
 8001aa2:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <HAL_TIM_OC_Start_DMA+0x184>)
 8001aa4:	429c      	cmp	r4, r3
 8001aa6:	d050      	beq.n	8001b4a <HAL_TIM_OC_Start_DMA+0x15e>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa8:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <HAL_TIM_OC_Start_DMA+0x188>)
 8001aaa:	429c      	cmp	r4, r3
 8001aac:	d104      	bne.n	8001ab8 <HAL_TIM_OC_Start_DMA+0xcc>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aae:	2207      	movs	r2, #7
 8001ab0:	68a3      	ldr	r3, [r4, #8]
 8001ab2:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d003      	beq.n	8001ac0 <HAL_TIM_OC_Start_DMA+0xd4>
        __HAL_TIM_ENABLE(htim);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	6023      	str	r3, [r4, #0]
    return HAL_BUSY;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e7a3      	b.n	8001a0c <HAL_TIM_OC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ac4:	2e04      	cmp	r6, #4
 8001ac6:	d113      	bne.n	8001af0 <HAL_TIM_OC_Start_DMA+0x104>
 8001ac8:	303f      	adds	r0, #63	@ 0x3f
 8001aca:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001acc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8001ace:	4a23      	ldr	r2, [pc, #140]	@ (8001b5c <HAL_TIM_OC_Start_DMA+0x170>)
 8001ad0:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001ad2:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <HAL_TIM_OC_Start_DMA+0x174>)
 8001ad4:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001ad6:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <HAL_TIM_OC_Start_DMA+0x178>)
 8001ad8:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001ada:	682a      	ldr	r2, [r5, #0]
 8001adc:	3238      	adds	r2, #56	@ 0x38
 8001ade:	f7fe ffc7 	bl	8000a70 <HAL_DMA_Start_IT>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d1a8      	bne.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	682a      	ldr	r2, [r5, #0]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	68d1      	ldr	r1, [r2, #12]
 8001aee:	e7ca      	b.n	8001a86 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af0:	2e08      	cmp	r6, #8
 8001af2:	d113      	bne.n	8001b1c <HAL_TIM_OC_Start_DMA+0x130>
 8001af4:	3040      	adds	r0, #64	@ 0x40
 8001af6:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001af8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_TIM_OC_Start_DMA+0x170>)
 8001afc:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001afe:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <HAL_TIM_OC_Start_DMA+0x174>)
 8001b00:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <HAL_TIM_OC_Start_DMA+0x178>)
 8001b04:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001b06:	682a      	ldr	r2, [r5, #0]
 8001b08:	323c      	adds	r2, #60	@ 0x3c
 8001b0a:	f7fe ffb1 	bl	8000a70 <HAL_DMA_Start_IT>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d192      	bne.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	682a      	ldr	r2, [r5, #0]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	68d1      	ldr	r1, [r2, #12]
 8001b1a:	e7b4      	b.n	8001a86 <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1c:	3041      	adds	r0, #65	@ 0x41
 8001b1e:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 8001b20:	2e0c      	cmp	r6, #12
 8001b22:	d189      	bne.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001b24:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001b26:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <HAL_TIM_OC_Start_DMA+0x170>)
 8001b28:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_TIM_OC_Start_DMA+0x174>)
 8001b2c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_TIM_OC_Start_DMA+0x178>)
 8001b30:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001b32:	682a      	ldr	r2, [r5, #0]
 8001b34:	3240      	adds	r2, #64	@ 0x40
 8001b36:	f7fe ff9b 	bl	8000a70 <HAL_DMA_Start_IT>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d000      	beq.n	8001b40 <HAL_TIM_OC_Start_DMA+0x154>
 8001b3e:	e77b      	b.n	8001a38 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	682a      	ldr	r2, [r5, #0]
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	68d1      	ldr	r1, [r2, #12]
 8001b48:	e79d      	b.n	8001a86 <HAL_TIM_OC_Start_DMA+0x9a>
      __HAL_TIM_MOE_ENABLE(htim);
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b54:	4294      	cmp	r4, r2
 8001b56:	d0aa      	beq.n	8001aae <HAL_TIM_OC_Start_DMA+0xc2>
 8001b58:	e7a6      	b.n	8001aa8 <HAL_TIM_OC_Start_DMA+0xbc>
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	080013e7 	.word	0x080013e7
 8001b60:	08001459 	.word	0x08001459
 8001b64:	080015cd 	.word	0x080015cd
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40014400 	.word	0x40014400
 8001b70:	40014800 	.word	0x40014800
 8001b74:	40000400 	.word	0x40000400

08001b78 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	f7ff ff37 	bl	80019ec <HAL_TIM_OC_Start_DMA>
 8001b7e:	bd10      	pop	{r4, pc}

08001b80 <HAL_TIM_OC_Stop_DMA>:
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	0004      	movs	r4, r0
 8001b84:	000e      	movs	r6, r1
  switch (Channel)
 8001b86:	2908      	cmp	r1, #8
 8001b88:	d04b      	beq.n	8001c22 <HAL_TIM_OC_Stop_DMA+0xa2>
 8001b8a:	d805      	bhi.n	8001b98 <HAL_TIM_OC_Stop_DMA+0x18>
 8001b8c:	2900      	cmp	r1, #0
 8001b8e:	d00c      	beq.n	8001baa <HAL_TIM_OC_Stop_DMA+0x2a>
 8001b90:	2904      	cmp	r1, #4
 8001b92:	d03f      	beq.n	8001c14 <HAL_TIM_OC_Stop_DMA+0x94>
 8001b94:	2001      	movs	r0, #1
}
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8001b98:	290c      	cmp	r1, #12
 8001b9a:	d1fb      	bne.n	8001b94 <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001b9c:	6802      	ldr	r2, [r0, #0]
 8001b9e:	4929      	ldr	r1, [pc, #164]	@ (8001c44 <HAL_TIM_OC_Stop_DMA+0xc4>)
 8001ba0:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001ba2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001baa:	6802      	ldr	r2, [r0, #0]
 8001bac:	4926      	ldr	r1, [pc, #152]	@ (8001c48 <HAL_TIM_OC_Stop_DMA+0xc8>)
 8001bae:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8001bb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001bb6:	f7fe ff97 	bl	8000ae8 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001bba:	6825      	ldr	r5, [r4, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	0031      	movs	r1, r6
 8001bc0:	0028      	movs	r0, r5
 8001bc2:	f7ff ff05 	bl	80019d0 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bc6:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_TIM_OC_Stop_DMA+0xcc>)
 8001bc8:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_TIM_OC_Stop_DMA+0xd0>)
 8001bca:	429d      	cmp	r5, r3
 8001bcc:	d005      	beq.n	8001bda <HAL_TIM_OC_Stop_DMA+0x5a>
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <HAL_TIM_OC_Stop_DMA+0xd4>)
 8001bd0:	429d      	cmp	r5, r3
 8001bd2:	d002      	beq.n	8001bda <HAL_TIM_OC_Stop_DMA+0x5a>
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_TIM_OC_Stop_DMA+0xd8>)
 8001bd6:	429d      	cmp	r5, r3
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_TIM_OC_Stop_DMA+0x70>
      __HAL_TIM_MOE_DISABLE(htim);
 8001bda:	6a2b      	ldr	r3, [r5, #32]
 8001bdc:	4213      	tst	r3, r2
 8001bde:	d107      	bne.n	8001bf0 <HAL_TIM_OC_Stop_DMA+0x70>
 8001be0:	6a29      	ldr	r1, [r5, #32]
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_TIM_OC_Stop_DMA+0xdc>)
 8001be4:	4219      	tst	r1, r3
 8001be6:	d103      	bne.n	8001bf0 <HAL_TIM_OC_Stop_DMA+0x70>
 8001be8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001bea:	491d      	ldr	r1, [pc, #116]	@ (8001c60 <HAL_TIM_OC_Stop_DMA+0xe0>)
 8001bec:	400b      	ands	r3, r1
 8001bee:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8001bf0:	6a2b      	ldr	r3, [r5, #32]
 8001bf2:	4213      	tst	r3, r2
 8001bf4:	d107      	bne.n	8001c06 <HAL_TIM_OC_Stop_DMA+0x86>
 8001bf6:	6a2a      	ldr	r2, [r5, #32]
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_TIM_OC_Stop_DMA+0xdc>)
 8001bfa:	421a      	tst	r2, r3
 8001bfc:	d103      	bne.n	8001c06 <HAL_TIM_OC_Stop_DMA+0x86>
 8001bfe:	2201      	movs	r2, #1
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	4393      	bics	r3, r2
 8001c04:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c06:	2301      	movs	r3, #1
 8001c08:	2e00      	cmp	r6, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_OC_Stop_DMA+0xb0>
 8001c0c:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 8001c0e:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	7023      	strb	r3, [r4, #0]
 8001c12:	e7c0      	b.n	8001b96 <HAL_TIM_OC_Stop_DMA+0x16>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	4913      	ldr	r1, [pc, #76]	@ (8001c64 <HAL_TIM_OC_Stop_DMA+0xe4>)
 8001c18:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001c1a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001c20:	e7c9      	b.n	8001bb6 <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001c22:	6802      	ldr	r2, [r0, #0]
 8001c24:	4910      	ldr	r1, [pc, #64]	@ (8001c68 <HAL_TIM_OC_Stop_DMA+0xe8>)
 8001c26:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001c28:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001c2e:	e7c2      	b.n	8001bb6 <HAL_TIM_OC_Stop_DMA+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	2e04      	cmp	r6, #4
 8001c32:	d101      	bne.n	8001c38 <HAL_TIM_OC_Stop_DMA+0xb8>
 8001c34:	343f      	adds	r4, #63	@ 0x3f
 8001c36:	e7ea      	b.n	8001c0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8001c38:	2e08      	cmp	r6, #8
 8001c3a:	d101      	bne.n	8001c40 <HAL_TIM_OC_Stop_DMA+0xc0>
 8001c3c:	3440      	adds	r4, #64	@ 0x40
 8001c3e:	e7e6      	b.n	8001c0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8001c40:	3441      	adds	r4, #65	@ 0x41
 8001c42:	e7e4      	b.n	8001c0e <HAL_TIM_OC_Stop_DMA+0x8e>
 8001c44:	ffffefff 	.word	0xffffefff
 8001c48:	fffffdff 	.word	0xfffffdff
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	00001111 	.word	0x00001111
 8001c54:	40014400 	.word	0x40014400
 8001c58:	40014800 	.word	0x40014800
 8001c5c:	00000444 	.word	0x00000444
 8001c60:	ffff7fff 	.word	0xffff7fff
 8001c64:	fffffbff 	.word	0xfffffbff
 8001c68:	fffff7ff 	.word	0xfffff7ff

08001c6c <HAL_TIM_PWM_Stop_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	f7ff ff87 	bl	8001b80 <HAL_TIM_OC_Stop_DMA>
 8001c72:	bd10      	pop	{r4, pc}

08001c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c74:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c76:	0004      	movs	r4, r0
 8001c78:	2202      	movs	r2, #2
 8001c7a:	343c      	adds	r4, #60	@ 0x3c
 8001c7c:	7825      	ldrb	r5, [r4, #0]
{
 8001c7e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c80:	0010      	movs	r0, r2
 8001c82:	2d01      	cmp	r5, #1
 8001c84:	d019      	beq.n	8001cba <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c86:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c88:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8a:	353d      	adds	r5, #61	@ 0x3d
 8001c8c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c92:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c94:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c96:	680e      	ldr	r6, [r1, #0]
 8001c98:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c9a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8001ca2:	4807      	ldr	r0, [pc, #28]	@ (8001cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8001ca4:	4283      	cmp	r3, r0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ca8:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001caa:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cac:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cae:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cb2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001cb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cb6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001cb8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8001cc6:	4770      	bx	lr

08001cc8 <memset>:
 8001cc8:	0003      	movs	r3, r0
 8001cca:	1882      	adds	r2, r0, r2
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <memset+0xa>
 8001cd0:	4770      	bx	lr
 8001cd2:	7019      	strb	r1, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	e7f9      	b.n	8001ccc <memset+0x4>

08001cd8 <__libc_init_array>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	2600      	movs	r6, #0
 8001cdc:	4c0c      	ldr	r4, [pc, #48]	@ (8001d10 <__libc_init_array+0x38>)
 8001cde:	4d0d      	ldr	r5, [pc, #52]	@ (8001d14 <__libc_init_array+0x3c>)
 8001ce0:	1b64      	subs	r4, r4, r5
 8001ce2:	10a4      	asrs	r4, r4, #2
 8001ce4:	42a6      	cmp	r6, r4
 8001ce6:	d109      	bne.n	8001cfc <__libc_init_array+0x24>
 8001ce8:	2600      	movs	r6, #0
 8001cea:	f000 f819 	bl	8001d20 <_init>
 8001cee:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <__libc_init_array+0x40>)
 8001cf0:	4d0a      	ldr	r5, [pc, #40]	@ (8001d1c <__libc_init_array+0x44>)
 8001cf2:	1b64      	subs	r4, r4, r5
 8001cf4:	10a4      	asrs	r4, r4, #2
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	d105      	bne.n	8001d06 <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	00b3      	lsls	r3, r6, #2
 8001cfe:	58eb      	ldr	r3, [r5, r3]
 8001d00:	4798      	blx	r3
 8001d02:	3601      	adds	r6, #1
 8001d04:	e7ee      	b.n	8001ce4 <__libc_init_array+0xc>
 8001d06:	00b3      	lsls	r3, r6, #2
 8001d08:	58eb      	ldr	r3, [r5, r3]
 8001d0a:	4798      	blx	r3
 8001d0c:	3601      	adds	r6, #1
 8001d0e:	e7f2      	b.n	8001cf6 <__libc_init_array+0x1e>
 8001d10:	08001d68 	.word	0x08001d68
 8001d14:	08001d68 	.word	0x08001d68
 8001d18:	08001d6c 	.word	0x08001d6c
 8001d1c:	08001d68 	.word	0x08001d68

08001d20 <_init>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr

08001d2c <_fini>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr
