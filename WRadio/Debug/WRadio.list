
WRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080039e0  080039e0  000049e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a18  08003a18  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003a18  08003a18  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a18  08003a18  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00004a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003a20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000018  08003a38  00005018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08003a38  000059e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d733  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ce  00000000  00000000  00012773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00005f28  00000000  00000000  00015041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0001af70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bff  00000000  00000000  0001ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff15  00000000  00000000  0001c617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b42  00000000  00000000  0002c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fde2  00000000  00000000  0003d06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009ce50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e48  00000000  00000000  0009ce94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0009ecdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039c8 	.word	0x080039c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080039c8 	.word	0x080039c8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_llsr>:
 8000408:	40d0      	lsrs	r0, r2
 800040a:	000b      	movs	r3, r1
 800040c:	40d1      	lsrs	r1, r2
 800040e:	469c      	mov	ip, r3
 8000410:	3a20      	subs	r2, #32
 8000412:	40d3      	lsrs	r3, r2
 8000414:	4318      	orrs	r0, r3
 8000416:	4252      	negs	r2, r2
 8000418:	4663      	mov	r3, ip
 800041a:	4093      	lsls	r3, r2
 800041c:	4318      	orrs	r0, r3
 800041e:	4770      	bx	lr

08000420 <__aeabi_d2uiz>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	2200      	movs	r2, #0
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <__aeabi_d2uiz+0x38>)
 8000426:	0004      	movs	r4, r0
 8000428:	000d      	movs	r5, r1
 800042a:	f000 ff0f 	bl	800124c <__aeabi_dcmpge>
 800042e:	2800      	cmp	r0, #0
 8000430:	d104      	bne.n	800043c <__aeabi_d2uiz+0x1c>
 8000432:	0020      	movs	r0, r4
 8000434:	0029      	movs	r1, r5
 8000436:	f000 fe75 	bl	8001124 <__aeabi_d2iz>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <__aeabi_d2uiz+0x38>)
 800043e:	2200      	movs	r2, #0
 8000440:	0020      	movs	r0, r4
 8000442:	0029      	movs	r1, r5
 8000444:	f000 fad2 	bl	80009ec <__aeabi_dsub>
 8000448:	f000 fe6c 	bl	8001124 <__aeabi_d2iz>
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	061b      	lsls	r3, r3, #24
 8000450:	469c      	mov	ip, r3
 8000452:	4460      	add	r0, ip
 8000454:	e7f1      	b.n	800043a <__aeabi_d2uiz+0x1a>
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	41e00000 	.word	0x41e00000

0800045c <__aeabi_dmul>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	4657      	mov	r7, sl
 8000460:	46de      	mov	lr, fp
 8000462:	464e      	mov	r6, r9
 8000464:	4645      	mov	r5, r8
 8000466:	b5e0      	push	{r5, r6, r7, lr}
 8000468:	001f      	movs	r7, r3
 800046a:	030b      	lsls	r3, r1, #12
 800046c:	0b1b      	lsrs	r3, r3, #12
 800046e:	0016      	movs	r6, r2
 8000470:	469a      	mov	sl, r3
 8000472:	0fca      	lsrs	r2, r1, #31
 8000474:	004b      	lsls	r3, r1, #1
 8000476:	0004      	movs	r4, r0
 8000478:	4693      	mov	fp, r2
 800047a:	b087      	sub	sp, #28
 800047c:	0d5b      	lsrs	r3, r3, #21
 800047e:	d100      	bne.n	8000482 <__aeabi_dmul+0x26>
 8000480:	e0d5      	b.n	800062e <__aeabi_dmul+0x1d2>
 8000482:	4abb      	ldr	r2, [pc, #748]	@ (8000770 <__aeabi_dmul+0x314>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d100      	bne.n	800048a <__aeabi_dmul+0x2e>
 8000488:	e0f8      	b.n	800067c <__aeabi_dmul+0x220>
 800048a:	4651      	mov	r1, sl
 800048c:	0f42      	lsrs	r2, r0, #29
 800048e:	00c9      	lsls	r1, r1, #3
 8000490:	430a      	orrs	r2, r1
 8000492:	2180      	movs	r1, #128	@ 0x80
 8000494:	0409      	lsls	r1, r1, #16
 8000496:	4311      	orrs	r1, r2
 8000498:	00c2      	lsls	r2, r0, #3
 800049a:	4691      	mov	r9, r2
 800049c:	4ab5      	ldr	r2, [pc, #724]	@ (8000774 <__aeabi_dmul+0x318>)
 800049e:	468a      	mov	sl, r1
 80004a0:	189d      	adds	r5, r3, r2
 80004a2:	2300      	movs	r3, #0
 80004a4:	4698      	mov	r8, r3
 80004a6:	9302      	str	r3, [sp, #8]
 80004a8:	033c      	lsls	r4, r7, #12
 80004aa:	007b      	lsls	r3, r7, #1
 80004ac:	0ffa      	lsrs	r2, r7, #31
 80004ae:	0030      	movs	r0, r6
 80004b0:	0b24      	lsrs	r4, r4, #12
 80004b2:	0d5b      	lsrs	r3, r3, #21
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	d100      	bne.n	80004ba <__aeabi_dmul+0x5e>
 80004b8:	e096      	b.n	80005e8 <__aeabi_dmul+0x18c>
 80004ba:	4aad      	ldr	r2, [pc, #692]	@ (8000770 <__aeabi_dmul+0x314>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d031      	beq.n	8000524 <__aeabi_dmul+0xc8>
 80004c0:	0f72      	lsrs	r2, r6, #29
 80004c2:	00e4      	lsls	r4, r4, #3
 80004c4:	4322      	orrs	r2, r4
 80004c6:	2480      	movs	r4, #128	@ 0x80
 80004c8:	0424      	lsls	r4, r4, #16
 80004ca:	4314      	orrs	r4, r2
 80004cc:	4aa9      	ldr	r2, [pc, #676]	@ (8000774 <__aeabi_dmul+0x318>)
 80004ce:	00f0      	lsls	r0, r6, #3
 80004d0:	4694      	mov	ip, r2
 80004d2:	4463      	add	r3, ip
 80004d4:	195b      	adds	r3, r3, r5
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	9201      	str	r2, [sp, #4]
 80004da:	4642      	mov	r2, r8
 80004dc:	2600      	movs	r6, #0
 80004de:	2a0a      	cmp	r2, #10
 80004e0:	dc42      	bgt.n	8000568 <__aeabi_dmul+0x10c>
 80004e2:	465a      	mov	r2, fp
 80004e4:	9900      	ldr	r1, [sp, #0]
 80004e6:	404a      	eors	r2, r1
 80004e8:	4693      	mov	fp, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	2a02      	cmp	r2, #2
 80004ee:	dc32      	bgt.n	8000556 <__aeabi_dmul+0xfa>
 80004f0:	3a01      	subs	r2, #1
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	d900      	bls.n	80004f8 <__aeabi_dmul+0x9c>
 80004f6:	e149      	b.n	800078c <__aeabi_dmul+0x330>
 80004f8:	2e02      	cmp	r6, #2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dmul+0xa2>
 80004fc:	e0ca      	b.n	8000694 <__aeabi_dmul+0x238>
 80004fe:	2e01      	cmp	r6, #1
 8000500:	d13d      	bne.n	800057e <__aeabi_dmul+0x122>
 8000502:	2300      	movs	r3, #0
 8000504:	2400      	movs	r4, #0
 8000506:	2200      	movs	r2, #0
 8000508:	0010      	movs	r0, r2
 800050a:	465a      	mov	r2, fp
 800050c:	051b      	lsls	r3, r3, #20
 800050e:	4323      	orrs	r3, r4
 8000510:	07d2      	lsls	r2, r2, #31
 8000512:	4313      	orrs	r3, r2
 8000514:	0019      	movs	r1, r3
 8000516:	b007      	add	sp, #28
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4b92      	ldr	r3, [pc, #584]	@ (8000770 <__aeabi_dmul+0x314>)
 8000526:	4326      	orrs	r6, r4
 8000528:	18eb      	adds	r3, r5, r3
 800052a:	2e00      	cmp	r6, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_dmul+0xd4>
 800052e:	e0bb      	b.n	80006a8 <__aeabi_dmul+0x24c>
 8000530:	2203      	movs	r2, #3
 8000532:	4641      	mov	r1, r8
 8000534:	4311      	orrs	r1, r2
 8000536:	465a      	mov	r2, fp
 8000538:	4688      	mov	r8, r1
 800053a:	9900      	ldr	r1, [sp, #0]
 800053c:	404a      	eors	r2, r1
 800053e:	2180      	movs	r1, #128	@ 0x80
 8000540:	0109      	lsls	r1, r1, #4
 8000542:	468c      	mov	ip, r1
 8000544:	0029      	movs	r1, r5
 8000546:	4461      	add	r1, ip
 8000548:	9101      	str	r1, [sp, #4]
 800054a:	4641      	mov	r1, r8
 800054c:	290a      	cmp	r1, #10
 800054e:	dd00      	ble.n	8000552 <__aeabi_dmul+0xf6>
 8000550:	e233      	b.n	80009ba <__aeabi_dmul+0x55e>
 8000552:	4693      	mov	fp, r2
 8000554:	2603      	movs	r6, #3
 8000556:	4642      	mov	r2, r8
 8000558:	2701      	movs	r7, #1
 800055a:	4097      	lsls	r7, r2
 800055c:	21a6      	movs	r1, #166	@ 0xa6
 800055e:	003a      	movs	r2, r7
 8000560:	00c9      	lsls	r1, r1, #3
 8000562:	400a      	ands	r2, r1
 8000564:	420f      	tst	r7, r1
 8000566:	d031      	beq.n	80005cc <__aeabi_dmul+0x170>
 8000568:	9e02      	ldr	r6, [sp, #8]
 800056a:	2e02      	cmp	r6, #2
 800056c:	d100      	bne.n	8000570 <__aeabi_dmul+0x114>
 800056e:	e235      	b.n	80009dc <__aeabi_dmul+0x580>
 8000570:	2e03      	cmp	r6, #3
 8000572:	d100      	bne.n	8000576 <__aeabi_dmul+0x11a>
 8000574:	e1d2      	b.n	800091c <__aeabi_dmul+0x4c0>
 8000576:	4654      	mov	r4, sl
 8000578:	4648      	mov	r0, r9
 800057a:	2e01      	cmp	r6, #1
 800057c:	d0c1      	beq.n	8000502 <__aeabi_dmul+0xa6>
 800057e:	9a01      	ldr	r2, [sp, #4]
 8000580:	4b7d      	ldr	r3, [pc, #500]	@ (8000778 <__aeabi_dmul+0x31c>)
 8000582:	4694      	mov	ip, r2
 8000584:	4463      	add	r3, ip
 8000586:	2b00      	cmp	r3, #0
 8000588:	dc00      	bgt.n	800058c <__aeabi_dmul+0x130>
 800058a:	e0c0      	b.n	800070e <__aeabi_dmul+0x2b2>
 800058c:	0742      	lsls	r2, r0, #29
 800058e:	d009      	beq.n	80005a4 <__aeabi_dmul+0x148>
 8000590:	220f      	movs	r2, #15
 8000592:	4002      	ands	r2, r0
 8000594:	2a04      	cmp	r2, #4
 8000596:	d005      	beq.n	80005a4 <__aeabi_dmul+0x148>
 8000598:	1d02      	adds	r2, r0, #4
 800059a:	4282      	cmp	r2, r0
 800059c:	4180      	sbcs	r0, r0
 800059e:	4240      	negs	r0, r0
 80005a0:	1824      	adds	r4, r4, r0
 80005a2:	0010      	movs	r0, r2
 80005a4:	01e2      	lsls	r2, r4, #7
 80005a6:	d506      	bpl.n	80005b6 <__aeabi_dmul+0x15a>
 80005a8:	4b74      	ldr	r3, [pc, #464]	@ (800077c <__aeabi_dmul+0x320>)
 80005aa:	9a01      	ldr	r2, [sp, #4]
 80005ac:	401c      	ands	r4, r3
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	4694      	mov	ip, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4463      	add	r3, ip
 80005b6:	4a72      	ldr	r2, [pc, #456]	@ (8000780 <__aeabi_dmul+0x324>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	dc6b      	bgt.n	8000694 <__aeabi_dmul+0x238>
 80005bc:	0762      	lsls	r2, r4, #29
 80005be:	08c0      	lsrs	r0, r0, #3
 80005c0:	0264      	lsls	r4, r4, #9
 80005c2:	055b      	lsls	r3, r3, #21
 80005c4:	4302      	orrs	r2, r0
 80005c6:	0b24      	lsrs	r4, r4, #12
 80005c8:	0d5b      	lsrs	r3, r3, #21
 80005ca:	e79d      	b.n	8000508 <__aeabi_dmul+0xac>
 80005cc:	2190      	movs	r1, #144	@ 0x90
 80005ce:	0089      	lsls	r1, r1, #2
 80005d0:	420f      	tst	r7, r1
 80005d2:	d163      	bne.n	800069c <__aeabi_dmul+0x240>
 80005d4:	2288      	movs	r2, #136	@ 0x88
 80005d6:	423a      	tst	r2, r7
 80005d8:	d100      	bne.n	80005dc <__aeabi_dmul+0x180>
 80005da:	e0d7      	b.n	800078c <__aeabi_dmul+0x330>
 80005dc:	9b00      	ldr	r3, [sp, #0]
 80005de:	46a2      	mov	sl, r4
 80005e0:	469b      	mov	fp, r3
 80005e2:	4681      	mov	r9, r0
 80005e4:	9602      	str	r6, [sp, #8]
 80005e6:	e7bf      	b.n	8000568 <__aeabi_dmul+0x10c>
 80005e8:	0023      	movs	r3, r4
 80005ea:	4333      	orrs	r3, r6
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dmul+0x194>
 80005ee:	e07f      	b.n	80006f0 <__aeabi_dmul+0x294>
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x19a>
 80005f4:	e1ad      	b.n	8000952 <__aeabi_dmul+0x4f6>
 80005f6:	0020      	movs	r0, r4
 80005f8:	f000 fe32 	bl	8001260 <__clzsi2>
 80005fc:	0002      	movs	r2, r0
 80005fe:	0003      	movs	r3, r0
 8000600:	3a0b      	subs	r2, #11
 8000602:	201d      	movs	r0, #29
 8000604:	0019      	movs	r1, r3
 8000606:	1a82      	subs	r2, r0, r2
 8000608:	0030      	movs	r0, r6
 800060a:	3908      	subs	r1, #8
 800060c:	40d0      	lsrs	r0, r2
 800060e:	408c      	lsls	r4, r1
 8000610:	4304      	orrs	r4, r0
 8000612:	0030      	movs	r0, r6
 8000614:	4088      	lsls	r0, r1
 8000616:	4a5b      	ldr	r2, [pc, #364]	@ (8000784 <__aeabi_dmul+0x328>)
 8000618:	1aeb      	subs	r3, r5, r3
 800061a:	4694      	mov	ip, r2
 800061c:	4463      	add	r3, ip
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	4642      	mov	r2, r8
 8000624:	2600      	movs	r6, #0
 8000626:	2a0a      	cmp	r2, #10
 8000628:	dc00      	bgt.n	800062c <__aeabi_dmul+0x1d0>
 800062a:	e75a      	b.n	80004e2 <__aeabi_dmul+0x86>
 800062c:	e79c      	b.n	8000568 <__aeabi_dmul+0x10c>
 800062e:	4653      	mov	r3, sl
 8000630:	4303      	orrs	r3, r0
 8000632:	4699      	mov	r9, r3
 8000634:	d054      	beq.n	80006e0 <__aeabi_dmul+0x284>
 8000636:	4653      	mov	r3, sl
 8000638:	2b00      	cmp	r3, #0
 800063a:	d100      	bne.n	800063e <__aeabi_dmul+0x1e2>
 800063c:	e177      	b.n	800092e <__aeabi_dmul+0x4d2>
 800063e:	4650      	mov	r0, sl
 8000640:	f000 fe0e 	bl	8001260 <__clzsi2>
 8000644:	230b      	movs	r3, #11
 8000646:	425b      	negs	r3, r3
 8000648:	469c      	mov	ip, r3
 800064a:	0002      	movs	r2, r0
 800064c:	4484      	add	ip, r0
 800064e:	0011      	movs	r1, r2
 8000650:	4650      	mov	r0, sl
 8000652:	3908      	subs	r1, #8
 8000654:	4088      	lsls	r0, r1
 8000656:	231d      	movs	r3, #29
 8000658:	4680      	mov	r8, r0
 800065a:	4660      	mov	r0, ip
 800065c:	1a1b      	subs	r3, r3, r0
 800065e:	0020      	movs	r0, r4
 8000660:	40d8      	lsrs	r0, r3
 8000662:	0003      	movs	r3, r0
 8000664:	4640      	mov	r0, r8
 8000666:	4303      	orrs	r3, r0
 8000668:	469a      	mov	sl, r3
 800066a:	0023      	movs	r3, r4
 800066c:	408b      	lsls	r3, r1
 800066e:	4699      	mov	r9, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4d44      	ldr	r5, [pc, #272]	@ (8000784 <__aeabi_dmul+0x328>)
 8000674:	4698      	mov	r8, r3
 8000676:	1aad      	subs	r5, r5, r2
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	e715      	b.n	80004a8 <__aeabi_dmul+0x4c>
 800067c:	4652      	mov	r2, sl
 800067e:	4302      	orrs	r2, r0
 8000680:	4691      	mov	r9, r2
 8000682:	d126      	bne.n	80006d2 <__aeabi_dmul+0x276>
 8000684:	2200      	movs	r2, #0
 8000686:	001d      	movs	r5, r3
 8000688:	2302      	movs	r3, #2
 800068a:	4692      	mov	sl, r2
 800068c:	3208      	adds	r2, #8
 800068e:	4690      	mov	r8, r2
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	e709      	b.n	80004a8 <__aeabi_dmul+0x4c>
 8000694:	2400      	movs	r4, #0
 8000696:	2200      	movs	r2, #0
 8000698:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <__aeabi_dmul+0x314>)
 800069a:	e735      	b.n	8000508 <__aeabi_dmul+0xac>
 800069c:	2300      	movs	r3, #0
 800069e:	2480      	movs	r4, #128	@ 0x80
 80006a0:	469b      	mov	fp, r3
 80006a2:	0324      	lsls	r4, r4, #12
 80006a4:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <__aeabi_dmul+0x314>)
 80006a6:	e72f      	b.n	8000508 <__aeabi_dmul+0xac>
 80006a8:	2202      	movs	r2, #2
 80006aa:	4641      	mov	r1, r8
 80006ac:	4311      	orrs	r1, r2
 80006ae:	2280      	movs	r2, #128	@ 0x80
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	4694      	mov	ip, r2
 80006b4:	002a      	movs	r2, r5
 80006b6:	4462      	add	r2, ip
 80006b8:	4688      	mov	r8, r1
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	290a      	cmp	r1, #10
 80006be:	dd00      	ble.n	80006c2 <__aeabi_dmul+0x266>
 80006c0:	e752      	b.n	8000568 <__aeabi_dmul+0x10c>
 80006c2:	465a      	mov	r2, fp
 80006c4:	2000      	movs	r0, #0
 80006c6:	9900      	ldr	r1, [sp, #0]
 80006c8:	0004      	movs	r4, r0
 80006ca:	404a      	eors	r2, r1
 80006cc:	4693      	mov	fp, r2
 80006ce:	2602      	movs	r6, #2
 80006d0:	e70b      	b.n	80004ea <__aeabi_dmul+0x8e>
 80006d2:	220c      	movs	r2, #12
 80006d4:	001d      	movs	r5, r3
 80006d6:	2303      	movs	r3, #3
 80006d8:	4681      	mov	r9, r0
 80006da:	4690      	mov	r8, r2
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	e6e3      	b.n	80004a8 <__aeabi_dmul+0x4c>
 80006e0:	2300      	movs	r3, #0
 80006e2:	469a      	mov	sl, r3
 80006e4:	3304      	adds	r3, #4
 80006e6:	4698      	mov	r8, r3
 80006e8:	3b03      	subs	r3, #3
 80006ea:	2500      	movs	r5, #0
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	e6db      	b.n	80004a8 <__aeabi_dmul+0x4c>
 80006f0:	4642      	mov	r2, r8
 80006f2:	3301      	adds	r3, #1
 80006f4:	431a      	orrs	r2, r3
 80006f6:	002b      	movs	r3, r5
 80006f8:	4690      	mov	r8, r2
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	4642      	mov	r2, r8
 8000700:	2400      	movs	r4, #0
 8000702:	2000      	movs	r0, #0
 8000704:	2601      	movs	r6, #1
 8000706:	2a0a      	cmp	r2, #10
 8000708:	dc00      	bgt.n	800070c <__aeabi_dmul+0x2b0>
 800070a:	e6ea      	b.n	80004e2 <__aeabi_dmul+0x86>
 800070c:	e72c      	b.n	8000568 <__aeabi_dmul+0x10c>
 800070e:	2201      	movs	r2, #1
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	2a38      	cmp	r2, #56	@ 0x38
 8000714:	dd00      	ble.n	8000718 <__aeabi_dmul+0x2bc>
 8000716:	e6f4      	b.n	8000502 <__aeabi_dmul+0xa6>
 8000718:	2a1f      	cmp	r2, #31
 800071a:	dc00      	bgt.n	800071e <__aeabi_dmul+0x2c2>
 800071c:	e12a      	b.n	8000974 <__aeabi_dmul+0x518>
 800071e:	211f      	movs	r1, #31
 8000720:	4249      	negs	r1, r1
 8000722:	1acb      	subs	r3, r1, r3
 8000724:	0021      	movs	r1, r4
 8000726:	40d9      	lsrs	r1, r3
 8000728:	000b      	movs	r3, r1
 800072a:	2a20      	cmp	r2, #32
 800072c:	d005      	beq.n	800073a <__aeabi_dmul+0x2de>
 800072e:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <__aeabi_dmul+0x32c>)
 8000730:	9d01      	ldr	r5, [sp, #4]
 8000732:	4694      	mov	ip, r2
 8000734:	4465      	add	r5, ip
 8000736:	40ac      	lsls	r4, r5
 8000738:	4320      	orrs	r0, r4
 800073a:	1e42      	subs	r2, r0, #1
 800073c:	4190      	sbcs	r0, r2
 800073e:	4318      	orrs	r0, r3
 8000740:	2307      	movs	r3, #7
 8000742:	0019      	movs	r1, r3
 8000744:	2400      	movs	r4, #0
 8000746:	4001      	ands	r1, r0
 8000748:	4203      	tst	r3, r0
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x30a>
 800074c:	230f      	movs	r3, #15
 800074e:	4003      	ands	r3, r0
 8000750:	2b04      	cmp	r3, #4
 8000752:	d100      	bne.n	8000756 <__aeabi_dmul+0x2fa>
 8000754:	e140      	b.n	80009d8 <__aeabi_dmul+0x57c>
 8000756:	1d03      	adds	r3, r0, #4
 8000758:	4283      	cmp	r3, r0
 800075a:	41a4      	sbcs	r4, r4
 800075c:	0018      	movs	r0, r3
 800075e:	4264      	negs	r4, r4
 8000760:	0761      	lsls	r1, r4, #29
 8000762:	0264      	lsls	r4, r4, #9
 8000764:	0b24      	lsrs	r4, r4, #12
 8000766:	08c2      	lsrs	r2, r0, #3
 8000768:	2300      	movs	r3, #0
 800076a:	430a      	orrs	r2, r1
 800076c:	e6cc      	b.n	8000508 <__aeabi_dmul+0xac>
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	000007ff 	.word	0x000007ff
 8000774:	fffffc01 	.word	0xfffffc01
 8000778:	000003ff 	.word	0x000003ff
 800077c:	feffffff 	.word	0xfeffffff
 8000780:	000007fe 	.word	0x000007fe
 8000784:	fffffc0d 	.word	0xfffffc0d
 8000788:	0000043e 	.word	0x0000043e
 800078c:	4649      	mov	r1, r9
 800078e:	464a      	mov	r2, r9
 8000790:	0409      	lsls	r1, r1, #16
 8000792:	0c09      	lsrs	r1, r1, #16
 8000794:	000d      	movs	r5, r1
 8000796:	0c16      	lsrs	r6, r2, #16
 8000798:	0c02      	lsrs	r2, r0, #16
 800079a:	0400      	lsls	r0, r0, #16
 800079c:	0c00      	lsrs	r0, r0, #16
 800079e:	4345      	muls	r5, r0
 80007a0:	46ac      	mov	ip, r5
 80007a2:	0005      	movs	r5, r0
 80007a4:	4375      	muls	r5, r6
 80007a6:	46a8      	mov	r8, r5
 80007a8:	0015      	movs	r5, r2
 80007aa:	000f      	movs	r7, r1
 80007ac:	4375      	muls	r5, r6
 80007ae:	9200      	str	r2, [sp, #0]
 80007b0:	9502      	str	r5, [sp, #8]
 80007b2:	002a      	movs	r2, r5
 80007b4:	9d00      	ldr	r5, [sp, #0]
 80007b6:	436f      	muls	r7, r5
 80007b8:	4665      	mov	r5, ip
 80007ba:	0c2d      	lsrs	r5, r5, #16
 80007bc:	46a9      	mov	r9, r5
 80007be:	4447      	add	r7, r8
 80007c0:	444f      	add	r7, r9
 80007c2:	45b8      	cmp	r8, r7
 80007c4:	d905      	bls.n	80007d2 <__aeabi_dmul+0x376>
 80007c6:	0015      	movs	r5, r2
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	0252      	lsls	r2, r2, #9
 80007cc:	4690      	mov	r8, r2
 80007ce:	4445      	add	r5, r8
 80007d0:	9502      	str	r5, [sp, #8]
 80007d2:	0c3d      	lsrs	r5, r7, #16
 80007d4:	9503      	str	r5, [sp, #12]
 80007d6:	4665      	mov	r5, ip
 80007d8:	042d      	lsls	r5, r5, #16
 80007da:	043f      	lsls	r7, r7, #16
 80007dc:	0c2d      	lsrs	r5, r5, #16
 80007de:	46ac      	mov	ip, r5
 80007e0:	003d      	movs	r5, r7
 80007e2:	4465      	add	r5, ip
 80007e4:	9504      	str	r5, [sp, #16]
 80007e6:	0c25      	lsrs	r5, r4, #16
 80007e8:	0424      	lsls	r4, r4, #16
 80007ea:	0c24      	lsrs	r4, r4, #16
 80007ec:	46ac      	mov	ip, r5
 80007ee:	0025      	movs	r5, r4
 80007f0:	4375      	muls	r5, r6
 80007f2:	46a8      	mov	r8, r5
 80007f4:	4665      	mov	r5, ip
 80007f6:	000f      	movs	r7, r1
 80007f8:	4369      	muls	r1, r5
 80007fa:	4441      	add	r1, r8
 80007fc:	4689      	mov	r9, r1
 80007fe:	4367      	muls	r7, r4
 8000800:	0c39      	lsrs	r1, r7, #16
 8000802:	4449      	add	r1, r9
 8000804:	436e      	muls	r6, r5
 8000806:	4588      	cmp	r8, r1
 8000808:	d903      	bls.n	8000812 <__aeabi_dmul+0x3b6>
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	0252      	lsls	r2, r2, #9
 800080e:	4690      	mov	r8, r2
 8000810:	4446      	add	r6, r8
 8000812:	0c0d      	lsrs	r5, r1, #16
 8000814:	46a8      	mov	r8, r5
 8000816:	0035      	movs	r5, r6
 8000818:	4445      	add	r5, r8
 800081a:	9505      	str	r5, [sp, #20]
 800081c:	9d03      	ldr	r5, [sp, #12]
 800081e:	043f      	lsls	r7, r7, #16
 8000820:	46a8      	mov	r8, r5
 8000822:	0c3f      	lsrs	r7, r7, #16
 8000824:	0409      	lsls	r1, r1, #16
 8000826:	19c9      	adds	r1, r1, r7
 8000828:	4488      	add	r8, r1
 800082a:	4645      	mov	r5, r8
 800082c:	9503      	str	r5, [sp, #12]
 800082e:	4655      	mov	r5, sl
 8000830:	042e      	lsls	r6, r5, #16
 8000832:	0c36      	lsrs	r6, r6, #16
 8000834:	0c2f      	lsrs	r7, r5, #16
 8000836:	0035      	movs	r5, r6
 8000838:	4345      	muls	r5, r0
 800083a:	4378      	muls	r0, r7
 800083c:	4681      	mov	r9, r0
 800083e:	0038      	movs	r0, r7
 8000840:	46a8      	mov	r8, r5
 8000842:	0c2d      	lsrs	r5, r5, #16
 8000844:	46aa      	mov	sl, r5
 8000846:	9a00      	ldr	r2, [sp, #0]
 8000848:	4350      	muls	r0, r2
 800084a:	4372      	muls	r2, r6
 800084c:	444a      	add	r2, r9
 800084e:	4452      	add	r2, sl
 8000850:	4591      	cmp	r9, r2
 8000852:	d903      	bls.n	800085c <__aeabi_dmul+0x400>
 8000854:	2580      	movs	r5, #128	@ 0x80
 8000856:	026d      	lsls	r5, r5, #9
 8000858:	46a9      	mov	r9, r5
 800085a:	4448      	add	r0, r9
 800085c:	0c15      	lsrs	r5, r2, #16
 800085e:	46a9      	mov	r9, r5
 8000860:	4645      	mov	r5, r8
 8000862:	042d      	lsls	r5, r5, #16
 8000864:	0c2d      	lsrs	r5, r5, #16
 8000866:	46a8      	mov	r8, r5
 8000868:	4665      	mov	r5, ip
 800086a:	437d      	muls	r5, r7
 800086c:	0412      	lsls	r2, r2, #16
 800086e:	4448      	add	r0, r9
 8000870:	4490      	add	r8, r2
 8000872:	46a9      	mov	r9, r5
 8000874:	0032      	movs	r2, r6
 8000876:	4665      	mov	r5, ip
 8000878:	4362      	muls	r2, r4
 800087a:	436e      	muls	r6, r5
 800087c:	437c      	muls	r4, r7
 800087e:	0c17      	lsrs	r7, r2, #16
 8000880:	1936      	adds	r6, r6, r4
 8000882:	19bf      	adds	r7, r7, r6
 8000884:	42bc      	cmp	r4, r7
 8000886:	d903      	bls.n	8000890 <__aeabi_dmul+0x434>
 8000888:	2480      	movs	r4, #128	@ 0x80
 800088a:	0264      	lsls	r4, r4, #9
 800088c:	46a4      	mov	ip, r4
 800088e:	44e1      	add	r9, ip
 8000890:	9c02      	ldr	r4, [sp, #8]
 8000892:	9e03      	ldr	r6, [sp, #12]
 8000894:	46a4      	mov	ip, r4
 8000896:	9d05      	ldr	r5, [sp, #20]
 8000898:	4466      	add	r6, ip
 800089a:	428e      	cmp	r6, r1
 800089c:	4189      	sbcs	r1, r1
 800089e:	46ac      	mov	ip, r5
 80008a0:	0412      	lsls	r2, r2, #16
 80008a2:	043c      	lsls	r4, r7, #16
 80008a4:	0c12      	lsrs	r2, r2, #16
 80008a6:	18a2      	adds	r2, r4, r2
 80008a8:	4462      	add	r2, ip
 80008aa:	4249      	negs	r1, r1
 80008ac:	1854      	adds	r4, r2, r1
 80008ae:	4446      	add	r6, r8
 80008b0:	46a4      	mov	ip, r4
 80008b2:	4546      	cmp	r6, r8
 80008b4:	41a4      	sbcs	r4, r4
 80008b6:	4682      	mov	sl, r0
 80008b8:	4264      	negs	r4, r4
 80008ba:	46a0      	mov	r8, r4
 80008bc:	42aa      	cmp	r2, r5
 80008be:	4192      	sbcs	r2, r2
 80008c0:	458c      	cmp	ip, r1
 80008c2:	4189      	sbcs	r1, r1
 80008c4:	44e2      	add	sl, ip
 80008c6:	44d0      	add	r8, sl
 80008c8:	4249      	negs	r1, r1
 80008ca:	4252      	negs	r2, r2
 80008cc:	430a      	orrs	r2, r1
 80008ce:	45a0      	cmp	r8, r4
 80008d0:	41a4      	sbcs	r4, r4
 80008d2:	4582      	cmp	sl, r0
 80008d4:	4189      	sbcs	r1, r1
 80008d6:	4264      	negs	r4, r4
 80008d8:	4249      	negs	r1, r1
 80008da:	430c      	orrs	r4, r1
 80008dc:	4641      	mov	r1, r8
 80008de:	0c3f      	lsrs	r7, r7, #16
 80008e0:	19d2      	adds	r2, r2, r7
 80008e2:	1912      	adds	r2, r2, r4
 80008e4:	0dcc      	lsrs	r4, r1, #23
 80008e6:	9904      	ldr	r1, [sp, #16]
 80008e8:	0270      	lsls	r0, r6, #9
 80008ea:	4308      	orrs	r0, r1
 80008ec:	1e41      	subs	r1, r0, #1
 80008ee:	4188      	sbcs	r0, r1
 80008f0:	4641      	mov	r1, r8
 80008f2:	444a      	add	r2, r9
 80008f4:	0df6      	lsrs	r6, r6, #23
 80008f6:	0252      	lsls	r2, r2, #9
 80008f8:	4330      	orrs	r0, r6
 80008fa:	0249      	lsls	r1, r1, #9
 80008fc:	4314      	orrs	r4, r2
 80008fe:	4308      	orrs	r0, r1
 8000900:	01d2      	lsls	r2, r2, #7
 8000902:	d535      	bpl.n	8000970 <__aeabi_dmul+0x514>
 8000904:	2201      	movs	r2, #1
 8000906:	0843      	lsrs	r3, r0, #1
 8000908:	4002      	ands	r2, r0
 800090a:	4313      	orrs	r3, r2
 800090c:	07e0      	lsls	r0, r4, #31
 800090e:	4318      	orrs	r0, r3
 8000910:	0864      	lsrs	r4, r4, #1
 8000912:	e634      	b.n	800057e <__aeabi_dmul+0x122>
 8000914:	9b00      	ldr	r3, [sp, #0]
 8000916:	46a2      	mov	sl, r4
 8000918:	469b      	mov	fp, r3
 800091a:	4681      	mov	r9, r0
 800091c:	2480      	movs	r4, #128	@ 0x80
 800091e:	4653      	mov	r3, sl
 8000920:	0324      	lsls	r4, r4, #12
 8000922:	431c      	orrs	r4, r3
 8000924:	0324      	lsls	r4, r4, #12
 8000926:	464a      	mov	r2, r9
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <__aeabi_dmul+0x588>)
 800092a:	0b24      	lsrs	r4, r4, #12
 800092c:	e5ec      	b.n	8000508 <__aeabi_dmul+0xac>
 800092e:	f000 fc97 	bl	8001260 <__clzsi2>
 8000932:	2315      	movs	r3, #21
 8000934:	469c      	mov	ip, r3
 8000936:	4484      	add	ip, r0
 8000938:	0002      	movs	r2, r0
 800093a:	4663      	mov	r3, ip
 800093c:	3220      	adds	r2, #32
 800093e:	2b1c      	cmp	r3, #28
 8000940:	dc00      	bgt.n	8000944 <__aeabi_dmul+0x4e8>
 8000942:	e684      	b.n	800064e <__aeabi_dmul+0x1f2>
 8000944:	2300      	movs	r3, #0
 8000946:	4699      	mov	r9, r3
 8000948:	0023      	movs	r3, r4
 800094a:	3808      	subs	r0, #8
 800094c:	4083      	lsls	r3, r0
 800094e:	469a      	mov	sl, r3
 8000950:	e68e      	b.n	8000670 <__aeabi_dmul+0x214>
 8000952:	f000 fc85 	bl	8001260 <__clzsi2>
 8000956:	0002      	movs	r2, r0
 8000958:	0003      	movs	r3, r0
 800095a:	3215      	adds	r2, #21
 800095c:	3320      	adds	r3, #32
 800095e:	2a1c      	cmp	r2, #28
 8000960:	dc00      	bgt.n	8000964 <__aeabi_dmul+0x508>
 8000962:	e64e      	b.n	8000602 <__aeabi_dmul+0x1a6>
 8000964:	0002      	movs	r2, r0
 8000966:	0034      	movs	r4, r6
 8000968:	3a08      	subs	r2, #8
 800096a:	2000      	movs	r0, #0
 800096c:	4094      	lsls	r4, r2
 800096e:	e652      	b.n	8000616 <__aeabi_dmul+0x1ba>
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	e604      	b.n	800057e <__aeabi_dmul+0x122>
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <__aeabi_dmul+0x58c>)
 8000976:	0021      	movs	r1, r4
 8000978:	469c      	mov	ip, r3
 800097a:	0003      	movs	r3, r0
 800097c:	9d01      	ldr	r5, [sp, #4]
 800097e:	40d3      	lsrs	r3, r2
 8000980:	4465      	add	r5, ip
 8000982:	40a9      	lsls	r1, r5
 8000984:	4319      	orrs	r1, r3
 8000986:	0003      	movs	r3, r0
 8000988:	40ab      	lsls	r3, r5
 800098a:	1e58      	subs	r0, r3, #1
 800098c:	4183      	sbcs	r3, r0
 800098e:	4319      	orrs	r1, r3
 8000990:	0008      	movs	r0, r1
 8000992:	40d4      	lsrs	r4, r2
 8000994:	074b      	lsls	r3, r1, #29
 8000996:	d009      	beq.n	80009ac <__aeabi_dmul+0x550>
 8000998:	230f      	movs	r3, #15
 800099a:	400b      	ands	r3, r1
 800099c:	2b04      	cmp	r3, #4
 800099e:	d005      	beq.n	80009ac <__aeabi_dmul+0x550>
 80009a0:	1d0b      	adds	r3, r1, #4
 80009a2:	428b      	cmp	r3, r1
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4240      	negs	r0, r0
 80009a8:	1824      	adds	r4, r4, r0
 80009aa:	0018      	movs	r0, r3
 80009ac:	0223      	lsls	r3, r4, #8
 80009ae:	d400      	bmi.n	80009b2 <__aeabi_dmul+0x556>
 80009b0:	e6d6      	b.n	8000760 <__aeabi_dmul+0x304>
 80009b2:	2301      	movs	r3, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	2200      	movs	r2, #0
 80009b8:	e5a6      	b.n	8000508 <__aeabi_dmul+0xac>
 80009ba:	290f      	cmp	r1, #15
 80009bc:	d1aa      	bne.n	8000914 <__aeabi_dmul+0x4b8>
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	4652      	mov	r2, sl
 80009c2:	031b      	lsls	r3, r3, #12
 80009c4:	421a      	tst	r2, r3
 80009c6:	d0a9      	beq.n	800091c <__aeabi_dmul+0x4c0>
 80009c8:	421c      	tst	r4, r3
 80009ca:	d1a7      	bne.n	800091c <__aeabi_dmul+0x4c0>
 80009cc:	431c      	orrs	r4, r3
 80009ce:	9b00      	ldr	r3, [sp, #0]
 80009d0:	0002      	movs	r2, r0
 80009d2:	469b      	mov	fp, r3
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <__aeabi_dmul+0x588>)
 80009d6:	e597      	b.n	8000508 <__aeabi_dmul+0xac>
 80009d8:	2400      	movs	r4, #0
 80009da:	e6c1      	b.n	8000760 <__aeabi_dmul+0x304>
 80009dc:	2400      	movs	r4, #0
 80009de:	4b01      	ldr	r3, [pc, #4]	@ (80009e4 <__aeabi_dmul+0x588>)
 80009e0:	0022      	movs	r2, r4
 80009e2:	e591      	b.n	8000508 <__aeabi_dmul+0xac>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	0000041e 	.word	0x0000041e

080009ec <__aeabi_dsub>:
 80009ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ee:	464e      	mov	r6, r9
 80009f0:	4645      	mov	r5, r8
 80009f2:	46de      	mov	lr, fp
 80009f4:	4657      	mov	r7, sl
 80009f6:	b5e0      	push	{r5, r6, r7, lr}
 80009f8:	b085      	sub	sp, #20
 80009fa:	9000      	str	r0, [sp, #0]
 80009fc:	9101      	str	r1, [sp, #4]
 80009fe:	030c      	lsls	r4, r1, #12
 8000a00:	004f      	lsls	r7, r1, #1
 8000a02:	0fce      	lsrs	r6, r1, #31
 8000a04:	0a61      	lsrs	r1, r4, #9
 8000a06:	9c00      	ldr	r4, [sp, #0]
 8000a08:	46b0      	mov	r8, r6
 8000a0a:	0f64      	lsrs	r4, r4, #29
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	9900      	ldr	r1, [sp, #0]
 8000a10:	0d7f      	lsrs	r7, r7, #21
 8000a12:	00c8      	lsls	r0, r1, #3
 8000a14:	0011      	movs	r1, r2
 8000a16:	001a      	movs	r2, r3
 8000a18:	031b      	lsls	r3, r3, #12
 8000a1a:	469c      	mov	ip, r3
 8000a1c:	9100      	str	r1, [sp, #0]
 8000a1e:	9201      	str	r2, [sp, #4]
 8000a20:	0051      	lsls	r1, r2, #1
 8000a22:	0d4b      	lsrs	r3, r1, #21
 8000a24:	4699      	mov	r9, r3
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	9d00      	ldr	r5, [sp, #0]
 8000a2a:	0fd9      	lsrs	r1, r3, #31
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	0f6a      	lsrs	r2, r5, #29
 8000a30:	0a5b      	lsrs	r3, r3, #9
 8000a32:	4313      	orrs	r3, r2
 8000a34:	00ea      	lsls	r2, r5, #3
 8000a36:	4694      	mov	ip, r2
 8000a38:	4693      	mov	fp, r2
 8000a3a:	4ac1      	ldr	r2, [pc, #772]	@ (8000d40 <__aeabi_dsub+0x354>)
 8000a3c:	9003      	str	r0, [sp, #12]
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	4591      	cmp	r9, r2
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dsub+0x5a>
 8000a44:	e0cd      	b.n	8000be2 <__aeabi_dsub+0x1f6>
 8000a46:	2501      	movs	r5, #1
 8000a48:	4069      	eors	r1, r5
 8000a4a:	464d      	mov	r5, r9
 8000a4c:	1b7d      	subs	r5, r7, r5
 8000a4e:	46aa      	mov	sl, r5
 8000a50:	428e      	cmp	r6, r1
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dsub+0x6a>
 8000a54:	e080      	b.n	8000b58 <__aeabi_dsub+0x16c>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	dc00      	bgt.n	8000a5c <__aeabi_dsub+0x70>
 8000a5a:	e335      	b.n	80010c8 <__aeabi_dsub+0x6dc>
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dsub+0x78>
 8000a62:	e0df      	b.n	8000c24 <__aeabi_dsub+0x238>
 8000a64:	4297      	cmp	r7, r2
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dsub+0x7e>
 8000a68:	e194      	b.n	8000d94 <__aeabi_dsub+0x3a8>
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	2501      	movs	r5, #1
 8000a6e:	2a38      	cmp	r2, #56	@ 0x38
 8000a70:	dc19      	bgt.n	8000aa6 <__aeabi_dsub+0xba>
 8000a72:	2280      	movs	r2, #128	@ 0x80
 8000a74:	9b02      	ldr	r3, [sp, #8]
 8000a76:	0412      	lsls	r2, r2, #16
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	2a1f      	cmp	r2, #31
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dsub+0x98>
 8000a82:	e1e3      	b.n	8000e4c <__aeabi_dsub+0x460>
 8000a84:	4653      	mov	r3, sl
 8000a86:	2220      	movs	r2, #32
 8000a88:	4661      	mov	r1, ip
 8000a8a:	9d02      	ldr	r5, [sp, #8]
 8000a8c:	1ad2      	subs	r2, r2, r3
 8000a8e:	4095      	lsls	r5, r2
 8000a90:	40d9      	lsrs	r1, r3
 8000a92:	430d      	orrs	r5, r1
 8000a94:	4661      	mov	r1, ip
 8000a96:	4091      	lsls	r1, r2
 8000a98:	000a      	movs	r2, r1
 8000a9a:	1e51      	subs	r1, r2, #1
 8000a9c:	418a      	sbcs	r2, r1
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	9a02      	ldr	r2, [sp, #8]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	1aa4      	subs	r4, r4, r2
 8000aa6:	1b45      	subs	r5, r0, r5
 8000aa8:	42a8      	cmp	r0, r5
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	4240      	negs	r0, r0
 8000aae:	1a24      	subs	r4, r4, r0
 8000ab0:	0223      	lsls	r3, r4, #8
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_dsub+0xca>
 8000ab4:	e13d      	b.n	8000d32 <__aeabi_dsub+0x346>
 8000ab6:	0264      	lsls	r4, r4, #9
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dsub+0xd4>
 8000abe:	e147      	b.n	8000d50 <__aeabi_dsub+0x364>
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	f000 fbcd 	bl	8001260 <__clzsi2>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	2120      	movs	r1, #32
 8000acc:	0028      	movs	r0, r5
 8000ace:	1aca      	subs	r2, r1, r3
 8000ad0:	40d0      	lsrs	r0, r2
 8000ad2:	409c      	lsls	r4, r3
 8000ad4:	0002      	movs	r2, r0
 8000ad6:	409d      	lsls	r5, r3
 8000ad8:	4322      	orrs	r2, r4
 8000ada:	429f      	cmp	r7, r3
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_dsub+0xf4>
 8000ade:	e177      	b.n	8000dd0 <__aeabi_dsub+0x3e4>
 8000ae0:	1bd8      	subs	r0, r3, r7
 8000ae2:	3001      	adds	r0, #1
 8000ae4:	1a09      	subs	r1, r1, r0
 8000ae6:	002c      	movs	r4, r5
 8000ae8:	408d      	lsls	r5, r1
 8000aea:	40c4      	lsrs	r4, r0
 8000aec:	1e6b      	subs	r3, r5, #1
 8000aee:	419d      	sbcs	r5, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	40c2      	lsrs	r2, r0
 8000af4:	408b      	lsls	r3, r1
 8000af6:	4325      	orrs	r5, r4
 8000af8:	2700      	movs	r7, #0
 8000afa:	0014      	movs	r4, r2
 8000afc:	431d      	orrs	r5, r3
 8000afe:	076b      	lsls	r3, r5, #29
 8000b00:	d009      	beq.n	8000b16 <__aeabi_dsub+0x12a>
 8000b02:	230f      	movs	r3, #15
 8000b04:	402b      	ands	r3, r5
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d005      	beq.n	8000b16 <__aeabi_dsub+0x12a>
 8000b0a:	1d2b      	adds	r3, r5, #4
 8000b0c:	42ab      	cmp	r3, r5
 8000b0e:	41ad      	sbcs	r5, r5
 8000b10:	426d      	negs	r5, r5
 8000b12:	1964      	adds	r4, r4, r5
 8000b14:	001d      	movs	r5, r3
 8000b16:	0223      	lsls	r3, r4, #8
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_dsub+0x130>
 8000b1a:	e140      	b.n	8000d9e <__aeabi_dsub+0x3b2>
 8000b1c:	4a88      	ldr	r2, [pc, #544]	@ (8000d40 <__aeabi_dsub+0x354>)
 8000b1e:	3701      	adds	r7, #1
 8000b20:	4297      	cmp	r7, r2
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dsub+0x13a>
 8000b24:	e101      	b.n	8000d2a <__aeabi_dsub+0x33e>
 8000b26:	2601      	movs	r6, #1
 8000b28:	4643      	mov	r3, r8
 8000b2a:	4986      	ldr	r1, [pc, #536]	@ (8000d44 <__aeabi_dsub+0x358>)
 8000b2c:	08ed      	lsrs	r5, r5, #3
 8000b2e:	4021      	ands	r1, r4
 8000b30:	074a      	lsls	r2, r1, #29
 8000b32:	432a      	orrs	r2, r5
 8000b34:	057c      	lsls	r4, r7, #21
 8000b36:	024d      	lsls	r5, r1, #9
 8000b38:	0b2d      	lsrs	r5, r5, #12
 8000b3a:	0d64      	lsrs	r4, r4, #21
 8000b3c:	401e      	ands	r6, r3
 8000b3e:	0524      	lsls	r4, r4, #20
 8000b40:	432c      	orrs	r4, r5
 8000b42:	07f6      	lsls	r6, r6, #31
 8000b44:	4334      	orrs	r4, r6
 8000b46:	0010      	movs	r0, r2
 8000b48:	0021      	movs	r1, r4
 8000b4a:	b005      	add	sp, #20
 8000b4c:	bcf0      	pop	{r4, r5, r6, r7}
 8000b4e:	46bb      	mov	fp, r7
 8000b50:	46b2      	mov	sl, r6
 8000b52:	46a9      	mov	r9, r5
 8000b54:	46a0      	mov	r8, r4
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_dsub+0x172>
 8000b5c:	e2d0      	b.n	8001100 <__aeabi_dsub+0x714>
 8000b5e:	4649      	mov	r1, r9
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d000      	beq.n	8000b66 <__aeabi_dsub+0x17a>
 8000b64:	e0d4      	b.n	8000d10 <__aeabi_dsub+0x324>
 8000b66:	4661      	mov	r1, ip
 8000b68:	9b02      	ldr	r3, [sp, #8]
 8000b6a:	4319      	orrs	r1, r3
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dsub+0x184>
 8000b6e:	e12b      	b.n	8000dc8 <__aeabi_dsub+0x3dc>
 8000b70:	1e69      	subs	r1, r5, #1
 8000b72:	2d01      	cmp	r5, #1
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dsub+0x18c>
 8000b76:	e1d9      	b.n	8000f2c <__aeabi_dsub+0x540>
 8000b78:	4295      	cmp	r5, r2
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dsub+0x192>
 8000b7c:	e10a      	b.n	8000d94 <__aeabi_dsub+0x3a8>
 8000b7e:	2501      	movs	r5, #1
 8000b80:	2938      	cmp	r1, #56	@ 0x38
 8000b82:	dc17      	bgt.n	8000bb4 <__aeabi_dsub+0x1c8>
 8000b84:	468a      	mov	sl, r1
 8000b86:	4653      	mov	r3, sl
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dsub+0x1a2>
 8000b8c:	e1e7      	b.n	8000f5e <__aeabi_dsub+0x572>
 8000b8e:	2220      	movs	r2, #32
 8000b90:	1ad2      	subs	r2, r2, r3
 8000b92:	9b02      	ldr	r3, [sp, #8]
 8000b94:	4661      	mov	r1, ip
 8000b96:	4093      	lsls	r3, r2
 8000b98:	001d      	movs	r5, r3
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	40d9      	lsrs	r1, r3
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	430d      	orrs	r5, r1
 8000ba6:	1e51      	subs	r1, r2, #1
 8000ba8:	418a      	sbcs	r2, r1
 8000baa:	4653      	mov	r3, sl
 8000bac:	4315      	orrs	r5, r2
 8000bae:	9a02      	ldr	r2, [sp, #8]
 8000bb0:	40da      	lsrs	r2, r3
 8000bb2:	18a4      	adds	r4, r4, r2
 8000bb4:	182d      	adds	r5, r5, r0
 8000bb6:	4285      	cmp	r5, r0
 8000bb8:	4180      	sbcs	r0, r0
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1824      	adds	r4, r4, r0
 8000bbe:	0223      	lsls	r3, r4, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dsub+0x1d8>
 8000bc2:	e0b6      	b.n	8000d32 <__aeabi_dsub+0x346>
 8000bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8000d40 <__aeabi_dsub+0x354>)
 8000bc6:	3701      	adds	r7, #1
 8000bc8:	429f      	cmp	r7, r3
 8000bca:	d100      	bne.n	8000bce <__aeabi_dsub+0x1e2>
 8000bcc:	e0ad      	b.n	8000d2a <__aeabi_dsub+0x33e>
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d44 <__aeabi_dsub+0x358>)
 8000bd2:	086a      	lsrs	r2, r5, #1
 8000bd4:	401c      	ands	r4, r3
 8000bd6:	4029      	ands	r1, r5
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	07e5      	lsls	r5, r4, #31
 8000bdc:	4315      	orrs	r5, r2
 8000bde:	0864      	lsrs	r4, r4, #1
 8000be0:	e78d      	b.n	8000afe <__aeabi_dsub+0x112>
 8000be2:	4a59      	ldr	r2, [pc, #356]	@ (8000d48 <__aeabi_dsub+0x35c>)
 8000be4:	9b02      	ldr	r3, [sp, #8]
 8000be6:	4692      	mov	sl, r2
 8000be8:	4662      	mov	r2, ip
 8000bea:	44ba      	add	sl, r7
 8000bec:	431a      	orrs	r2, r3
 8000bee:	d02c      	beq.n	8000c4a <__aeabi_dsub+0x25e>
 8000bf0:	428e      	cmp	r6, r1
 8000bf2:	d02e      	beq.n	8000c52 <__aeabi_dsub+0x266>
 8000bf4:	4652      	mov	r2, sl
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d060      	beq.n	8000cbc <__aeabi_dsub+0x2d0>
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dsub+0x214>
 8000bfe:	e0db      	b.n	8000db8 <__aeabi_dsub+0x3cc>
 8000c00:	4663      	mov	r3, ip
 8000c02:	000e      	movs	r6, r1
 8000c04:	9c02      	ldr	r4, [sp, #8]
 8000c06:	08d8      	lsrs	r0, r3, #3
 8000c08:	0762      	lsls	r2, r4, #29
 8000c0a:	4302      	orrs	r2, r0
 8000c0c:	08e4      	lsrs	r4, r4, #3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	4323      	orrs	r3, r4
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dsub+0x22a>
 8000c14:	e254      	b.n	80010c0 <__aeabi_dsub+0x6d4>
 8000c16:	2580      	movs	r5, #128	@ 0x80
 8000c18:	032d      	lsls	r5, r5, #12
 8000c1a:	4325      	orrs	r5, r4
 8000c1c:	032d      	lsls	r5, r5, #12
 8000c1e:	4c48      	ldr	r4, [pc, #288]	@ (8000d40 <__aeabi_dsub+0x354>)
 8000c20:	0b2d      	lsrs	r5, r5, #12
 8000c22:	e78c      	b.n	8000b3e <__aeabi_dsub+0x152>
 8000c24:	4661      	mov	r1, ip
 8000c26:	9b02      	ldr	r3, [sp, #8]
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dsub+0x242>
 8000c2c:	e0cc      	b.n	8000dc8 <__aeabi_dsub+0x3dc>
 8000c2e:	0029      	movs	r1, r5
 8000c30:	3901      	subs	r1, #1
 8000c32:	2d01      	cmp	r5, #1
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dsub+0x24c>
 8000c36:	e188      	b.n	8000f4a <__aeabi_dsub+0x55e>
 8000c38:	4295      	cmp	r5, r2
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dsub+0x252>
 8000c3c:	e0aa      	b.n	8000d94 <__aeabi_dsub+0x3a8>
 8000c3e:	2501      	movs	r5, #1
 8000c40:	2938      	cmp	r1, #56	@ 0x38
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dsub+0x25a>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_dsub+0xba>
 8000c46:	468a      	mov	sl, r1
 8000c48:	e718      	b.n	8000a7c <__aeabi_dsub+0x90>
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4051      	eors	r1, r2
 8000c4e:	428e      	cmp	r6, r1
 8000c50:	d1d0      	bne.n	8000bf4 <__aeabi_dsub+0x208>
 8000c52:	4653      	mov	r3, sl
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dsub+0x26e>
 8000c58:	e0be      	b.n	8000dd8 <__aeabi_dsub+0x3ec>
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_dsub+0x274>
 8000c5e:	e138      	b.n	8000ed2 <__aeabi_dsub+0x4e6>
 8000c60:	46ca      	mov	sl, r9
 8000c62:	0022      	movs	r2, r4
 8000c64:	4302      	orrs	r2, r0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dsub+0x27e>
 8000c68:	e1e2      	b.n	8001030 <__aeabi_dsub+0x644>
 8000c6a:	4653      	mov	r3, sl
 8000c6c:	1e59      	subs	r1, r3, #1
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dsub+0x288>
 8000c72:	e20d      	b.n	8001090 <__aeabi_dsub+0x6a4>
 8000c74:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <__aeabi_dsub+0x354>)
 8000c76:	4592      	cmp	sl, r2
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dsub+0x290>
 8000c7a:	e1d2      	b.n	8001022 <__aeabi_dsub+0x636>
 8000c7c:	2701      	movs	r7, #1
 8000c7e:	2938      	cmp	r1, #56	@ 0x38
 8000c80:	dc13      	bgt.n	8000caa <__aeabi_dsub+0x2be>
 8000c82:	291f      	cmp	r1, #31
 8000c84:	dd00      	ble.n	8000c88 <__aeabi_dsub+0x29c>
 8000c86:	e1ee      	b.n	8001066 <__aeabi_dsub+0x67a>
 8000c88:	2220      	movs	r2, #32
 8000c8a:	9b02      	ldr	r3, [sp, #8]
 8000c8c:	1a52      	subs	r2, r2, r1
 8000c8e:	0025      	movs	r5, r4
 8000c90:	0007      	movs	r7, r0
 8000c92:	469a      	mov	sl, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	4090      	lsls	r0, r2
 8000c98:	4095      	lsls	r5, r2
 8000c9a:	40cf      	lsrs	r7, r1
 8000c9c:	44a2      	add	sl, r4
 8000c9e:	1e42      	subs	r2, r0, #1
 8000ca0:	4190      	sbcs	r0, r2
 8000ca2:	4653      	mov	r3, sl
 8000ca4:	432f      	orrs	r7, r5
 8000ca6:	4307      	orrs	r7, r0
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	003d      	movs	r5, r7
 8000cac:	4465      	add	r5, ip
 8000cae:	4565      	cmp	r5, ip
 8000cb0:	4192      	sbcs	r2, r2
 8000cb2:	9b02      	ldr	r3, [sp, #8]
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	464f      	mov	r7, r9
 8000cb8:	18d4      	adds	r4, r2, r3
 8000cba:	e780      	b.n	8000bbe <__aeabi_dsub+0x1d2>
 8000cbc:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <__aeabi_dsub+0x360>)
 8000cbe:	1c7d      	adds	r5, r7, #1
 8000cc0:	4215      	tst	r5, r2
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dsub+0x2da>
 8000cc4:	e0aa      	b.n	8000e1c <__aeabi_dsub+0x430>
 8000cc6:	4662      	mov	r2, ip
 8000cc8:	0025      	movs	r5, r4
 8000cca:	9b02      	ldr	r3, [sp, #8]
 8000ccc:	4305      	orrs	r5, r0
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	2f00      	cmp	r7, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x2ea>
 8000cd4:	e0f5      	b.n	8000ec2 <__aeabi_dsub+0x4d6>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dsub+0x2f0>
 8000cda:	e16b      	b.n	8000fb4 <__aeabi_dsub+0x5c8>
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dsub+0x2f6>
 8000ce0:	e152      	b.n	8000f88 <__aeabi_dsub+0x59c>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	1ac5      	subs	r5, r0, r3
 8000ce6:	9b02      	ldr	r3, [sp, #8]
 8000ce8:	1ae2      	subs	r2, r4, r3
 8000cea:	42a8      	cmp	r0, r5
 8000cec:	419b      	sbcs	r3, r3
 8000cee:	425b      	negs	r3, r3
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	021a      	lsls	r2, r3, #8
 8000cf4:	d400      	bmi.n	8000cf8 <__aeabi_dsub+0x30c>
 8000cf6:	e1d5      	b.n	80010a4 <__aeabi_dsub+0x6b8>
 8000cf8:	4663      	mov	r3, ip
 8000cfa:	1a1d      	subs	r5, r3, r0
 8000cfc:	45ac      	cmp	ip, r5
 8000cfe:	4192      	sbcs	r2, r2
 8000d00:	2601      	movs	r6, #1
 8000d02:	9b02      	ldr	r3, [sp, #8]
 8000d04:	4252      	negs	r2, r2
 8000d06:	1b1c      	subs	r4, r3, r4
 8000d08:	4688      	mov	r8, r1
 8000d0a:	1aa4      	subs	r4, r4, r2
 8000d0c:	400e      	ands	r6, r1
 8000d0e:	e6f6      	b.n	8000afe <__aeabi_dsub+0x112>
 8000d10:	4297      	cmp	r7, r2
 8000d12:	d03f      	beq.n	8000d94 <__aeabi_dsub+0x3a8>
 8000d14:	4652      	mov	r2, sl
 8000d16:	2501      	movs	r5, #1
 8000d18:	2a38      	cmp	r2, #56	@ 0x38
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_dsub+0x332>
 8000d1c:	e74a      	b.n	8000bb4 <__aeabi_dsub+0x1c8>
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	9b02      	ldr	r3, [sp, #8]
 8000d22:	0412      	lsls	r2, r2, #16
 8000d24:	4313      	orrs	r3, r2
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	e72d      	b.n	8000b86 <__aeabi_dsub+0x19a>
 8000d2a:	003c      	movs	r4, r7
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e705      	b.n	8000b3e <__aeabi_dsub+0x152>
 8000d32:	2307      	movs	r3, #7
 8000d34:	402b      	ands	r3, r5
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d000      	beq.n	8000d3c <__aeabi_dsub+0x350>
 8000d3a:	e6e2      	b.n	8000b02 <__aeabi_dsub+0x116>
 8000d3c:	e06b      	b.n	8000e16 <__aeabi_dsub+0x42a>
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	000007ff 	.word	0x000007ff
 8000d44:	ff7fffff 	.word	0xff7fffff
 8000d48:	fffff801 	.word	0xfffff801
 8000d4c:	000007fe 	.word	0x000007fe
 8000d50:	0028      	movs	r0, r5
 8000d52:	f000 fa85 	bl	8001260 <__clzsi2>
 8000d56:	0003      	movs	r3, r0
 8000d58:	3318      	adds	r3, #24
 8000d5a:	2b1f      	cmp	r3, #31
 8000d5c:	dc00      	bgt.n	8000d60 <__aeabi_dsub+0x374>
 8000d5e:	e6b4      	b.n	8000aca <__aeabi_dsub+0xde>
 8000d60:	002a      	movs	r2, r5
 8000d62:	3808      	subs	r0, #8
 8000d64:	4082      	lsls	r2, r0
 8000d66:	429f      	cmp	r7, r3
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_dsub+0x380>
 8000d6a:	e0b9      	b.n	8000ee0 <__aeabi_dsub+0x4f4>
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	1c58      	adds	r0, r3, #1
 8000d70:	281f      	cmp	r0, #31
 8000d72:	dc00      	bgt.n	8000d76 <__aeabi_dsub+0x38a>
 8000d74:	e1a0      	b.n	80010b8 <__aeabi_dsub+0x6cc>
 8000d76:	0015      	movs	r5, r2
 8000d78:	3b1f      	subs	r3, #31
 8000d7a:	40dd      	lsrs	r5, r3
 8000d7c:	2820      	cmp	r0, #32
 8000d7e:	d005      	beq.n	8000d8c <__aeabi_dsub+0x3a0>
 8000d80:	2340      	movs	r3, #64	@ 0x40
 8000d82:	1a1b      	subs	r3, r3, r0
 8000d84:	409a      	lsls	r2, r3
 8000d86:	1e53      	subs	r3, r2, #1
 8000d88:	419a      	sbcs	r2, r3
 8000d8a:	4315      	orrs	r5, r2
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	2700      	movs	r7, #0
 8000d90:	402b      	ands	r3, r5
 8000d92:	e7d0      	b.n	8000d36 <__aeabi_dsub+0x34a>
 8000d94:	08c0      	lsrs	r0, r0, #3
 8000d96:	0762      	lsls	r2, r4, #29
 8000d98:	4302      	orrs	r2, r0
 8000d9a:	08e4      	lsrs	r4, r4, #3
 8000d9c:	e737      	b.n	8000c0e <__aeabi_dsub+0x222>
 8000d9e:	08ea      	lsrs	r2, r5, #3
 8000da0:	0763      	lsls	r3, r4, #29
 8000da2:	431a      	orrs	r2, r3
 8000da4:	4bd3      	ldr	r3, [pc, #844]	@ (80010f4 <__aeabi_dsub+0x708>)
 8000da6:	08e4      	lsrs	r4, r4, #3
 8000da8:	429f      	cmp	r7, r3
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x3c2>
 8000dac:	e72f      	b.n	8000c0e <__aeabi_dsub+0x222>
 8000dae:	0324      	lsls	r4, r4, #12
 8000db0:	0b25      	lsrs	r5, r4, #12
 8000db2:	057c      	lsls	r4, r7, #21
 8000db4:	0d64      	lsrs	r4, r4, #21
 8000db6:	e6c2      	b.n	8000b3e <__aeabi_dsub+0x152>
 8000db8:	46ca      	mov	sl, r9
 8000dba:	0022      	movs	r2, r4
 8000dbc:	4302      	orrs	r2, r0
 8000dbe:	d158      	bne.n	8000e72 <__aeabi_dsub+0x486>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	000e      	movs	r6, r1
 8000dc4:	9c02      	ldr	r4, [sp, #8]
 8000dc6:	9303      	str	r3, [sp, #12]
 8000dc8:	9b03      	ldr	r3, [sp, #12]
 8000dca:	4657      	mov	r7, sl
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	e7e7      	b.n	8000da0 <__aeabi_dsub+0x3b4>
 8000dd0:	4cc9      	ldr	r4, [pc, #804]	@ (80010f8 <__aeabi_dsub+0x70c>)
 8000dd2:	1aff      	subs	r7, r7, r3
 8000dd4:	4014      	ands	r4, r2
 8000dd6:	e692      	b.n	8000afe <__aeabi_dsub+0x112>
 8000dd8:	4dc8      	ldr	r5, [pc, #800]	@ (80010fc <__aeabi_dsub+0x710>)
 8000dda:	1c7a      	adds	r2, r7, #1
 8000ddc:	422a      	tst	r2, r5
 8000dde:	d000      	beq.n	8000de2 <__aeabi_dsub+0x3f6>
 8000de0:	e084      	b.n	8000eec <__aeabi_dsub+0x500>
 8000de2:	0022      	movs	r2, r4
 8000de4:	4302      	orrs	r2, r0
 8000de6:	2f00      	cmp	r7, #0
 8000de8:	d000      	beq.n	8000dec <__aeabi_dsub+0x400>
 8000dea:	e0ef      	b.n	8000fcc <__aeabi_dsub+0x5e0>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dsub+0x406>
 8000df0:	e0e5      	b.n	8000fbe <__aeabi_dsub+0x5d2>
 8000df2:	4662      	mov	r2, ip
 8000df4:	9902      	ldr	r1, [sp, #8]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dsub+0x410>
 8000dfa:	e0c5      	b.n	8000f88 <__aeabi_dsub+0x59c>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	18c5      	adds	r5, r0, r3
 8000e00:	468c      	mov	ip, r1
 8000e02:	4285      	cmp	r5, r0
 8000e04:	4180      	sbcs	r0, r0
 8000e06:	4464      	add	r4, ip
 8000e08:	4240      	negs	r0, r0
 8000e0a:	1824      	adds	r4, r4, r0
 8000e0c:	0223      	lsls	r3, r4, #8
 8000e0e:	d502      	bpl.n	8000e16 <__aeabi_dsub+0x42a>
 8000e10:	4bb9      	ldr	r3, [pc, #740]	@ (80010f8 <__aeabi_dsub+0x70c>)
 8000e12:	3701      	adds	r7, #1
 8000e14:	401c      	ands	r4, r3
 8000e16:	46ba      	mov	sl, r7
 8000e18:	9503      	str	r5, [sp, #12]
 8000e1a:	e7d5      	b.n	8000dc8 <__aeabi_dsub+0x3dc>
 8000e1c:	4662      	mov	r2, ip
 8000e1e:	1a85      	subs	r5, r0, r2
 8000e20:	42a8      	cmp	r0, r5
 8000e22:	4192      	sbcs	r2, r2
 8000e24:	4252      	negs	r2, r2
 8000e26:	4691      	mov	r9, r2
 8000e28:	9b02      	ldr	r3, [sp, #8]
 8000e2a:	1ae3      	subs	r3, r4, r3
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	464b      	mov	r3, r9
 8000e30:	1ad2      	subs	r2, r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	4691      	mov	r9, r2
 8000e36:	021a      	lsls	r2, r3, #8
 8000e38:	d46c      	bmi.n	8000f14 <__aeabi_dsub+0x528>
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	464c      	mov	r4, r9
 8000e3e:	432a      	orrs	r2, r5
 8000e40:	d000      	beq.n	8000e44 <__aeabi_dsub+0x458>
 8000e42:	e63a      	b.n	8000aba <__aeabi_dsub+0xce>
 8000e44:	2600      	movs	r6, #0
 8000e46:	2400      	movs	r4, #0
 8000e48:	2500      	movs	r5, #0
 8000e4a:	e678      	b.n	8000b3e <__aeabi_dsub+0x152>
 8000e4c:	9902      	ldr	r1, [sp, #8]
 8000e4e:	4653      	mov	r3, sl
 8000e50:	000d      	movs	r5, r1
 8000e52:	3a20      	subs	r2, #32
 8000e54:	40d5      	lsrs	r5, r2
 8000e56:	2b20      	cmp	r3, #32
 8000e58:	d006      	beq.n	8000e68 <__aeabi_dsub+0x47c>
 8000e5a:	2240      	movs	r2, #64	@ 0x40
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	000b      	movs	r3, r1
 8000e60:	4093      	lsls	r3, r2
 8000e62:	4662      	mov	r2, ip
 8000e64:	431a      	orrs	r2, r3
 8000e66:	4693      	mov	fp, r2
 8000e68:	465b      	mov	r3, fp
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	4193      	sbcs	r3, r2
 8000e6e:	431d      	orrs	r5, r3
 8000e70:	e619      	b.n	8000aa6 <__aeabi_dsub+0xba>
 8000e72:	4653      	mov	r3, sl
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dsub+0x490>
 8000e7a:	e0c6      	b.n	800100a <__aeabi_dsub+0x61e>
 8000e7c:	4e9d      	ldr	r6, [pc, #628]	@ (80010f4 <__aeabi_dsub+0x708>)
 8000e7e:	45b2      	cmp	sl, r6
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dsub+0x498>
 8000e82:	e6bd      	b.n	8000c00 <__aeabi_dsub+0x214>
 8000e84:	4688      	mov	r8, r1
 8000e86:	000e      	movs	r6, r1
 8000e88:	2501      	movs	r5, #1
 8000e8a:	2a38      	cmp	r2, #56	@ 0x38
 8000e8c:	dc10      	bgt.n	8000eb0 <__aeabi_dsub+0x4c4>
 8000e8e:	2a1f      	cmp	r2, #31
 8000e90:	dc7f      	bgt.n	8000f92 <__aeabi_dsub+0x5a6>
 8000e92:	2120      	movs	r1, #32
 8000e94:	0025      	movs	r5, r4
 8000e96:	1a89      	subs	r1, r1, r2
 8000e98:	0007      	movs	r7, r0
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	408d      	lsls	r5, r1
 8000e9e:	40d7      	lsrs	r7, r2
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	1e41      	subs	r1, r0, #1
 8000ea4:	4188      	sbcs	r0, r1
 8000ea6:	9b02      	ldr	r3, [sp, #8]
 8000ea8:	433d      	orrs	r5, r7
 8000eaa:	1b1b      	subs	r3, r3, r4
 8000eac:	4305      	orrs	r5, r0
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4662      	mov	r2, ip
 8000eb2:	1b55      	subs	r5, r2, r5
 8000eb4:	45ac      	cmp	ip, r5
 8000eb6:	4192      	sbcs	r2, r2
 8000eb8:	9b02      	ldr	r3, [sp, #8]
 8000eba:	4252      	negs	r2, r2
 8000ebc:	464f      	mov	r7, r9
 8000ebe:	1a9c      	subs	r4, r3, r2
 8000ec0:	e5f6      	b.n	8000ab0 <__aeabi_dsub+0xc4>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_dsub+0x4dc>
 8000ec6:	e0b7      	b.n	8001038 <__aeabi_dsub+0x64c>
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_dsub+0x4e2>
 8000ecc:	e0f0      	b.n	80010b0 <__aeabi_dsub+0x6c4>
 8000ece:	2601      	movs	r6, #1
 8000ed0:	400e      	ands	r6, r1
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	9802      	ldr	r0, [sp, #8]
 8000ed6:	08d9      	lsrs	r1, r3, #3
 8000ed8:	0742      	lsls	r2, r0, #29
 8000eda:	430a      	orrs	r2, r1
 8000edc:	08c4      	lsrs	r4, r0, #3
 8000ede:	e696      	b.n	8000c0e <__aeabi_dsub+0x222>
 8000ee0:	4c85      	ldr	r4, [pc, #532]	@ (80010f8 <__aeabi_dsub+0x70c>)
 8000ee2:	1aff      	subs	r7, r7, r3
 8000ee4:	4014      	ands	r4, r2
 8000ee6:	0762      	lsls	r2, r4, #29
 8000ee8:	08e4      	lsrs	r4, r4, #3
 8000eea:	e760      	b.n	8000dae <__aeabi_dsub+0x3c2>
 8000eec:	4981      	ldr	r1, [pc, #516]	@ (80010f4 <__aeabi_dsub+0x708>)
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dsub+0x508>
 8000ef2:	e0c9      	b.n	8001088 <__aeabi_dsub+0x69c>
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	18c1      	adds	r1, r0, r3
 8000ef8:	4281      	cmp	r1, r0
 8000efa:	4180      	sbcs	r0, r0
 8000efc:	9b02      	ldr	r3, [sp, #8]
 8000efe:	4240      	negs	r0, r0
 8000f00:	18e3      	adds	r3, r4, r3
 8000f02:	181b      	adds	r3, r3, r0
 8000f04:	07dd      	lsls	r5, r3, #31
 8000f06:	085c      	lsrs	r4, r3, #1
 8000f08:	2307      	movs	r3, #7
 8000f0a:	0849      	lsrs	r1, r1, #1
 8000f0c:	430d      	orrs	r5, r1
 8000f0e:	0017      	movs	r7, r2
 8000f10:	402b      	ands	r3, r5
 8000f12:	e710      	b.n	8000d36 <__aeabi_dsub+0x34a>
 8000f14:	4663      	mov	r3, ip
 8000f16:	1a1d      	subs	r5, r3, r0
 8000f18:	45ac      	cmp	ip, r5
 8000f1a:	4192      	sbcs	r2, r2
 8000f1c:	2601      	movs	r6, #1
 8000f1e:	9b02      	ldr	r3, [sp, #8]
 8000f20:	4252      	negs	r2, r2
 8000f22:	1b1c      	subs	r4, r3, r4
 8000f24:	4688      	mov	r8, r1
 8000f26:	1aa4      	subs	r4, r4, r2
 8000f28:	400e      	ands	r6, r1
 8000f2a:	e5c6      	b.n	8000aba <__aeabi_dsub+0xce>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	18c5      	adds	r5, r0, r3
 8000f30:	9b02      	ldr	r3, [sp, #8]
 8000f32:	4285      	cmp	r5, r0
 8000f34:	4180      	sbcs	r0, r0
 8000f36:	469c      	mov	ip, r3
 8000f38:	4240      	negs	r0, r0
 8000f3a:	4464      	add	r4, ip
 8000f3c:	1824      	adds	r4, r4, r0
 8000f3e:	2701      	movs	r7, #1
 8000f40:	0223      	lsls	r3, r4, #8
 8000f42:	d400      	bmi.n	8000f46 <__aeabi_dsub+0x55a>
 8000f44:	e6f5      	b.n	8000d32 <__aeabi_dsub+0x346>
 8000f46:	2702      	movs	r7, #2
 8000f48:	e641      	b.n	8000bce <__aeabi_dsub+0x1e2>
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	1ac5      	subs	r5, r0, r3
 8000f4e:	42a8      	cmp	r0, r5
 8000f50:	4180      	sbcs	r0, r0
 8000f52:	9b02      	ldr	r3, [sp, #8]
 8000f54:	4240      	negs	r0, r0
 8000f56:	1ae4      	subs	r4, r4, r3
 8000f58:	2701      	movs	r7, #1
 8000f5a:	1a24      	subs	r4, r4, r0
 8000f5c:	e5a8      	b.n	8000ab0 <__aeabi_dsub+0xc4>
 8000f5e:	9d02      	ldr	r5, [sp, #8]
 8000f60:	4652      	mov	r2, sl
 8000f62:	002b      	movs	r3, r5
 8000f64:	3a20      	subs	r2, #32
 8000f66:	40d3      	lsrs	r3, r2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	2b20      	cmp	r3, #32
 8000f6e:	d006      	beq.n	8000f7e <__aeabi_dsub+0x592>
 8000f70:	2240      	movs	r2, #64	@ 0x40
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	002b      	movs	r3, r5
 8000f76:	4093      	lsls	r3, r2
 8000f78:	4662      	mov	r2, ip
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4693      	mov	fp, r2
 8000f7e:	465d      	mov	r5, fp
 8000f80:	1e6b      	subs	r3, r5, #1
 8000f82:	419d      	sbcs	r5, r3
 8000f84:	430d      	orrs	r5, r1
 8000f86:	e615      	b.n	8000bb4 <__aeabi_dsub+0x1c8>
 8000f88:	0762      	lsls	r2, r4, #29
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	08e4      	lsrs	r4, r4, #3
 8000f90:	e70d      	b.n	8000dae <__aeabi_dsub+0x3c2>
 8000f92:	0011      	movs	r1, r2
 8000f94:	0027      	movs	r7, r4
 8000f96:	3920      	subs	r1, #32
 8000f98:	40cf      	lsrs	r7, r1
 8000f9a:	2a20      	cmp	r2, #32
 8000f9c:	d005      	beq.n	8000faa <__aeabi_dsub+0x5be>
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4094      	lsls	r4, r2
 8000fa4:	0025      	movs	r5, r4
 8000fa6:	4305      	orrs	r5, r0
 8000fa8:	9503      	str	r5, [sp, #12]
 8000faa:	9d03      	ldr	r5, [sp, #12]
 8000fac:	1e6a      	subs	r2, r5, #1
 8000fae:	4195      	sbcs	r5, r2
 8000fb0:	433d      	orrs	r5, r7
 8000fb2:	e77d      	b.n	8000eb0 <__aeabi_dsub+0x4c4>
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dsub+0x5ce>
 8000fb8:	e744      	b.n	8000e44 <__aeabi_dsub+0x458>
 8000fba:	2601      	movs	r6, #1
 8000fbc:	400e      	ands	r6, r1
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	08d9      	lsrs	r1, r3, #3
 8000fc2:	9b02      	ldr	r3, [sp, #8]
 8000fc4:	075a      	lsls	r2, r3, #29
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	08dc      	lsrs	r4, r3, #3
 8000fca:	e6f0      	b.n	8000dae <__aeabi_dsub+0x3c2>
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d028      	beq.n	8001022 <__aeabi_dsub+0x636>
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	9f02      	ldr	r7, [sp, #8]
 8000fd4:	08c0      	lsrs	r0, r0, #3
 8000fd6:	433a      	orrs	r2, r7
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dsub+0x5f0>
 8000fda:	e6dc      	b.n	8000d96 <__aeabi_dsub+0x3aa>
 8000fdc:	0762      	lsls	r2, r4, #29
 8000fde:	4310      	orrs	r0, r2
 8000fe0:	2280      	movs	r2, #128	@ 0x80
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	0312      	lsls	r2, r2, #12
 8000fe6:	4214      	tst	r4, r2
 8000fe8:	d009      	beq.n	8000ffe <__aeabi_dsub+0x612>
 8000fea:	08fd      	lsrs	r5, r7, #3
 8000fec:	4215      	tst	r5, r2
 8000fee:	d106      	bne.n	8000ffe <__aeabi_dsub+0x612>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	2601      	movs	r6, #1
 8000ff4:	002c      	movs	r4, r5
 8000ff6:	08d8      	lsrs	r0, r3, #3
 8000ff8:	077b      	lsls	r3, r7, #29
 8000ffa:	4318      	orrs	r0, r3
 8000ffc:	400e      	ands	r6, r1
 8000ffe:	0f42      	lsrs	r2, r0, #29
 8001000:	00c0      	lsls	r0, r0, #3
 8001002:	08c0      	lsrs	r0, r0, #3
 8001004:	0752      	lsls	r2, r2, #29
 8001006:	4302      	orrs	r2, r0
 8001008:	e601      	b.n	8000c0e <__aeabi_dsub+0x222>
 800100a:	4663      	mov	r3, ip
 800100c:	1a1d      	subs	r5, r3, r0
 800100e:	45ac      	cmp	ip, r5
 8001010:	4192      	sbcs	r2, r2
 8001012:	9b02      	ldr	r3, [sp, #8]
 8001014:	4252      	negs	r2, r2
 8001016:	1b1c      	subs	r4, r3, r4
 8001018:	000e      	movs	r6, r1
 800101a:	4688      	mov	r8, r1
 800101c:	2701      	movs	r7, #1
 800101e:	1aa4      	subs	r4, r4, r2
 8001020:	e546      	b.n	8000ab0 <__aeabi_dsub+0xc4>
 8001022:	4663      	mov	r3, ip
 8001024:	08d9      	lsrs	r1, r3, #3
 8001026:	9b02      	ldr	r3, [sp, #8]
 8001028:	075a      	lsls	r2, r3, #29
 800102a:	430a      	orrs	r2, r1
 800102c:	08dc      	lsrs	r4, r3, #3
 800102e:	e5ee      	b.n	8000c0e <__aeabi_dsub+0x222>
 8001030:	4663      	mov	r3, ip
 8001032:	9c02      	ldr	r4, [sp, #8]
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	e6c7      	b.n	8000dc8 <__aeabi_dsub+0x3dc>
 8001038:	08c0      	lsrs	r0, r0, #3
 800103a:	2a00      	cmp	r2, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_dsub+0x654>
 800103e:	e6aa      	b.n	8000d96 <__aeabi_dsub+0x3aa>
 8001040:	0762      	lsls	r2, r4, #29
 8001042:	4310      	orrs	r0, r2
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	08e4      	lsrs	r4, r4, #3
 8001048:	0312      	lsls	r2, r2, #12
 800104a:	4214      	tst	r4, r2
 800104c:	d0d7      	beq.n	8000ffe <__aeabi_dsub+0x612>
 800104e:	9f02      	ldr	r7, [sp, #8]
 8001050:	08fd      	lsrs	r5, r7, #3
 8001052:	4215      	tst	r5, r2
 8001054:	d1d3      	bne.n	8000ffe <__aeabi_dsub+0x612>
 8001056:	4663      	mov	r3, ip
 8001058:	2601      	movs	r6, #1
 800105a:	08d8      	lsrs	r0, r3, #3
 800105c:	077b      	lsls	r3, r7, #29
 800105e:	002c      	movs	r4, r5
 8001060:	4318      	orrs	r0, r3
 8001062:	400e      	ands	r6, r1
 8001064:	e7cb      	b.n	8000ffe <__aeabi_dsub+0x612>
 8001066:	000a      	movs	r2, r1
 8001068:	0027      	movs	r7, r4
 800106a:	3a20      	subs	r2, #32
 800106c:	40d7      	lsrs	r7, r2
 800106e:	2920      	cmp	r1, #32
 8001070:	d005      	beq.n	800107e <__aeabi_dsub+0x692>
 8001072:	2240      	movs	r2, #64	@ 0x40
 8001074:	1a52      	subs	r2, r2, r1
 8001076:	4094      	lsls	r4, r2
 8001078:	0025      	movs	r5, r4
 800107a:	4305      	orrs	r5, r0
 800107c:	9503      	str	r5, [sp, #12]
 800107e:	9d03      	ldr	r5, [sp, #12]
 8001080:	1e6a      	subs	r2, r5, #1
 8001082:	4195      	sbcs	r5, r2
 8001084:	432f      	orrs	r7, r5
 8001086:	e610      	b.n	8000caa <__aeabi_dsub+0x2be>
 8001088:	0014      	movs	r4, r2
 800108a:	2500      	movs	r5, #0
 800108c:	2200      	movs	r2, #0
 800108e:	e556      	b.n	8000b3e <__aeabi_dsub+0x152>
 8001090:	9b02      	ldr	r3, [sp, #8]
 8001092:	4460      	add	r0, ip
 8001094:	4699      	mov	r9, r3
 8001096:	4560      	cmp	r0, ip
 8001098:	4192      	sbcs	r2, r2
 800109a:	444c      	add	r4, r9
 800109c:	4252      	negs	r2, r2
 800109e:	0005      	movs	r5, r0
 80010a0:	18a4      	adds	r4, r4, r2
 80010a2:	e74c      	b.n	8000f3e <__aeabi_dsub+0x552>
 80010a4:	001a      	movs	r2, r3
 80010a6:	001c      	movs	r4, r3
 80010a8:	432a      	orrs	r2, r5
 80010aa:	d000      	beq.n	80010ae <__aeabi_dsub+0x6c2>
 80010ac:	e6b3      	b.n	8000e16 <__aeabi_dsub+0x42a>
 80010ae:	e6c9      	b.n	8000e44 <__aeabi_dsub+0x458>
 80010b0:	2480      	movs	r4, #128	@ 0x80
 80010b2:	2600      	movs	r6, #0
 80010b4:	0324      	lsls	r4, r4, #12
 80010b6:	e5ae      	b.n	8000c16 <__aeabi_dsub+0x22a>
 80010b8:	2120      	movs	r1, #32
 80010ba:	2500      	movs	r5, #0
 80010bc:	1a09      	subs	r1, r1, r0
 80010be:	e517      	b.n	8000af0 <__aeabi_dsub+0x104>
 80010c0:	2200      	movs	r2, #0
 80010c2:	2500      	movs	r5, #0
 80010c4:	4c0b      	ldr	r4, [pc, #44]	@ (80010f4 <__aeabi_dsub+0x708>)
 80010c6:	e53a      	b.n	8000b3e <__aeabi_dsub+0x152>
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x6e2>
 80010cc:	e5f6      	b.n	8000cbc <__aeabi_dsub+0x2d0>
 80010ce:	464b      	mov	r3, r9
 80010d0:	1bda      	subs	r2, r3, r7
 80010d2:	4692      	mov	sl, r2
 80010d4:	2f00      	cmp	r7, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dsub+0x6ee>
 80010d8:	e66f      	b.n	8000dba <__aeabi_dsub+0x3ce>
 80010da:	2a38      	cmp	r2, #56	@ 0x38
 80010dc:	dc05      	bgt.n	80010ea <__aeabi_dsub+0x6fe>
 80010de:	2680      	movs	r6, #128	@ 0x80
 80010e0:	0436      	lsls	r6, r6, #16
 80010e2:	4334      	orrs	r4, r6
 80010e4:	4688      	mov	r8, r1
 80010e6:	000e      	movs	r6, r1
 80010e8:	e6d1      	b.n	8000e8e <__aeabi_dsub+0x4a2>
 80010ea:	4688      	mov	r8, r1
 80010ec:	000e      	movs	r6, r1
 80010ee:	2501      	movs	r5, #1
 80010f0:	e6de      	b.n	8000eb0 <__aeabi_dsub+0x4c4>
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	ff7fffff 	.word	0xff7fffff
 80010fc:	000007fe 	.word	0x000007fe
 8001100:	2d00      	cmp	r5, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_dsub+0x71a>
 8001104:	e668      	b.n	8000dd8 <__aeabi_dsub+0x3ec>
 8001106:	464b      	mov	r3, r9
 8001108:	1bd9      	subs	r1, r3, r7
 800110a:	2f00      	cmp	r7, #0
 800110c:	d101      	bne.n	8001112 <__aeabi_dsub+0x726>
 800110e:	468a      	mov	sl, r1
 8001110:	e5a7      	b.n	8000c62 <__aeabi_dsub+0x276>
 8001112:	2701      	movs	r7, #1
 8001114:	2938      	cmp	r1, #56	@ 0x38
 8001116:	dd00      	ble.n	800111a <__aeabi_dsub+0x72e>
 8001118:	e5c7      	b.n	8000caa <__aeabi_dsub+0x2be>
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	0412      	lsls	r2, r2, #16
 800111e:	4314      	orrs	r4, r2
 8001120:	e5af      	b.n	8000c82 <__aeabi_dsub+0x296>
 8001122:	46c0      	nop			@ (mov r8, r8)

08001124 <__aeabi_d2iz>:
 8001124:	000b      	movs	r3, r1
 8001126:	0002      	movs	r2, r0
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	4d16      	ldr	r5, [pc, #88]	@ (8001184 <__aeabi_d2iz+0x60>)
 800112c:	030c      	lsls	r4, r1, #12
 800112e:	b082      	sub	sp, #8
 8001130:	0049      	lsls	r1, r1, #1
 8001132:	2000      	movs	r0, #0
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	0b24      	lsrs	r4, r4, #12
 800113a:	0d49      	lsrs	r1, r1, #21
 800113c:	0fde      	lsrs	r6, r3, #31
 800113e:	42a9      	cmp	r1, r5
 8001140:	dd04      	ble.n	800114c <__aeabi_d2iz+0x28>
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <__aeabi_d2iz+0x64>)
 8001144:	4281      	cmp	r1, r0
 8001146:	dd03      	ble.n	8001150 <__aeabi_d2iz+0x2c>
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <__aeabi_d2iz+0x68>)
 800114a:	18f0      	adds	r0, r6, r3
 800114c:	b002      	add	sp, #8
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	2080      	movs	r0, #128	@ 0x80
 8001152:	0340      	lsls	r0, r0, #13
 8001154:	4320      	orrs	r0, r4
 8001156:	4c0e      	ldr	r4, [pc, #56]	@ (8001190 <__aeabi_d2iz+0x6c>)
 8001158:	1a64      	subs	r4, r4, r1
 800115a:	2c1f      	cmp	r4, #31
 800115c:	dd08      	ble.n	8001170 <__aeabi_d2iz+0x4c>
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <__aeabi_d2iz+0x70>)
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	40d8      	lsrs	r0, r3
 8001164:	0003      	movs	r3, r0
 8001166:	4258      	negs	r0, r3
 8001168:	2e00      	cmp	r6, #0
 800116a:	d1ef      	bne.n	800114c <__aeabi_d2iz+0x28>
 800116c:	0018      	movs	r0, r3
 800116e:	e7ed      	b.n	800114c <__aeabi_d2iz+0x28>
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <__aeabi_d2iz+0x74>)
 8001172:	9a00      	ldr	r2, [sp, #0]
 8001174:	469c      	mov	ip, r3
 8001176:	0003      	movs	r3, r0
 8001178:	4461      	add	r1, ip
 800117a:	408b      	lsls	r3, r1
 800117c:	40e2      	lsrs	r2, r4
 800117e:	4313      	orrs	r3, r2
 8001180:	e7f1      	b.n	8001166 <__aeabi_d2iz+0x42>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	000003fe 	.word	0x000003fe
 8001188:	0000041d 	.word	0x0000041d
 800118c:	7fffffff 	.word	0x7fffffff
 8001190:	00000433 	.word	0x00000433
 8001194:	00000413 	.word	0x00000413
 8001198:	fffffbed 	.word	0xfffffbed

0800119c <__aeabi_ui2d>:
 800119c:	b510      	push	{r4, lr}
 800119e:	1e04      	subs	r4, r0, #0
 80011a0:	d010      	beq.n	80011c4 <__aeabi_ui2d+0x28>
 80011a2:	f000 f85d 	bl	8001260 <__clzsi2>
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <__aeabi_ui2d+0x44>)
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	0d5b      	lsrs	r3, r3, #21
 80011ae:	280a      	cmp	r0, #10
 80011b0:	dc0f      	bgt.n	80011d2 <__aeabi_ui2d+0x36>
 80011b2:	220b      	movs	r2, #11
 80011b4:	0021      	movs	r1, r4
 80011b6:	1a12      	subs	r2, r2, r0
 80011b8:	40d1      	lsrs	r1, r2
 80011ba:	3015      	adds	r0, #21
 80011bc:	030a      	lsls	r2, r1, #12
 80011be:	4084      	lsls	r4, r0
 80011c0:	0b12      	lsrs	r2, r2, #12
 80011c2:	e001      	b.n	80011c8 <__aeabi_ui2d+0x2c>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	051b      	lsls	r3, r3, #20
 80011ca:	4313      	orrs	r3, r2
 80011cc:	0020      	movs	r0, r4
 80011ce:	0019      	movs	r1, r3
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	0022      	movs	r2, r4
 80011d4:	380b      	subs	r0, #11
 80011d6:	4082      	lsls	r2, r0
 80011d8:	0312      	lsls	r2, r2, #12
 80011da:	2400      	movs	r4, #0
 80011dc:	0b12      	lsrs	r2, r2, #12
 80011de:	e7f3      	b.n	80011c8 <__aeabi_ui2d+0x2c>
 80011e0:	0000041e 	.word	0x0000041e

080011e4 <__aeabi_cdrcmple>:
 80011e4:	4684      	mov	ip, r0
 80011e6:	0010      	movs	r0, r2
 80011e8:	4662      	mov	r2, ip
 80011ea:	468c      	mov	ip, r1
 80011ec:	0019      	movs	r1, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	e000      	b.n	80011f4 <__aeabi_cdcmpeq>
 80011f2:	46c0      	nop			@ (mov r8, r8)

080011f4 <__aeabi_cdcmpeq>:
 80011f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011f6:	f000 f909 	bl	800140c <__ledf2>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d401      	bmi.n	8001202 <__aeabi_cdcmpeq+0xe>
 80011fe:	2100      	movs	r1, #0
 8001200:	42c8      	cmn	r0, r1
 8001202:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001204 <__aeabi_dcmpeq>:
 8001204:	b510      	push	{r4, lr}
 8001206:	f000 f849 	bl	800129c <__eqdf2>
 800120a:	4240      	negs	r0, r0
 800120c:	3001      	adds	r0, #1
 800120e:	bd10      	pop	{r4, pc}

08001210 <__aeabi_dcmplt>:
 8001210:	b510      	push	{r4, lr}
 8001212:	f000 f8fb 	bl	800140c <__ledf2>
 8001216:	2800      	cmp	r0, #0
 8001218:	db01      	blt.n	800121e <__aeabi_dcmplt+0xe>
 800121a:	2000      	movs	r0, #0
 800121c:	bd10      	pop	{r4, pc}
 800121e:	2001      	movs	r0, #1
 8001220:	bd10      	pop	{r4, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)

08001224 <__aeabi_dcmple>:
 8001224:	b510      	push	{r4, lr}
 8001226:	f000 f8f1 	bl	800140c <__ledf2>
 800122a:	2800      	cmp	r0, #0
 800122c:	dd01      	ble.n	8001232 <__aeabi_dcmple+0xe>
 800122e:	2000      	movs	r0, #0
 8001230:	bd10      	pop	{r4, pc}
 8001232:	2001      	movs	r0, #1
 8001234:	bd10      	pop	{r4, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)

08001238 <__aeabi_dcmpgt>:
 8001238:	b510      	push	{r4, lr}
 800123a:	f000 f873 	bl	8001324 <__gedf2>
 800123e:	2800      	cmp	r0, #0
 8001240:	dc01      	bgt.n	8001246 <__aeabi_dcmpgt+0xe>
 8001242:	2000      	movs	r0, #0
 8001244:	bd10      	pop	{r4, pc}
 8001246:	2001      	movs	r0, #1
 8001248:	bd10      	pop	{r4, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)

0800124c <__aeabi_dcmpge>:
 800124c:	b510      	push	{r4, lr}
 800124e:	f000 f869 	bl	8001324 <__gedf2>
 8001252:	2800      	cmp	r0, #0
 8001254:	da01      	bge.n	800125a <__aeabi_dcmpge+0xe>
 8001256:	2000      	movs	r0, #0
 8001258:	bd10      	pop	{r4, pc}
 800125a:	2001      	movs	r0, #1
 800125c:	bd10      	pop	{r4, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)

08001260 <__clzsi2>:
 8001260:	211c      	movs	r1, #28
 8001262:	2301      	movs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	4298      	cmp	r0, r3
 8001268:	d301      	bcc.n	800126e <__clzsi2+0xe>
 800126a:	0c00      	lsrs	r0, r0, #16
 800126c:	3910      	subs	r1, #16
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	4298      	cmp	r0, r3
 8001272:	d301      	bcc.n	8001278 <__clzsi2+0x18>
 8001274:	0a00      	lsrs	r0, r0, #8
 8001276:	3908      	subs	r1, #8
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	4298      	cmp	r0, r3
 800127c:	d301      	bcc.n	8001282 <__clzsi2+0x22>
 800127e:	0900      	lsrs	r0, r0, #4
 8001280:	3904      	subs	r1, #4
 8001282:	a202      	add	r2, pc, #8	@ (adr r2, 800128c <__clzsi2+0x2c>)
 8001284:	5c10      	ldrb	r0, [r2, r0]
 8001286:	1840      	adds	r0, r0, r1
 8001288:	4770      	bx	lr
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	02020304 	.word	0x02020304
 8001290:	01010101 	.word	0x01010101
	...

0800129c <__eqdf2>:
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	4657      	mov	r7, sl
 80012a0:	46de      	mov	lr, fp
 80012a2:	464e      	mov	r6, r9
 80012a4:	4645      	mov	r5, r8
 80012a6:	b5e0      	push	{r5, r6, r7, lr}
 80012a8:	000d      	movs	r5, r1
 80012aa:	0004      	movs	r4, r0
 80012ac:	0fe8      	lsrs	r0, r5, #31
 80012ae:	4683      	mov	fp, r0
 80012b0:	0309      	lsls	r1, r1, #12
 80012b2:	0fd8      	lsrs	r0, r3, #31
 80012b4:	0b09      	lsrs	r1, r1, #12
 80012b6:	4682      	mov	sl, r0
 80012b8:	4819      	ldr	r0, [pc, #100]	@ (8001320 <__eqdf2+0x84>)
 80012ba:	468c      	mov	ip, r1
 80012bc:	031f      	lsls	r7, r3, #12
 80012be:	0069      	lsls	r1, r5, #1
 80012c0:	005e      	lsls	r6, r3, #1
 80012c2:	0d49      	lsrs	r1, r1, #21
 80012c4:	0b3f      	lsrs	r7, r7, #12
 80012c6:	0d76      	lsrs	r6, r6, #21
 80012c8:	4281      	cmp	r1, r0
 80012ca:	d018      	beq.n	80012fe <__eqdf2+0x62>
 80012cc:	4286      	cmp	r6, r0
 80012ce:	d00f      	beq.n	80012f0 <__eqdf2+0x54>
 80012d0:	2001      	movs	r0, #1
 80012d2:	42b1      	cmp	r1, r6
 80012d4:	d10d      	bne.n	80012f2 <__eqdf2+0x56>
 80012d6:	45bc      	cmp	ip, r7
 80012d8:	d10b      	bne.n	80012f2 <__eqdf2+0x56>
 80012da:	4294      	cmp	r4, r2
 80012dc:	d109      	bne.n	80012f2 <__eqdf2+0x56>
 80012de:	45d3      	cmp	fp, sl
 80012e0:	d01c      	beq.n	800131c <__eqdf2+0x80>
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d105      	bne.n	80012f2 <__eqdf2+0x56>
 80012e6:	4660      	mov	r0, ip
 80012e8:	4320      	orrs	r0, r4
 80012ea:	1e43      	subs	r3, r0, #1
 80012ec:	4198      	sbcs	r0, r3
 80012ee:	e000      	b.n	80012f2 <__eqdf2+0x56>
 80012f0:	2001      	movs	r0, #1
 80012f2:	bcf0      	pop	{r4, r5, r6, r7}
 80012f4:	46bb      	mov	fp, r7
 80012f6:	46b2      	mov	sl, r6
 80012f8:	46a9      	mov	r9, r5
 80012fa:	46a0      	mov	r8, r4
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	2001      	movs	r0, #1
 8001300:	428e      	cmp	r6, r1
 8001302:	d1f6      	bne.n	80012f2 <__eqdf2+0x56>
 8001304:	4661      	mov	r1, ip
 8001306:	4339      	orrs	r1, r7
 8001308:	000f      	movs	r7, r1
 800130a:	4317      	orrs	r7, r2
 800130c:	4327      	orrs	r7, r4
 800130e:	d1f0      	bne.n	80012f2 <__eqdf2+0x56>
 8001310:	465b      	mov	r3, fp
 8001312:	4652      	mov	r2, sl
 8001314:	1a98      	subs	r0, r3, r2
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	e7ea      	b.n	80012f2 <__eqdf2+0x56>
 800131c:	2000      	movs	r0, #0
 800131e:	e7e8      	b.n	80012f2 <__eqdf2+0x56>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__gedf2>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	000d      	movs	r5, r1
 8001332:	030f      	lsls	r7, r1, #12
 8001334:	0b39      	lsrs	r1, r7, #12
 8001336:	b083      	sub	sp, #12
 8001338:	0004      	movs	r4, r0
 800133a:	4680      	mov	r8, r0
 800133c:	9101      	str	r1, [sp, #4]
 800133e:	0058      	lsls	r0, r3, #1
 8001340:	0fe9      	lsrs	r1, r5, #31
 8001342:	4f31      	ldr	r7, [pc, #196]	@ (8001408 <__gedf2+0xe4>)
 8001344:	0d40      	lsrs	r0, r0, #21
 8001346:	468c      	mov	ip, r1
 8001348:	006e      	lsls	r6, r5, #1
 800134a:	0319      	lsls	r1, r3, #12
 800134c:	4682      	mov	sl, r0
 800134e:	4691      	mov	r9, r2
 8001350:	0d76      	lsrs	r6, r6, #21
 8001352:	0b09      	lsrs	r1, r1, #12
 8001354:	0fd8      	lsrs	r0, r3, #31
 8001356:	42be      	cmp	r6, r7
 8001358:	d01f      	beq.n	800139a <__gedf2+0x76>
 800135a:	45ba      	cmp	sl, r7
 800135c:	d00f      	beq.n	800137e <__gedf2+0x5a>
 800135e:	2e00      	cmp	r6, #0
 8001360:	d12f      	bne.n	80013c2 <__gedf2+0x9e>
 8001362:	4655      	mov	r5, sl
 8001364:	9e01      	ldr	r6, [sp, #4]
 8001366:	4334      	orrs	r4, r6
 8001368:	2d00      	cmp	r5, #0
 800136a:	d127      	bne.n	80013bc <__gedf2+0x98>
 800136c:	430a      	orrs	r2, r1
 800136e:	d03a      	beq.n	80013e6 <__gedf2+0xc2>
 8001370:	2c00      	cmp	r4, #0
 8001372:	d145      	bne.n	8001400 <__gedf2+0xdc>
 8001374:	2800      	cmp	r0, #0
 8001376:	d11a      	bne.n	80013ae <__gedf2+0x8a>
 8001378:	2001      	movs	r0, #1
 800137a:	4240      	negs	r0, r0
 800137c:	e017      	b.n	80013ae <__gedf2+0x8a>
 800137e:	4311      	orrs	r1, r2
 8001380:	d13b      	bne.n	80013fa <__gedf2+0xd6>
 8001382:	2e00      	cmp	r6, #0
 8001384:	d102      	bne.n	800138c <__gedf2+0x68>
 8001386:	9f01      	ldr	r7, [sp, #4]
 8001388:	4327      	orrs	r7, r4
 800138a:	d0f3      	beq.n	8001374 <__gedf2+0x50>
 800138c:	4584      	cmp	ip, r0
 800138e:	d109      	bne.n	80013a4 <__gedf2+0x80>
 8001390:	4663      	mov	r3, ip
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <__gedf2+0x54>
 8001396:	4660      	mov	r0, ip
 8001398:	e009      	b.n	80013ae <__gedf2+0x8a>
 800139a:	9f01      	ldr	r7, [sp, #4]
 800139c:	4327      	orrs	r7, r4
 800139e:	d12c      	bne.n	80013fa <__gedf2+0xd6>
 80013a0:	45b2      	cmp	sl, r6
 80013a2:	d024      	beq.n	80013ee <__gedf2+0xca>
 80013a4:	4663      	mov	r3, ip
 80013a6:	2002      	movs	r0, #2
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4018      	ands	r0, r3
 80013ac:	3801      	subs	r0, #1
 80013ae:	b003      	add	sp, #12
 80013b0:	bcf0      	pop	{r4, r5, r6, r7}
 80013b2:	46bb      	mov	fp, r7
 80013b4:	46b2      	mov	sl, r6
 80013b6:	46a9      	mov	r9, r5
 80013b8:	46a0      	mov	r8, r4
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d0d9      	beq.n	8001374 <__gedf2+0x50>
 80013c0:	e7e4      	b.n	800138c <__gedf2+0x68>
 80013c2:	4654      	mov	r4, sl
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d0ed      	beq.n	80013a4 <__gedf2+0x80>
 80013c8:	4584      	cmp	ip, r0
 80013ca:	d1eb      	bne.n	80013a4 <__gedf2+0x80>
 80013cc:	4556      	cmp	r6, sl
 80013ce:	dce9      	bgt.n	80013a4 <__gedf2+0x80>
 80013d0:	dbde      	blt.n	8001390 <__gedf2+0x6c>
 80013d2:	9b01      	ldr	r3, [sp, #4]
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d8e5      	bhi.n	80013a4 <__gedf2+0x80>
 80013d8:	d1da      	bne.n	8001390 <__gedf2+0x6c>
 80013da:	45c8      	cmp	r8, r9
 80013dc:	d8e2      	bhi.n	80013a4 <__gedf2+0x80>
 80013de:	2000      	movs	r0, #0
 80013e0:	45c8      	cmp	r8, r9
 80013e2:	d2e4      	bcs.n	80013ae <__gedf2+0x8a>
 80013e4:	e7d4      	b.n	8001390 <__gedf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d0e0      	beq.n	80013ae <__gedf2+0x8a>
 80013ec:	e7da      	b.n	80013a4 <__gedf2+0x80>
 80013ee:	4311      	orrs	r1, r2
 80013f0:	d103      	bne.n	80013fa <__gedf2+0xd6>
 80013f2:	4584      	cmp	ip, r0
 80013f4:	d1d6      	bne.n	80013a4 <__gedf2+0x80>
 80013f6:	2000      	movs	r0, #0
 80013f8:	e7d9      	b.n	80013ae <__gedf2+0x8a>
 80013fa:	2002      	movs	r0, #2
 80013fc:	4240      	negs	r0, r0
 80013fe:	e7d6      	b.n	80013ae <__gedf2+0x8a>
 8001400:	4584      	cmp	ip, r0
 8001402:	d0e6      	beq.n	80013d2 <__gedf2+0xae>
 8001404:	e7ce      	b.n	80013a4 <__gedf2+0x80>
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	000007ff 	.word	0x000007ff

0800140c <__ledf2>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	4657      	mov	r7, sl
 8001410:	464e      	mov	r6, r9
 8001412:	4645      	mov	r5, r8
 8001414:	46de      	mov	lr, fp
 8001416:	b5e0      	push	{r5, r6, r7, lr}
 8001418:	000d      	movs	r5, r1
 800141a:	030f      	lsls	r7, r1, #12
 800141c:	0004      	movs	r4, r0
 800141e:	4680      	mov	r8, r0
 8001420:	0fe8      	lsrs	r0, r5, #31
 8001422:	0b39      	lsrs	r1, r7, #12
 8001424:	4684      	mov	ip, r0
 8001426:	b083      	sub	sp, #12
 8001428:	0058      	lsls	r0, r3, #1
 800142a:	4f30      	ldr	r7, [pc, #192]	@ (80014ec <__ledf2+0xe0>)
 800142c:	0d40      	lsrs	r0, r0, #21
 800142e:	9101      	str	r1, [sp, #4]
 8001430:	031e      	lsls	r6, r3, #12
 8001432:	0069      	lsls	r1, r5, #1
 8001434:	4682      	mov	sl, r0
 8001436:	4691      	mov	r9, r2
 8001438:	0d49      	lsrs	r1, r1, #21
 800143a:	0b36      	lsrs	r6, r6, #12
 800143c:	0fd8      	lsrs	r0, r3, #31
 800143e:	42b9      	cmp	r1, r7
 8001440:	d020      	beq.n	8001484 <__ledf2+0x78>
 8001442:	45ba      	cmp	sl, r7
 8001444:	d00f      	beq.n	8001466 <__ledf2+0x5a>
 8001446:	2900      	cmp	r1, #0
 8001448:	d12b      	bne.n	80014a2 <__ledf2+0x96>
 800144a:	9901      	ldr	r1, [sp, #4]
 800144c:	430c      	orrs	r4, r1
 800144e:	4651      	mov	r1, sl
 8001450:	2900      	cmp	r1, #0
 8001452:	d137      	bne.n	80014c4 <__ledf2+0xb8>
 8001454:	4332      	orrs	r2, r6
 8001456:	d038      	beq.n	80014ca <__ledf2+0xbe>
 8001458:	2c00      	cmp	r4, #0
 800145a:	d144      	bne.n	80014e6 <__ledf2+0xda>
 800145c:	2800      	cmp	r0, #0
 800145e:	d119      	bne.n	8001494 <__ledf2+0x88>
 8001460:	2001      	movs	r0, #1
 8001462:	4240      	negs	r0, r0
 8001464:	e016      	b.n	8001494 <__ledf2+0x88>
 8001466:	4316      	orrs	r6, r2
 8001468:	d113      	bne.n	8001492 <__ledf2+0x86>
 800146a:	2900      	cmp	r1, #0
 800146c:	d102      	bne.n	8001474 <__ledf2+0x68>
 800146e:	9f01      	ldr	r7, [sp, #4]
 8001470:	4327      	orrs	r7, r4
 8001472:	d0f3      	beq.n	800145c <__ledf2+0x50>
 8001474:	4584      	cmp	ip, r0
 8001476:	d020      	beq.n	80014ba <__ledf2+0xae>
 8001478:	4663      	mov	r3, ip
 800147a:	2002      	movs	r0, #2
 800147c:	3b01      	subs	r3, #1
 800147e:	4018      	ands	r0, r3
 8001480:	3801      	subs	r0, #1
 8001482:	e007      	b.n	8001494 <__ledf2+0x88>
 8001484:	9f01      	ldr	r7, [sp, #4]
 8001486:	4327      	orrs	r7, r4
 8001488:	d103      	bne.n	8001492 <__ledf2+0x86>
 800148a:	458a      	cmp	sl, r1
 800148c:	d1f4      	bne.n	8001478 <__ledf2+0x6c>
 800148e:	4316      	orrs	r6, r2
 8001490:	d01f      	beq.n	80014d2 <__ledf2+0xc6>
 8001492:	2002      	movs	r0, #2
 8001494:	b003      	add	sp, #12
 8001496:	bcf0      	pop	{r4, r5, r6, r7}
 8001498:	46bb      	mov	fp, r7
 800149a:	46b2      	mov	sl, r6
 800149c:	46a9      	mov	r9, r5
 800149e:	46a0      	mov	r8, r4
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	4654      	mov	r4, sl
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d0e7      	beq.n	8001478 <__ledf2+0x6c>
 80014a8:	4584      	cmp	ip, r0
 80014aa:	d1e5      	bne.n	8001478 <__ledf2+0x6c>
 80014ac:	4551      	cmp	r1, sl
 80014ae:	dce3      	bgt.n	8001478 <__ledf2+0x6c>
 80014b0:	db03      	blt.n	80014ba <__ledf2+0xae>
 80014b2:	9b01      	ldr	r3, [sp, #4]
 80014b4:	42b3      	cmp	r3, r6
 80014b6:	d8df      	bhi.n	8001478 <__ledf2+0x6c>
 80014b8:	d00f      	beq.n	80014da <__ledf2+0xce>
 80014ba:	4663      	mov	r3, ip
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0cf      	beq.n	8001460 <__ledf2+0x54>
 80014c0:	4660      	mov	r0, ip
 80014c2:	e7e7      	b.n	8001494 <__ledf2+0x88>
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0c9      	beq.n	800145c <__ledf2+0x50>
 80014c8:	e7d4      	b.n	8001474 <__ledf2+0x68>
 80014ca:	2000      	movs	r0, #0
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d0e1      	beq.n	8001494 <__ledf2+0x88>
 80014d0:	e7d2      	b.n	8001478 <__ledf2+0x6c>
 80014d2:	4584      	cmp	ip, r0
 80014d4:	d1d0      	bne.n	8001478 <__ledf2+0x6c>
 80014d6:	2000      	movs	r0, #0
 80014d8:	e7dc      	b.n	8001494 <__ledf2+0x88>
 80014da:	45c8      	cmp	r8, r9
 80014dc:	d8cc      	bhi.n	8001478 <__ledf2+0x6c>
 80014de:	2000      	movs	r0, #0
 80014e0:	45c8      	cmp	r8, r9
 80014e2:	d2d7      	bcs.n	8001494 <__ledf2+0x88>
 80014e4:	e7e9      	b.n	80014ba <__ledf2+0xae>
 80014e6:	4584      	cmp	ip, r0
 80014e8:	d0e3      	beq.n	80014b2 <__ledf2+0xa6>
 80014ea:	e7c5      	b.n	8001478 <__ledf2+0x6c>
 80014ec:	000007ff 	.word	0x000007ff

080014f0 <Flash_Storage_CalculateChecksum>:
    memset(current_settings.reserved, 0, sizeof(current_settings.reserved));
    current_settings.checksum = Flash_Storage_CalculateChecksum(&current_settings);
}

uint32_t Flash_Storage_CalculateChecksum(flash_settings_t* settings)
{
 80014f0:	0003      	movs	r3, r0
    uint32_t checksum = 0;
    uint32_t* data = (uint32_t*)settings;

    // Calculate checksum of all data except the checksum field itself
    for(int i = 0; i < (sizeof(flash_settings_t) - sizeof(uint32_t)) / sizeof(uint32_t); i++) {
        checksum ^= data[i];
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	6800      	ldr	r0, [r0, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4050      	eors	r0, r2
 80014fa:	4058      	eors	r0, r3
    }

    return checksum;
}
 80014fc:	4770      	bx	lr
	...

08001500 <Flash_Storage_Init>:
{
 8001500:	b510      	push	{r4, lr}
    current_settings.magic = FLASH_STORAGE_MAGIC;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <Flash_Storage_Init+0x24>)
 8001504:	4c08      	ldr	r4, [pc, #32]	@ (8001528 <Flash_Storage_Init+0x28>)
    memset(current_settings.reserved, 0, sizeof(current_settings.reserved));
 8001506:	2206      	movs	r2, #6
    current_settings.magic = FLASH_STORAGE_MAGIC;
 8001508:	6023      	str	r3, [r4, #0]
    current_settings.mode = MODE_STATIC_LOGO;
 800150a:	2380      	movs	r3, #128	@ 0x80
    memset(current_settings.reserved, 0, sizeof(current_settings.reserved));
 800150c:	2100      	movs	r1, #0
    current_settings.mode = MODE_STATIC_LOGO;
 800150e:	009b      	lsls	r3, r3, #2
    memset(current_settings.reserved, 0, sizeof(current_settings.reserved));
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <Flash_Storage_Init+0x2c>)
    current_settings.mode = MODE_STATIC_LOGO;
 8001512:	80a3      	strh	r3, [r4, #4]
    memset(current_settings.reserved, 0, sizeof(current_settings.reserved));
 8001514:	f002 fa2c 	bl	8003970 <memset>
    current_settings.checksum = Flash_Storage_CalculateChecksum(&current_settings);
 8001518:	0020      	movs	r0, r4
 800151a:	f7ff ffe9 	bl	80014f0 <Flash_Storage_CalculateChecksum>
 800151e:	60e0      	str	r0, [r4, #12]
}
 8001520:	bd10      	pop	{r4, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	deadbeef 	.word	0xdeadbeef
 8001528:	20000034 	.word	0x20000034
 800152c:	2000003a 	.word	0x2000003a

08001530 <Flash_Storage_ReadMode>:

effect_mode_t Flash_Storage_ReadMode(void)
{
 8001530:	b570      	push	{r4, r5, r6, lr}
    flash_settings_t* stored_settings = (flash_settings_t*)FLASH_STORAGE_PAGE_ADDR;

    // Check if flash contains valid data
    if(stored_settings->magic == FLASH_STORAGE_MAGIC) {
 8001532:	4d09      	ldr	r5, [pc, #36]	@ (8001558 <Flash_Storage_ReadMode+0x28>)
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <Flash_Storage_ReadMode+0x2c>)
 8001536:	682a      	ldr	r2, [r5, #0]
            }
        }
    }

    // Return default if data is invalid
    return MODE_STATIC_LOGO;
 8001538:	2400      	movs	r4, #0
    if(stored_settings->magic == FLASH_STORAGE_MAGIC) {
 800153a:	429a      	cmp	r2, r3
 800153c:	d109      	bne.n	8001552 <Flash_Storage_ReadMode+0x22>
        uint32_t calculated_checksum = Flash_Storage_CalculateChecksum(stored_settings);
 800153e:	0028      	movs	r0, r5
 8001540:	f7ff ffd6 	bl	80014f0 <Flash_Storage_CalculateChecksum>
        if(calculated_checksum == stored_settings->checksum) {
 8001544:	68eb      	ldr	r3, [r5, #12]
 8001546:	4283      	cmp	r3, r0
 8001548:	d103      	bne.n	8001552 <Flash_Storage_ReadMode+0x22>
            if(stored_settings->mode < MODE_COUNT) {
 800154a:	792c      	ldrb	r4, [r5, #4]
 800154c:	2c0a      	cmp	r4, #10
 800154e:	d900      	bls.n	8001552 <Flash_Storage_ReadMode+0x22>
    return MODE_STATIC_LOGO;
 8001550:	2400      	movs	r4, #0
}
 8001552:	0020      	movs	r0, r4
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	08003c00 	.word	0x08003c00
 800155c:	deadbeef 	.word	0xdeadbeef

08001560 <Flash_Storage_ReadBrightnessLevel>:

uint8_t Flash_Storage_ReadBrightnessLevel(void)
{
 8001560:	b570      	push	{r4, r5, r6, lr}
    flash_settings_t* stored_settings = (flash_settings_t*)FLASH_STORAGE_PAGE_ADDR;

    // Check if flash contains valid data
    if(stored_settings->magic == FLASH_STORAGE_MAGIC) {
 8001562:	4d09      	ldr	r5, [pc, #36]	@ (8001588 <Flash_Storage_ReadBrightnessLevel+0x28>)
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <Flash_Storage_ReadBrightnessLevel+0x2c>)
 8001566:	682a      	ldr	r2, [r5, #0]
            }
        }
    }

    // Return default if data is invalid
    return 2; // Medium brightness
 8001568:	2402      	movs	r4, #2
    if(stored_settings->magic == FLASH_STORAGE_MAGIC) {
 800156a:	429a      	cmp	r2, r3
 800156c:	d109      	bne.n	8001582 <Flash_Storage_ReadBrightnessLevel+0x22>
        uint32_t calculated_checksum = Flash_Storage_CalculateChecksum(stored_settings);
 800156e:	0028      	movs	r0, r5
 8001570:	f7ff ffbe 	bl	80014f0 <Flash_Storage_CalculateChecksum>
        if(calculated_checksum == stored_settings->checksum) {
 8001574:	68eb      	ldr	r3, [r5, #12]
 8001576:	4283      	cmp	r3, r0
 8001578:	d103      	bne.n	8001582 <Flash_Storage_ReadBrightnessLevel+0x22>
            if(stored_settings->brightnessLevel < 5) { // 0-4 are valid
 800157a:	796c      	ldrb	r4, [r5, #5]
 800157c:	2c04      	cmp	r4, #4
 800157e:	d900      	bls.n	8001582 <Flash_Storage_ReadBrightnessLevel+0x22>
    return 2; // Medium brightness
 8001580:	2402      	movs	r4, #2
}
 8001582:	0020      	movs	r0, r4
 8001584:	bd70      	pop	{r4, r5, r6, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	08003c00 	.word	0x08003c00
 800158c:	deadbeef 	.word	0xdeadbeef

08001590 <Flash_Storage_SaveSettings>:

HAL_StatusTypeDef Flash_Storage_SaveSettings(effect_mode_t mode, uint8_t brightnessLevel)
{
 8001590:	b530      	push	{r4, r5, lr}
    HAL_StatusTypeDef status = HAL_OK;

    // Prepare settings structure
    current_settings.magic = FLASH_STORAGE_MAGIC;
 8001592:	4c15      	ldr	r4, [pc, #84]	@ (80015e8 <Flash_Storage_SaveSettings+0x58>)
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <Flash_Storage_SaveSettings+0x5c>)
{
 8001596:	b085      	sub	sp, #20
    current_settings.mode = mode;
 8001598:	7120      	strb	r0, [r4, #4]
    current_settings.brightnessLevel = brightnessLevel;
    current_settings.checksum = Flash_Storage_CalculateChecksum(&current_settings);
 800159a:	0020      	movs	r0, r4
    current_settings.magic = FLASH_STORAGE_MAGIC;
 800159c:	6023      	str	r3, [r4, #0]
    current_settings.brightnessLevel = brightnessLevel;
 800159e:	7161      	strb	r1, [r4, #5]
    current_settings.checksum = Flash_Storage_CalculateChecksum(&current_settings);
 80015a0:	f7ff ffa6 	bl	80014f0 <Flash_Storage_CalculateChecksum>
 80015a4:	60e0      	str	r0, [r4, #12]

    // Unlock flash for writing
    HAL_FLASH_Unlock();
 80015a6:	f001 f85b 	bl	8002660 <HAL_FLASH_Unlock>

    // Erase the page first
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error = 0;
 80015aa:	2300      	movs	r3, #0

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
    erase_init.PageAddress = FLASH_STORAGE_PAGE_ADDR;
 80015ac:	4d10      	ldr	r5, [pc, #64]	@ (80015f0 <Flash_Storage_SaveSettings+0x60>)
    uint32_t page_error = 0;
 80015ae:	9300      	str	r3, [sp, #0]
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80015b0:	9301      	str	r3, [sp, #4]
    erase_init.NbPages = 1;

    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80015b2:	4669      	mov	r1, sp
    erase_init.NbPages = 1;
 80015b4:	3301      	adds	r3, #1
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80015b6:	a801      	add	r0, sp, #4
    erase_init.PageAddress = FLASH_STORAGE_PAGE_ADDR;
 80015b8:	9502      	str	r5, [sp, #8]
    erase_init.NbPages = 1;
 80015ba:	9303      	str	r3, [sp, #12]
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80015bc:	f001 f902 	bl	80027c4 <HAL_FLASHEx_Erase>
 80015c0:	1e04      	subs	r4, r0, #0

    if(status == HAL_OK) {
 80015c2:	d10c      	bne.n	80015de <Flash_Storage_SaveSettings+0x4e>
        // Write the settings structure word by word
        uint32_t* data = (uint32_t*)&current_settings;
        uint32_t address = FLASH_STORAGE_PAGE_ADDR;

        for(int i = 0; i < sizeof(flash_settings_t) / sizeof(uint32_t); i++) {
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <Flash_Storage_SaveSettings+0x64>)
 80015c6:	0029      	movs	r1, r5
 80015c8:	595a      	ldr	r2, [r3, r5]
 80015ca:	2002      	movs	r0, #2
 80015cc:	2300      	movs	r3, #0
 80015ce:	f001 f88f 	bl	80026f0 <HAL_FLASH_Program>
 80015d2:	1e04      	subs	r4, r0, #0
            if(status != HAL_OK) {
 80015d4:	d103      	bne.n	80015de <Flash_Storage_SaveSettings+0x4e>
        for(int i = 0; i < sizeof(flash_settings_t) / sizeof(uint32_t); i++) {
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <Flash_Storage_SaveSettings+0x68>)
                break;
            }
            address += sizeof(uint32_t);
 80015d8:	3504      	adds	r5, #4
        for(int i = 0; i < sizeof(flash_settings_t) / sizeof(uint32_t); i++) {
 80015da:	429d      	cmp	r5, r3
 80015dc:	d1f2      	bne.n	80015c4 <Flash_Storage_SaveSettings+0x34>
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 80015de:	f001 f853 	bl	8002688 <HAL_FLASH_Lock>

    return status;
}
 80015e2:	0020      	movs	r0, r4
 80015e4:	b005      	add	sp, #20
 80015e6:	bd30      	pop	{r4, r5, pc}
 80015e8:	20000034 	.word	0x20000034
 80015ec:	deadbeef 	.word	0xdeadbeef
 80015f0:	08003c00 	.word	0x08003c00
 80015f4:	17ffc434 	.word	0x17ffc434
 80015f8:	08003c10 	.word	0x08003c10

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fe:	2610      	movs	r6, #16
{
 8001600:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	222c      	movs	r2, #44	@ 0x2c
 8001604:	2100      	movs	r1, #0
 8001606:	a805      	add	r0, sp, #20
 8001608:	f002 f9b2 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	0032      	movs	r2, r6
 800160e:	2100      	movs	r1, #0
 8001610:	4668      	mov	r0, sp
 8001612:	f002 f9ad 	bl	8003970 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001616:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800161c:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001620:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001628:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162a:	f001 f9d3 	bl	80029d4 <HAL_RCC_OscConfig>
 800162e:	2800      	cmp	r0, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800163c:	0029      	movs	r1, r5
 800163e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001642:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001644:	f001 fbea 	bl	8002e1c <HAL_RCC_ClockConfig>
 8001648:	2800      	cmp	r0, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x54>
 800164c:	b672      	cpsid	i
  while (1)
 800164e:	e7fe      	b.n	800164e <SystemClock_Config+0x52>
}
 8001650:	b010      	add	sp, #64	@ 0x40
 8001652:	bd70      	pop	{r4, r5, r6, pc}

08001654 <HandleButtonPress>:
    uint8_t buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001654:	2090      	movs	r0, #144	@ 0x90
{
 8001656:	b570      	push	{r4, r5, r6, lr}
    uint8_t buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001658:	2101      	movs	r1, #1
 800165a:	05c0      	lsls	r0, r0, #23
 800165c:	f001 f9b4 	bl	80029c8 <HAL_GPIO_ReadPin>
 8001660:	0005      	movs	r5, r0
    uint32_t currentTime = HAL_GetTick();
 8001662:	f000 fe9f 	bl	80023a4 <HAL_GetTick>
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HandleButtonPress+0x9c>)
 8001668:	0004      	movs	r4, r0
    if (buttonState == GPIO_PIN_SET && buttonReleased) {
 800166a:	7813      	ldrb	r3, [r2, #0]
 800166c:	2d01      	cmp	r5, #1
 800166e:	d10c      	bne.n	800168a <HandleButtonPress+0x36>
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HandleButtonPress+0x34>
        if (currentTime - lastButtonPress > 50) { // 50ms debounce
 8001674:	491f      	ldr	r1, [pc, #124]	@ (80016f4 <HandleButtonPress+0xa0>)
 8001676:	680b      	ldr	r3, [r1, #0]
 8001678:	1ac3      	subs	r3, r0, r3
 800167a:	2b32      	cmp	r3, #50	@ 0x32
 800167c:	d904      	bls.n	8001688 <HandleButtonPress+0x34>
            buttonReleased = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	7013      	strb	r3, [r2, #0]
            buttonPressStartTime = currentTime;
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HandleButtonPress+0xa4>)
            lastButtonPress = currentTime;
 8001684:	6008      	str	r0, [r1, #0]
            buttonPressStartTime = currentTime;
 8001686:	6018      	str	r0, [r3, #0]
}
 8001688:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonState == GPIO_PIN_RESET && !buttonReleased) {
 800168a:	431d      	orrs	r5, r3
 800168c:	b2ed      	uxtb	r5, r5
 800168e:	2d00      	cmp	r5, #0
 8001690:	d1fa      	bne.n	8001688 <HandleButtonPress+0x34>
        buttonReleased = 1;
 8001692:	2101      	movs	r1, #1
 8001694:	7011      	strb	r1, [r2, #0]
        if (pressDuration >= LONG_PRESS_TIME_MS) {
 8001696:	21fa      	movs	r1, #250	@ 0xfa
        uint32_t pressDuration = currentTime - buttonPressStartTime;
 8001698:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HandleButtonPress+0xa4>)
        if (pressDuration >= LONG_PRESS_TIME_MS) {
 800169a:	0089      	lsls	r1, r1, #2
        uint32_t pressDuration = currentTime - buttonPressStartTime;
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	1a82      	subs	r2, r0, r2
        if (pressDuration >= LONG_PRESS_TIME_MS) {
 80016a0:	428a      	cmp	r2, r1
 80016a2:	d319      	bcc.n	80016d8 <HandleButtonPress+0x84>
            brightnessLevel++;
 80016a4:	4915      	ldr	r1, [pc, #84]	@ (80016fc <HandleButtonPress+0xa8>)
 80016a6:	780a      	ldrb	r2, [r1, #0]
 80016a8:	3201      	adds	r2, #1
 80016aa:	b2d2      	uxtb	r2, r2
            if (brightnessLevel >= BRIGHTNESS_LEVELS) {
 80016ac:	2a04      	cmp	r2, #4
 80016ae:	d800      	bhi.n	80016b2 <HandleButtonPress+0x5e>
 80016b0:	0015      	movs	r5, r2
            baseBrightness = brightnessLevels[brightnessLevel];
 80016b2:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <HandleButtonPress+0xac>)
            brightnessLevel++;
 80016b4:	700d      	strb	r5, [r1, #0]
            baseBrightness = brightnessLevels[brightnessLevel];
 80016b6:	5d53      	ldrb	r3, [r2, r5]
 80016b8:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <HandleButtonPress+0xb0>)
 80016ba:	7013      	strb	r3, [r2, #0]
            globalBrightness = baseBrightness;
 80016bc:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <HandleButtonPress+0xb4>)
 80016be:	7013      	strb	r3, [r2, #0]
            if (currentMode == MODE_STATIC_LOGO) {
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HandleButtonPress+0xb8>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HandleButtonPress+0x78>
                WS2812B_TriggerStaticLogoUpdate();
 80016c8:	f000 fd76 	bl	80021b8 <WS2812B_TriggerStaticLogoUpdate>
            modePendingSave = 1;
 80016cc:	2201      	movs	r2, #1
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HandleButtonPress+0xbc>)
 80016d0:	701a      	strb	r2, [r3, #0]
            lastModeChange = currentTime;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HandleButtonPress+0xc0>)
 80016d4:	601c      	str	r4, [r3, #0]
}
 80016d6:	e7d7      	b.n	8001688 <HandleButtonPress+0x34>
        } else if (pressDuration >= 200) {
 80016d8:	2ac7      	cmp	r2, #199	@ 0xc7
 80016da:	d9d5      	bls.n	8001688 <HandleButtonPress+0x34>
            currentMode++;
 80016dc:	490b      	ldr	r1, [pc, #44]	@ (800170c <HandleButtonPress+0xb8>)
 80016de:	780a      	ldrb	r2, [r1, #0]
 80016e0:	3201      	adds	r2, #1
 80016e2:	b2d2      	uxtb	r2, r2
            if (currentMode >= MODE_COUNT) {
 80016e4:	2a0a      	cmp	r2, #10
 80016e6:	d800      	bhi.n	80016ea <HandleButtonPress+0x96>
 80016e8:	0015      	movs	r5, r2
            currentMode++;
 80016ea:	700d      	strb	r5, [r1, #0]
 80016ec:	e7ee      	b.n	80016cc <HandleButtonPress+0x78>
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	20000002 	.word	0x20000002
 80016f4:	20000050 	.word	0x20000050
 80016f8:	20000048 	.word	0x20000048
 80016fc:	20000001 	.word	0x20000001
 8001700:	080039e0 	.word	0x080039e0
 8001704:	20000000 	.word	0x20000000
 8001708:	20000012 	.word	0x20000012
 800170c:	20000054 	.word	0x20000054
 8001710:	20000044 	.word	0x20000044
 8001714:	2000004c 	.word	0x2000004c

08001718 <HandleFlashSave>:
{
 8001718:	b510      	push	{r4, lr}
    if (modePendingSave) {
 800171a:	4c0b      	ldr	r4, [pc, #44]	@ (8001748 <HandleFlashSave+0x30>)
 800171c:	7823      	ldrb	r3, [r4, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d011      	beq.n	8001746 <HandleFlashSave+0x2e>
        uint32_t currentTime = HAL_GetTick();
 8001722:	f000 fe3f 	bl	80023a4 <HAL_GetTick>
        if (currentTime - lastModeChange > SAVE_DELAY_MS) {
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HandleFlashSave+0x34>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ac0      	subs	r0, r0, r3
 800172c:	23fa      	movs	r3, #250	@ 0xfa
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4298      	cmp	r0, r3
 8001732:	d908      	bls.n	8001746 <HandleFlashSave+0x2e>
            if (Flash_Storage_SaveSettings(currentMode, brightnessLevel) == HAL_OK) {
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HandleFlashSave+0x38>)
 8001736:	7819      	ldrb	r1, [r3, #0]
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HandleFlashSave+0x3c>)
 800173a:	7818      	ldrb	r0, [r3, #0]
 800173c:	f7ff ff28 	bl	8001590 <Flash_Storage_SaveSettings>
 8001740:	2800      	cmp	r0, #0
 8001742:	d100      	bne.n	8001746 <HandleFlashSave+0x2e>
                modePendingSave = 0;  // Clear the pending save flag
 8001744:	7020      	strb	r0, [r4, #0]
}
 8001746:	bd10      	pop	{r4, pc}
 8001748:	20000044 	.word	0x20000044
 800174c:	2000004c 	.word	0x2000004c
 8001750:	20000001 	.word	0x20000001
 8001754:	20000054 	.word	0x20000054

08001758 <main>:
{
 8001758:	b530      	push	{r4, r5, lr}
 800175a:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 800175c:	f000 fe06 	bl	800236c <HAL_Init>
  SystemClock_Config();
 8001760:	f7ff ff4c 	bl	80015fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	2210      	movs	r2, #16
 8001766:	2100      	movs	r1, #0
 8001768:	a80a      	add	r0, sp, #40	@ 0x28
 800176a:	f002 f901 	bl	8003970 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2280      	movs	r2, #128	@ 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001772:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4c46      	ldr	r4, [pc, #280]	@ (8001890 <main+0x138>)
 8001776:	0292      	lsls	r2, r2, #10
 8001778:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4313      	orrs	r3, r2
 800177e:	6163      	str	r3, [r4, #20]
 8001780:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4013      	ands	r3, r2
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800178a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f001 f864 	bl	8002858 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001794:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001796:	432b      	orrs	r3, r5
 8001798:	6163      	str	r3, [r4, #20]
 800179a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800179c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	402b      	ands	r3, r5
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80017a4:	f000 fe16 	bl	80023d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80017a8:	200b      	movs	r0, #11
 80017aa:	f000 fe3d 	bl	8002428 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	2210      	movs	r2, #16
 80017b0:	2100      	movs	r1, #0
 80017b2:	a805      	add	r0, sp, #20
 80017b4:	f002 f8dc 	bl	8003970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	2208      	movs	r2, #8
 80017ba:	2100      	movs	r1, #0
 80017bc:	a803      	add	r0, sp, #12
 80017be:	f002 f8d7 	bl	8003970 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	221c      	movs	r2, #28
 80017c4:	2100      	movs	r1, #0
 80017c6:	a809      	add	r0, sp, #36	@ 0x24
 80017c8:	f002 f8d2 	bl	8003970 <memset>
  htim3.Instance = TIM3;
 80017cc:	4c31      	ldr	r4, [pc, #196]	@ (8001894 <main+0x13c>)
 80017ce:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <main+0x140>)
  htim3.Init.Period = 59;
 80017d0:	223b      	movs	r2, #59	@ 0x3b
  htim3.Instance = TIM3;
 80017d2:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 0;
 80017d4:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d6:	0020      	movs	r0, r4
  htim3.Init.Prescaler = 0;
 80017d8:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017de:	3380      	adds	r3, #128	@ 0x80
  htim3.Init.Period = 59;
 80017e0:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e4:	f001 fdba 	bl	800335c <HAL_TIM_Base_Init>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d001      	beq.n	80017f0 <main+0x98>
 80017ec:	b672      	cpsid	i
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f2:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f6:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fa:	f001 fea7 	bl	800354c <HAL_TIM_ConfigClockSource>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d001      	beq.n	8001806 <main+0xae>
 8001802:	b672      	cpsid	i
  while (1)
 8001804:	e7fe      	b.n	8001804 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001806:	0020      	movs	r0, r4
 8001808:	f001 fdd0 	bl	80033ac <HAL_TIM_PWM_Init>
 800180c:	2800      	cmp	r0, #0
 800180e:	d001      	beq.n	8001814 <main+0xbc>
 8001810:	b672      	cpsid	i
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0xba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	a903      	add	r1, sp, #12
 800181a:	0020      	movs	r0, r4
 800181c:	f002 f87e 	bl	800391c <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	1e02      	subs	r2, r0, #0
 8001822:	d001      	beq.n	8001828 <main+0xd0>
 8001824:	b672      	cpsid	i
  while (1)
 8001826:	e7fe      	b.n	8001826 <main+0xce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001828:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 800182a:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	a909      	add	r1, sp, #36	@ 0x24
 8001832:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001836:	f001 fe1d 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 800183a:	2800      	cmp	r0, #0
 800183c:	d001      	beq.n	8001842 <main+0xea>
 800183e:	b672      	cpsid	i
  while (1)
 8001840:	e7fe      	b.n	8001840 <main+0xe8>
  HAL_TIM_MspPostInit(&htim3);
 8001842:	0020      	movs	r0, r4
 8001844:	f000 f892 	bl	800196c <HAL_TIM_MspPostInit>
  HAL_Delay(100);
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f000 fdb1 	bl	80023b0 <HAL_Delay>
  Flash_Storage_Init();
 800184e:	f7ff fe57 	bl	8001500 <Flash_Storage_Init>
  currentMode = Flash_Storage_ReadMode();
 8001852:	f7ff fe6d 	bl	8001530 <Flash_Storage_ReadMode>
 8001856:	4c11      	ldr	r4, [pc, #68]	@ (800189c <main+0x144>)
 8001858:	7020      	strb	r0, [r4, #0]
  brightnessLevel = Flash_Storage_ReadBrightnessLevel();
 800185a:	f7ff fe81 	bl	8001560 <Flash_Storage_ReadBrightnessLevel>
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <main+0x148>)
  baseBrightness = brightnessLevels[brightnessLevel];
 8001860:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <main+0x14c>)
  brightnessLevel = Flash_Storage_ReadBrightnessLevel();
 8001862:	7018      	strb	r0, [r3, #0]
  baseBrightness = brightnessLevels[brightnessLevel];
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <main+0x150>)
 8001866:	5c1b      	ldrb	r3, [r3, r0]
 8001868:	7013      	strb	r3, [r2, #0]
  globalBrightness = baseBrightness;
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <main+0x154>)
 800186c:	7013      	strb	r3, [r2, #0]
  WS2812B_Init();
 800186e:	f000 f98f 	bl	8001b90 <WS2812B_Init>
  WS2812B_RunEffect(currentMode);
 8001872:	7820      	ldrb	r0, [r4, #0]
 8001874:	f000 fcf0 	bl	8002258 <WS2812B_RunEffect>
    HandleButtonPress();
 8001878:	f7ff feec 	bl	8001654 <HandleButtonPress>
    HandleFlashSave();      // Check if we need to save settings
 800187c:	f7ff ff4c 	bl	8001718 <HandleFlashSave>
    WS2812B_RunEffect(currentMode);
 8001880:	7820      	ldrb	r0, [r4, #0]
 8001882:	f000 fce9 	bl	8002258 <WS2812B_RunEffect>
    HAL_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fd92 	bl	80023b0 <HAL_Delay>
  while (1)
 800188c:	e7f4      	b.n	8001878 <main+0x120>
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	2000009c 	.word	0x2000009c
 8001898:	40000400 	.word	0x40000400
 800189c:	20000054 	.word	0x20000054
 80018a0:	20000001 	.word	0x20000001
 80018a4:	20000000 	.word	0x20000000
 80018a8:	080039e0 	.word	0x080039e0
 80018ac:	20000012 	.word	0x20000012

080018b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  if (htim->Instance == TIM3) {
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_TIM_PWM_PulseFinishedCallback+0x10>)
 80018b2:	6802      	ldr	r2, [r0, #0]
{
 80018b4:	b510      	push	{r4, lr}
  if (htim->Instance == TIM3) {
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d101      	bne.n	80018be <HAL_TIM_PWM_PulseFinishedCallback+0xe>
    WS2812B_TIM_DMADelayPulseFinished();
 80018ba:	f000 f937 	bl	8001b2c <WS2812B_TIM_DMADelayPulseFinished>
}
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	40000400 	.word	0x40000400

080018c4 <Error_Handler>:
 80018c4:	b672      	cpsid	i
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <Error_Handler+0x2>

080018c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	2101      	movs	r1, #1
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_MspInit+0x2c>)
{
 80018cc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	9200      	str	r2, [sp, #0]
 80018dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	0549      	lsls	r1, r1, #21
 80018e2:	430a      	orrs	r2, r1
 80018e4:	61da      	str	r2, [r3, #28]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	400b      	ands	r3, r1
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	b002      	add	sp, #8
 80018f0:	4770      	bx	lr
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_base->Instance==TIM3)
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_TIM_Base_MspInit+0x64>)
 80018fc:	6802      	ldr	r2, [r0, #0]
{
 80018fe:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM3)
 8001900:	429a      	cmp	r2, r3
 8001902:	d12a      	bne.n	800195a <HAL_TIM_Base_MspInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001904:	2102      	movs	r1, #2
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_TIM_Base_MspInit+0x68>)

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8001908:	4c16      	ldr	r4, [pc, #88]	@ (8001964 <HAL_TIM_Base_MspInit+0x6c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800190a:	69da      	ldr	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800190c:	0020      	movs	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800190e:	430a      	orrs	r2, r1
 8001910:	61da      	str	r2, [r3, #28]
 8001912:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001914:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001916:	400b      	ands	r3, r1
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_TIM_Base_MspInit+0x70>)
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	60e2      	str	r2, [r4, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8001920:	6023      	str	r3, [r4, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001922:	2310      	movs	r3, #16
 8001924:	6063      	str	r3, [r4, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60a3      	str	r3, [r4, #8]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192a:	6163      	str	r3, [r4, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800192c:	61a3      	str	r3, [r4, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800192e:	2380      	movs	r3, #128	@ 0x80
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001930:	1892      	adds	r2, r2, r2
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001932:	019b      	lsls	r3, r3, #6
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001934:	6122      	str	r2, [r4, #16]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001936:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001938:	f000 fd9c 	bl	8002474 <HAL_DMA_Init>
 800193c:	2800      	cmp	r0, #0
 800193e:	d001      	beq.n	8001944 <HAL_TIM_Base_MspInit+0x4c>
    {
      Error_Handler();
 8001940:	f7ff ffc0 	bl	80018c4 <Error_Handler>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2010      	movs	r0, #16
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001948:	626c      	str	r4, [r5, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800194a:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800194c:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800194e:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001950:	f000 fd40 	bl	80023d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001954:	2010      	movs	r0, #16
 8001956:	f000 fd67 	bl	8002428 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800195a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800195c:	40000400 	.word	0x40000400
 8001960:	40021000 	.word	0x40021000
 8001964:	20000058 	.word	0x20000058
 8001968:	40020044 	.word	0x40020044

0800196c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800196c:	b510      	push	{r4, lr}
 800196e:	0004      	movs	r4, r0
 8001970:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	2214      	movs	r2, #20
 8001974:	2100      	movs	r1, #0
 8001976:	a801      	add	r0, sp, #4
 8001978:	f001 fffa 	bl	8003970 <memset>
  if(htim->Instance==TIM3)
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_TIM_MspPostInit+0x48>)
 800197e:	6822      	ldr	r2, [r4, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d114      	bne.n	80019ae <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <HAL_TIM_MspPostInit+0x4c>)
 8001988:	0289      	lsls	r1, r1, #10
 800198a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	430a      	orrs	r2, r1
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	400b      	ands	r3, r1
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199c:	2340      	movs	r3, #64	@ 0x40
 800199e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	3b3e      	subs	r3, #62	@ 0x3e
 80019a2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80019a6:	3b01      	subs	r3, #1
 80019a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f000 ff55 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ae:	b006      	add	sp, #24
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40021000 	.word	0x40021000

080019bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler>

080019be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler>

080019c0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 fce1 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bd10      	pop	{r4, pc}

080019cc <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80019cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80019ce:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA1_Channel4_5_IRQHandler+0xc>)
 80019d0:	f000 fddf 	bl	8002592 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80019d4:	bd10      	pop	{r4, pc}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	20000058 	.word	0x20000058

080019dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019de:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM3_IRQHandler+0xc>)
 80019e0:	f001 fbaa 	bl	8003138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	2000009c 	.word	0x2000009c

080019ec <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019ec:	4770      	bx	lr
	...

080019f0 <WS2812B_Color>:
    globalBrightness = baseBrightness;
    WS2812B_SetLogoColors();
}

uint32_t WS2812B_Color(uint8_t r, uint8_t g, uint8_t b)
{
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    r = (r * globalBrightness) / 255;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <WS2812B_Color+0x34>)
{
 80019f4:	0007      	movs	r7, r0
    r = (r * globalBrightness) / 255;
 80019f6:	781d      	ldrb	r5, [r3, #0]
{
 80019f8:	0016      	movs	r6, r2
    g = (g * globalBrightness) / 255;
 80019fa:	4369      	muls	r1, r5
 80019fc:	0008      	movs	r0, r1
 80019fe:	21ff      	movs	r1, #255	@ 0xff
 8001a00:	f7fe fc16 	bl	8000230 <__divsi3>
    b = (b * globalBrightness) / 255;
    return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8001a04:	0204      	lsls	r4, r0, #8
    b = (b * globalBrightness) / 255;
 8001a06:	0030      	movs	r0, r6
 8001a08:	21ff      	movs	r1, #255	@ 0xff
 8001a0a:	4368      	muls	r0, r5
 8001a0c:	f7fe fc10 	bl	8000230 <__divsi3>
    return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8001a10:	4304      	orrs	r4, r0
    r = (r * globalBrightness) / 255;
 8001a12:	0028      	movs	r0, r5
 8001a14:	21ff      	movs	r1, #255	@ 0xff
 8001a16:	4378      	muls	r0, r7
 8001a18:	f7fe fc0a 	bl	8000230 <__divsi3>
    return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8001a1c:	0400      	lsls	r0, r0, #16
 8001a1e:	4320      	orrs	r0, r4
}
 8001a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	20000012 	.word	0x20000012

08001a28 <WS2812B_PrepareBuffer>:

void WS2812B_PrepareBuffer(void)
{
    uint16_t bufferIndex = 0;

    for (uint16_t i = 0; i < LED_COUNT; i++) {
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <WS2812B_PrepareBuffer+0xa8>)
{
 8001a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a2c:	469c      	mov	ip, r3
    uint16_t bufferIndex = 0;
 8001a2e:	2300      	movs	r3, #0
        uint32_t color = currentColors[i];
 8001a30:	4662      	mov	r2, ip
 8001a32:	6812      	ldr	r2, [r2, #0]
        uint8_t green = (color >> 8) & 0xFF;
        uint8_t red = (color >> 16) & 0xFF;
 8001a34:	2100      	movs	r1, #0
        uint8_t green = (color >> 8) & 0xFF;
 8001a36:	0a15      	lsrs	r5, r2, #8
        uint32_t color = currentColors[i];
 8001a38:	9200      	str	r2, [sp, #0]
        uint8_t red = (color >> 16) & 0xFF;
 8001a3a:	0c16      	lsrs	r6, r2, #16
        uint8_t blue = color & 0xFF;

        for (int8_t bit = 7; bit >= 0; bit--) {
            ledBuffer[bufferIndex++] = (green & (1 << bit)) ? WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
 8001a3c:	22ff      	movs	r2, #255	@ 0xff
 8001a3e:	4015      	ands	r5, r2
 8001a40:	2207      	movs	r2, #7
 8001a42:	002f      	movs	r7, r5
 8001a44:	1a50      	subs	r0, r2, r1
 8001a46:	4107      	asrs	r7, r0
 8001a48:	0038      	movs	r0, r7
 8001a4a:	185c      	adds	r4, r3, r1
 8001a4c:	3a06      	subs	r2, #6
 8001a4e:	2713      	movs	r7, #19
 8001a50:	b2a4      	uxth	r4, r4
 8001a52:	4210      	tst	r0, r2
 8001a54:	d000      	beq.n	8001a58 <WS2812B_PrepareBuffer+0x30>
 8001a56:	19ff      	adds	r7, r7, r7
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <WS2812B_PrepareBuffer+0xac>)
        for (int8_t bit = 7; bit >= 0; bit--) {
 8001a5a:	3101      	adds	r1, #1
            ledBuffer[bufferIndex++] = (green & (1 << bit)) ? WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
 8001a5c:	9201      	str	r2, [sp, #4]
 8001a5e:	5517      	strb	r7, [r2, r4]
        for (int8_t bit = 7; bit >= 0; bit--) {
 8001a60:	2908      	cmp	r1, #8
 8001a62:	d1ed      	bne.n	8001a40 <WS2812B_PrepareBuffer+0x18>
 8001a64:	001d      	movs	r5, r3
        }
        for (int8_t bit = 7; bit >= 0; bit--) {
            ledBuffer[bufferIndex++] = (red & (1 << bit)) ? WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
 8001a66:	22ff      	movs	r2, #255	@ 0xff
 8001a68:	350f      	adds	r5, #15
 8001a6a:	3901      	subs	r1, #1
 8001a6c:	b2ad      	uxth	r5, r5
 8001a6e:	4016      	ands	r6, r2
 8001a70:	0032      	movs	r2, r6
 8001a72:	2001      	movs	r0, #1
 8001a74:	410a      	asrs	r2, r1
 8001a76:	1a6c      	subs	r4, r5, r1
 8001a78:	2713      	movs	r7, #19
 8001a7a:	b2a4      	uxth	r4, r4
 8001a7c:	4202      	tst	r2, r0
 8001a7e:	d000      	beq.n	8001a82 <WS2812B_PrepareBuffer+0x5a>
 8001a80:	19ff      	adds	r7, r7, r7
 8001a82:	9a01      	ldr	r2, [sp, #4]
 8001a84:	5517      	strb	r7, [r2, r4]
        for (int8_t bit = 7; bit >= 0; bit--) {
 8001a86:	3901      	subs	r1, #1
 8001a88:	d2f2      	bcs.n	8001a70 <WS2812B_PrepareBuffer+0x48>
        }
        for (int8_t bit = 7; bit >= 0; bit--) {
            ledBuffer[bufferIndex++] = (blue & (1 << bit)) ? WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
 8001a8a:	22ff      	movs	r2, #255	@ 0xff
 8001a8c:	9800      	ldr	r0, [sp, #0]
 8001a8e:	001d      	movs	r5, r3
 8001a90:	4010      	ands	r0, r2
 8001a92:	2107      	movs	r1, #7
 8001a94:	0002      	movs	r2, r0
 8001a96:	3517      	adds	r5, #23
 8001a98:	b2ad      	uxth	r5, r5
 8001a9a:	0016      	movs	r6, r2
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	410e      	asrs	r6, r1
 8001aa0:	1a6c      	subs	r4, r5, r1
 8001aa2:	2713      	movs	r7, #19
 8001aa4:	b2a4      	uxth	r4, r4
 8001aa6:	4206      	tst	r6, r0
 8001aa8:	d000      	beq.n	8001aac <WS2812B_PrepareBuffer+0x84>
 8001aaa:	19ff      	adds	r7, r7, r7
 8001aac:	9801      	ldr	r0, [sp, #4]
 8001aae:	5507      	strb	r7, [r0, r4]
        for (int8_t bit = 7; bit >= 0; bit--) {
 8001ab0:	3901      	subs	r1, #1
 8001ab2:	d2f2      	bcs.n	8001a9a <WS2812B_PrepareBuffer+0x72>
    for (uint16_t i = 0; i < LED_COUNT; i++) {
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4494      	add	ip, r2
 8001ab8:	22e4      	movs	r2, #228	@ 0xe4
            ledBuffer[bufferIndex++] = (blue & (1 << bit)) ? WS2812B_ONE_PULSE : WS2812B_ZERO_PULSE;
 8001aba:	3318      	adds	r3, #24
 8001abc:	b29b      	uxth	r3, r3
    for (uint16_t i = 0; i < LED_COUNT; i++) {
 8001abe:	00d2      	lsls	r2, r2, #3
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d1b5      	bne.n	8001a30 <WS2812B_PrepareBuffer+0x8>
        }
    }

    for (uint16_t i = 0; i < WS2812B_RESET_LEN; i++) {
        ledBuffer[bufferIndex++] = 0;
 8001ac4:	2232      	movs	r2, #50	@ 0x32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <WS2812B_PrepareBuffer+0xb0>)
 8001aca:	f001 ff51 	bl	8003970 <memset>
    }
}
 8001ace:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ad0:	20000134 	.word	0x20000134
 8001ad4:	20000264 	.word	0x20000264
 8001ad8:	20000984 	.word	0x20000984

08001adc <WS2812B_SendToLEDs>:

void WS2812B_SendToLEDs(void)
{
 8001adc:	b570      	push	{r4, r5, r6, lr}
    transferComplete = false;
 8001ade:	2600      	movs	r6, #0
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001ae0:	4c0e      	ldr	r4, [pc, #56]	@ (8001b1c <WS2812B_SendToLEDs+0x40>)
    transferComplete = false;
 8001ae2:	4d0f      	ldr	r5, [pc, #60]	@ (8001b20 <WS2812B_SendToLEDs+0x44>)
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001ae4:	0031      	movs	r1, r6
 8001ae6:	0020      	movs	r0, r4
    transferComplete = false;
 8001ae8:	702e      	strb	r6, [r5, #0]
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001aea:	f001 ff13 	bl	8003914 <HAL_TIM_PWM_Stop_DMA>

    WS2812B_PrepareBuffer();
 8001aee:	f7ff ff9b 	bl	8001a28 <WS2812B_PrepareBuffer>

    // Cast uint8_t buffer to uint32_t for DMA (DMA expects uint32_t pointer)
    if (HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)ledBuffer, WS2812B_BUFFER_SIZE) != HAL_OK) {
 8001af2:	0031      	movs	r1, r6
 8001af4:	0020      	movs	r0, r4
 8001af6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <WS2812B_SendToLEDs+0x48>)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <WS2812B_SendToLEDs+0x4c>)
 8001afa:	f001 fe91 	bl	8003820 <HAL_TIM_PWM_Start_DMA>
 8001afe:	42b0      	cmp	r0, r6
 8001b00:	d10a      	bne.n	8001b18 <WS2812B_SendToLEDs+0x3c>
        return;
    }

    uint32_t timeout = HAL_GetTick() + 100;
 8001b02:	f000 fc4f 	bl	80023a4 <HAL_GetTick>
 8001b06:	3064      	adds	r0, #100	@ 0x64
 8001b08:	0004      	movs	r4, r0
    while (!transferComplete && HAL_GetTick() < timeout) {
 8001b0a:	782b      	ldrb	r3, [r5, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <WS2812B_SendToLEDs+0x3c>
 8001b10:	f000 fc48 	bl	80023a4 <HAL_GetTick>
 8001b14:	4284      	cmp	r4, r0
 8001b16:	d8f8      	bhi.n	8001b0a <WS2812B_SendToLEDs+0x2e>
    }
}
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	2000009c 	.word	0x2000009c
 8001b20:	20000130 	.word	0x20000130
 8001b24:	20000264 	.word	0x20000264
 8001b28:	00000752 	.word	0x00000752

08001b2c <WS2812B_TIM_DMADelayPulseFinished>:

void WS2812B_TIM_DMADelayPulseFinished(void)
{
    transferComplete = true;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4b01      	ldr	r3, [pc, #4]	@ (8001b34 <WS2812B_TIM_DMADelayPulseFinished+0x8>)
 8001b30:	701a      	strb	r2, [r3, #0]
}
 8001b32:	4770      	bx	lr
 8001b34:	20000130 	.word	0x20000130

08001b38 <WS2812B_SetLogoColors>:

void WS2812B_SetLogoColors(void)
{
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* W = Magenta */
    for(int i = W_START; i <= W_END; i++) {
 8001b3a:	2400      	movs	r4, #0
        currentColors[i] = WS2812B_Color(255, 0, 100);
 8001b3c:	2664      	movs	r6, #100	@ 0x64
 8001b3e:	4d13      	ldr	r5, [pc, #76]	@ (8001b8c <WS2812B_SetLogoColors+0x54>)
 8001b40:	0032      	movs	r2, r6
 8001b42:	2100      	movs	r1, #0
 8001b44:	20ff      	movs	r0, #255	@ 0xff
 8001b46:	f7ff ff53 	bl	80019f0 <WS2812B_Color>
 8001b4a:	00a3      	lsls	r3, r4, #2
    for(int i = W_START; i <= W_END; i++) {
 8001b4c:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(255, 0, 100);
 8001b4e:	50e8      	str	r0, [r5, r3]
    for(int i = W_START; i <= W_END; i++) {
 8001b50:	2c15      	cmp	r4, #21
 8001b52:	d1f5      	bne.n	8001b40 <WS2812B_SetLogoColors+0x8>
    }

    /* R = White */
    for(int i = R_START; i <= R_END; i++) {
        currentColors[i] = WS2812B_Color(255, 255, 255);
 8001b54:	26ff      	movs	r6, #255	@ 0xff
    for(int i = R_START; i <= R_END; i++) {
 8001b56:	3c01      	subs	r4, #1
        currentColors[i] = WS2812B_Color(255, 255, 255);
 8001b58:	0032      	movs	r2, r6
 8001b5a:	0031      	movs	r1, r6
 8001b5c:	0030      	movs	r0, r6
 8001b5e:	f7ff ff47 	bl	80019f0 <WS2812B_Color>
 8001b62:	00a3      	lsls	r3, r4, #2
    for(int i = R_START; i <= R_END; i++) {
 8001b64:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(255, 255, 255);
 8001b66:	50e8      	str	r0, [r5, r3]
    for(int i = R_START; i <= R_END; i++) {
 8001b68:	2c1d      	cmp	r4, #29
 8001b6a:	d1f5      	bne.n	8001b58 <WS2812B_SetLogoColors+0x20>
    }

    /* Background = DARK BLUE */
    for(int i = R_END + 1; i < LED_COUNT; i++) {
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001b6c:	2796      	movs	r7, #150	@ 0x96
 8001b6e:	261e      	movs	r6, #30
 8001b70:	003a      	movs	r2, r7
 8001b72:	0031      	movs	r1, r6
 8001b74:	0030      	movs	r0, r6
 8001b76:	f7ff ff3b 	bl	80019f0 <WS2812B_Color>
 8001b7a:	00a3      	lsls	r3, r4, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001b7c:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001b7e:	50e8      	str	r0, [r5, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001b80:	2c4c      	cmp	r4, #76	@ 0x4c
 8001b82:	d1f5      	bne.n	8001b70 <WS2812B_SetLogoColors+0x38>
    }

    WS2812B_SendToLEDs();
 8001b84:	f7ff ffaa 	bl	8001adc <WS2812B_SendToLEDs>
}
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	20000134 	.word	0x20000134

08001b90 <WS2812B_Init>:
    memset(currentColors, 0, sizeof(currentColors));
 8001b90:	2298      	movs	r2, #152	@ 0x98
{
 8001b92:	b510      	push	{r4, lr}
    memset(currentColors, 0, sizeof(currentColors));
 8001b94:	2100      	movs	r1, #0
 8001b96:	0052      	lsls	r2, r2, #1
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <WS2812B_Init+0x1c>)
 8001b9a:	f001 fee9 	bl	8003970 <memset>
    globalBrightness = baseBrightness;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <WS2812B_Init+0x20>)
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <WS2812B_Init+0x24>)
 8001ba2:	7812      	ldrb	r2, [r2, #0]
 8001ba4:	701a      	strb	r2, [r3, #0]
    WS2812B_SetLogoColors();
 8001ba6:	f7ff ffc7 	bl	8001b38 <WS2812B_SetLogoColors>
}
 8001baa:	bd10      	pop	{r4, pc}
 8001bac:	20000134 	.word	0x20000134
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000012 	.word	0x20000012

08001bb8 <WS2812B_StaticLogoEffect>:
    memset(currentColors, 0, sizeof(currentColors));
    WS2812B_SendToLEDs();
}

void WS2812B_StaticLogoEffect(void)
{
 8001bb8:	b510      	push	{r4, lr}
    // Only update if needed (when switching to static mode or brightness changed)
    if (staticLogoNeedsUpdate) {
 8001bba:	4c06      	ldr	r4, [pc, #24]	@ (8001bd4 <WS2812B_StaticLogoEffect+0x1c>)
 8001bbc:	7823      	ldrb	r3, [r4, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <WS2812B_StaticLogoEffect+0x1a>
        globalBrightness = baseBrightness;  // Set brightness for static logo
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <WS2812B_StaticLogoEffect+0x20>)
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <WS2812B_StaticLogoEffect+0x24>)
 8001bc6:	7812      	ldrb	r2, [r2, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
        WS2812B_SetLogoColors();
 8001bca:	f7ff ffb5 	bl	8001b38 <WS2812B_SetLogoColors>
        staticLogoNeedsUpdate = 0;  // Clear the update flag
 8001bce:	2300      	movs	r3, #0
 8001bd0:	7023      	strb	r3, [r4, #0]
    }
}
 8001bd2:	bd10      	pop	{r4, pc}
 8001bd4:	20000011 	.word	0x20000011
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000012 	.word	0x20000012

08001be0 <WS2812B_BreatheEffect>:

void WS2812B_BreatheEffect(void)
{
 8001be0:	b510      	push	{r4, lr}
    static uint32_t lastUpdate = 0;
    static uint8_t breathDir = 1;
    static uint8_t breathBrightness = 50;  // Start at 50% of base

    if (HAL_GetTick() - lastUpdate < 30) return;
 8001be2:	f000 fbdf 	bl	80023a4 <HAL_GetTick>
 8001be6:	4c14      	ldr	r4, [pc, #80]	@ (8001c38 <WS2812B_BreatheEffect+0x58>)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	1ac0      	subs	r0, r0, r3
 8001bec:	281d      	cmp	r0, #29
 8001bee:	d91a      	bls.n	8001c26 <WS2812B_BreatheEffect+0x46>
    lastUpdate = HAL_GetTick();
 8001bf0:	f000 fbd8 	bl	80023a4 <HAL_GetTick>

    if (breathDir) {
 8001bf4:	4911      	ldr	r1, [pc, #68]	@ (8001c3c <WS2812B_BreatheEffect+0x5c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <WS2812B_BreatheEffect+0x60>)
 8001bf8:	780b      	ldrb	r3, [r1, #0]
    lastUpdate = HAL_GetTick();
 8001bfa:	6020      	str	r0, [r4, #0]
    if (breathDir) {
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <WS2812B_BreatheEffect+0x48>
        breathBrightness++;
 8001c00:	7813      	ldrb	r3, [r2, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	7013      	strb	r3, [r2, #0]
        if (breathBrightness >= 200) breathDir = 0;  // Max 200% of base
 8001c08:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c0a:	d901      	bls.n	8001c10 <WS2812B_BreatheEffect+0x30>
 8001c0c:	2300      	movs	r3, #0
    } else {
        breathBrightness--;
        if (breathBrightness <= 50) breathDir = 1;   // Min 50% of base
 8001c0e:	700b      	strb	r3, [r1, #0]
    }

    // Calculate brightness as percentage of base brightness
    globalBrightness = (baseBrightness * breathBrightness) / 100;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <WS2812B_BreatheEffect+0x64>)
 8001c12:	7810      	ldrb	r0, [r2, #0]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2164      	movs	r1, #100	@ 0x64
 8001c18:	4358      	muls	r0, r3
 8001c1a:	f7fe fb09 	bl	8000230 <__divsi3>
 8001c1e:	4c0a      	ldr	r4, [pc, #40]	@ (8001c48 <WS2812B_BreatheEffect+0x68>)
 8001c20:	7020      	strb	r0, [r4, #0]
    WS2812B_SetLogoColors();
 8001c22:	f7ff ff89 	bl	8001b38 <WS2812B_SetLogoColors>
}
 8001c26:	bd10      	pop	{r4, pc}
        breathBrightness--;
 8001c28:	7813      	ldrb	r3, [r2, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	7013      	strb	r3, [r2, #0]
        if (breathBrightness <= 50) breathDir = 1;   // Min 50% of base
 8001c30:	2b32      	cmp	r3, #50	@ 0x32
 8001c32:	d8ed      	bhi.n	8001c10 <WS2812B_BreatheEffect+0x30>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e7ea      	b.n	8001c0e <WS2812B_BreatheEffect+0x2e>
 8001c38:	2000012c 	.word	0x2000012c
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	2000000f 	.word	0x2000000f
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000012 	.word	0x20000012

08001c4c <WS2812B_WaveEffect>:

    WS2812B_SendToLEDs();
}

void WS2812B_WaveEffect(void)
{
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static uint32_t lastUpdate = 0;
    static uint16_t wavePos = W_START;
    static uint8_t waveSection = 0;

    if (HAL_GetTick() - lastUpdate < 80) return;
 8001c4e:	f000 fba9 	bl	80023a4 <HAL_GetTick>
 8001c52:	4c1b      	ldr	r4, [pc, #108]	@ (8001cc0 <WS2812B_WaveEffect+0x74>)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	1ac0      	subs	r0, r0, r3
 8001c58:	284f      	cmp	r0, #79	@ 0x4f
 8001c5a:	d91d      	bls.n	8001c98 <WS2812B_WaveEffect+0x4c>
    lastUpdate = HAL_GetTick();
 8001c5c:	f000 fba2 	bl	80023a4 <HAL_GetTick>

    globalBrightness = baseBrightness;
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <WS2812B_WaveEffect+0x78>)
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <WS2812B_WaveEffect+0x7c>)
 8001c64:	7812      	ldrb	r2, [r2, #0]
    lastUpdate = HAL_GetTick();
 8001c66:	6020      	str	r0, [r4, #0]
    globalBrightness = baseBrightness;
 8001c68:	701a      	strb	r2, [r3, #0]
    WS2812B_SetLogoColors();
 8001c6a:	f7ff ff65 	bl	8001b38 <WS2812B_SetLogoColors>

    if (waveSection == 0) {
 8001c6e:	4e17      	ldr	r6, [pc, #92]	@ (8001ccc <WS2812B_WaveEffect+0x80>)
 8001c70:	4d17      	ldr	r5, [pc, #92]	@ (8001cd0 <WS2812B_WaveEffect+0x84>)
 8001c72:	7833      	ldrb	r3, [r6, #0]
 8001c74:	4f17      	ldr	r7, [pc, #92]	@ (8001cd4 <WS2812B_WaveEffect+0x88>)
        currentColors[wavePos] = WS2812B_Color(255, 150, 200);
 8001c76:	882c      	ldrh	r4, [r5, #0]
    if (waveSection == 0) {
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d113      	bne.n	8001ca4 <WS2812B_WaveEffect+0x58>
        currentColors[wavePos] = WS2812B_Color(255, 150, 200);
 8001c7c:	22c8      	movs	r2, #200	@ 0xc8
 8001c7e:	2196      	movs	r1, #150	@ 0x96
 8001c80:	20ff      	movs	r0, #255	@ 0xff
 8001c82:	f7ff feb5 	bl	80019f0 <WS2812B_Color>
 8001c86:	00a3      	lsls	r3, r4, #2
        wavePos++;
 8001c88:	3401      	adds	r4, #1
 8001c8a:	b2a4      	uxth	r4, r4
        currentColors[wavePos] = WS2812B_Color(255, 150, 200);
 8001c8c:	50f8      	str	r0, [r7, r3]
        if (wavePos > W_END) {
 8001c8e:	2c14      	cmp	r4, #20
 8001c90:	d803      	bhi.n	8001c9a <WS2812B_WaveEffect+0x4e>
        wavePos++;
 8001c92:	802c      	strh	r4, [r5, #0]
            wavePos = W_START;
            waveSection = 0;
        }
    }

    WS2812B_SendToLEDs();
 8001c94:	f7ff ff22 	bl	8001adc <WS2812B_SendToLEDs>
}
 8001c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            wavePos = R_START;
 8001c9a:	2314      	movs	r3, #20
 8001c9c:	802b      	strh	r3, [r5, #0]
            waveSection = 1;
 8001c9e:	3b13      	subs	r3, #19
            waveSection = 0;
 8001ca0:	7033      	strb	r3, [r6, #0]
 8001ca2:	e7f7      	b.n	8001c94 <WS2812B_WaveEffect+0x48>
        currentColors[wavePos] = WS2812B_Color(255, 0, 100);
 8001ca4:	2264      	movs	r2, #100	@ 0x64
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	20ff      	movs	r0, #255	@ 0xff
 8001caa:	f7ff fea1 	bl	80019f0 <WS2812B_Color>
 8001cae:	00a3      	lsls	r3, r4, #2
        wavePos++;
 8001cb0:	3401      	adds	r4, #1
 8001cb2:	b2a4      	uxth	r4, r4
        currentColors[wavePos] = WS2812B_Color(255, 0, 100);
 8001cb4:	50f8      	str	r0, [r7, r3]
        if (wavePos > R_END) {
 8001cb6:	2c1c      	cmp	r4, #28
 8001cb8:	d9eb      	bls.n	8001c92 <WS2812B_WaveEffect+0x46>
            wavePos = W_START;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	802b      	strh	r3, [r5, #0]
 8001cbe:	e7ef      	b.n	8001ca0 <WS2812B_WaveEffect+0x54>
 8001cc0:	20000120 	.word	0x20000120
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000012 	.word	0x20000012
 8001ccc:	2000011e 	.word	0x2000011e
 8001cd0:	2000011c 	.word	0x2000011c
 8001cd4:	20000134 	.word	0x20000134

08001cd8 <WS2812B_PulseEffect>:

void WS2812B_PulseEffect(void)
{
 8001cd8:	b510      	push	{r4, lr}
    static uint32_t lastPulse = 0;
    static uint8_t pulseState = 0;

    if (HAL_GetTick() - lastPulse < 400) return;
 8001cda:	f000 fb63 	bl	80023a4 <HAL_GetTick>
 8001cde:	4c0e      	ldr	r4, [pc, #56]	@ (8001d18 <WS2812B_PulseEffect+0x40>)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	1ac0      	subs	r0, r0, r3
 8001ce4:	23c8      	movs	r3, #200	@ 0xc8
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4298      	cmp	r0, r3
 8001cea:	d30f      	bcc.n	8001d0c <WS2812B_PulseEffect+0x34>
    lastPulse = HAL_GetTick();
 8001cec:	f000 fb5a 	bl	80023a4 <HAL_GetTick>
 8001cf0:	6020      	str	r0, [r4, #0]

    if (pulseState == 0) {
 8001cf2:	4c0a      	ldr	r4, [pc, #40]	@ (8001d1c <WS2812B_PulseEffect+0x44>)
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <WS2812B_PulseEffect+0x48>)
 8001cf6:	7821      	ldrb	r1, [r4, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <WS2812B_PulseEffect+0x4c>)
        globalBrightness = baseBrightness * 2;  // 200% of base brightness
 8001cfa:	781b      	ldrb	r3, [r3, #0]
    if (pulseState == 0) {
 8001cfc:	2900      	cmp	r1, #0
 8001cfe:	d106      	bne.n	8001d0e <WS2812B_PulseEffect+0x36>
        globalBrightness = baseBrightness * 2;  // 200% of base brightness
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	7013      	strb	r3, [r2, #0]
        if (globalBrightness > 255) globalBrightness = 255;  // Cap at max
        WS2812B_SetLogoColors();
 8001d04:	f7ff ff18 	bl	8001b38 <WS2812B_SetLogoColors>
        pulseState = 1;
 8001d08:	2301      	movs	r3, #1
    } else {
        globalBrightness = baseBrightness;  // Back to base brightness
        WS2812B_SetLogoColors();
        pulseState = 0;
 8001d0a:	7023      	strb	r3, [r4, #0]
    }
}
 8001d0c:	bd10      	pop	{r4, pc}
        globalBrightness = baseBrightness;  // Back to base brightness
 8001d0e:	7013      	strb	r3, [r2, #0]
        WS2812B_SetLogoColors();
 8001d10:	f7ff ff12 	bl	8001b38 <WS2812B_SetLogoColors>
        pulseState = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e7f8      	b.n	8001d0a <WS2812B_PulseEffect+0x32>
 8001d18:	20000118 	.word	0x20000118
 8001d1c:	20000114 	.word	0x20000114
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000012 	.word	0x20000012

08001d28 <WS2812B_CometEffect>:
    WS2812B_SendToLEDs();
    rainbowStep += 3;
}

void WS2812B_CometEffect(void)
{
 8001d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t lastUpdate = 0;
    static uint16_t cometPos = W_START;
    static uint8_t direction = 1;

    if (HAL_GetTick() - lastUpdate < 80) return;
 8001d2a:	f000 fb3b 	bl	80023a4 <HAL_GetTick>
 8001d2e:	4c36      	ldr	r4, [pc, #216]	@ (8001e08 <WS2812B_CometEffect+0xe0>)
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	1ac0      	subs	r0, r0, r3
 8001d34:	284f      	cmp	r0, #79	@ 0x4f
 8001d36:	d95d      	bls.n	8001df4 <WS2812B_CometEffect+0xcc>
    lastUpdate = HAL_GetTick();
 8001d38:	f000 fb34 	bl	80023a4 <HAL_GetTick>

    globalBrightness = baseBrightness;

    // Keep background
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001d3c:	251d      	movs	r5, #29
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001d3e:	2796      	movs	r7, #150	@ 0x96
 8001d40:	261e      	movs	r6, #30
    globalBrightness = baseBrightness;
 8001d42:	4a32      	ldr	r2, [pc, #200]	@ (8001e0c <WS2812B_CometEffect+0xe4>)
 8001d44:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <WS2812B_CometEffect+0xe8>)
 8001d46:	7812      	ldrb	r2, [r2, #0]
    lastUpdate = HAL_GetTick();
 8001d48:	6020      	str	r0, [r4, #0]
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001d4a:	4c32      	ldr	r4, [pc, #200]	@ (8001e14 <WS2812B_CometEffect+0xec>)
    globalBrightness = baseBrightness;
 8001d4c:	701a      	strb	r2, [r3, #0]
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001d4e:	003a      	movs	r2, r7
 8001d50:	0031      	movs	r1, r6
 8001d52:	0030      	movs	r0, r6
 8001d54:	f7ff fe4c 	bl	80019f0 <WS2812B_Color>
 8001d58:	00ab      	lsls	r3, r5, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001d5a:	3501      	adds	r5, #1
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001d5c:	50e0      	str	r0, [r4, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001d5e:	2d4c      	cmp	r5, #76	@ 0x4c
 8001d60:	d1f5      	bne.n	8001d4e <WS2812B_CometEffect+0x26>
 8001d62:	0026      	movs	r6, r4
    // Fade trail
    for(uint16_t i = W_START; i <= R_END; i++) {
        uint32_t color = currentColors[i];
        uint8_t r = ((color >> 16) & 0xFF) * 0.85;
        uint8_t g = ((color >> 8) & 0xFF) * 0.85;
        uint8_t b = (color & 0xFF) * 0.85;
 8001d64:	27ff      	movs	r7, #255	@ 0xff
 8001d66:	3674      	adds	r6, #116	@ 0x74
        uint32_t color = currentColors[i];
 8001d68:	6825      	ldr	r5, [r4, #0]
        uint8_t b = (color & 0xFF) * 0.85;
 8001d6a:	0028      	movs	r0, r5
 8001d6c:	4038      	ands	r0, r7
 8001d6e:	f7ff fa15 	bl	800119c <__aeabi_ui2d>
 8001d72:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <WS2812B_CometEffect+0xf0>)
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <WS2812B_CometEffect+0xf4>)
 8001d76:	f7fe fb71 	bl	800045c <__aeabi_dmul>
 8001d7a:	f7fe fb51 	bl	8000420 <__aeabi_d2uiz>
        currentColors[i] = WS2812B_Color(r, g, b);
 8001d7e:	b2c3      	uxtb	r3, r0
        uint8_t g = ((color >> 8) & 0xFF) * 0.85;
 8001d80:	0a28      	lsrs	r0, r5, #8
 8001d82:	4038      	ands	r0, r7
        currentColors[i] = WS2812B_Color(r, g, b);
 8001d84:	9300      	str	r3, [sp, #0]
        uint8_t g = ((color >> 8) & 0xFF) * 0.85;
 8001d86:	f7ff fa09 	bl	800119c <__aeabi_ui2d>
 8001d8a:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <WS2812B_CometEffect+0xf0>)
 8001d8c:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <WS2812B_CometEffect+0xf4>)
 8001d8e:	f7fe fb65 	bl	800045c <__aeabi_dmul>
 8001d92:	f7fe fb45 	bl	8000420 <__aeabi_d2uiz>
        currentColors[i] = WS2812B_Color(r, g, b);
 8001d96:	b2c3      	uxtb	r3, r0
        uint8_t r = ((color >> 16) & 0xFF) * 0.85;
 8001d98:	0c28      	lsrs	r0, r5, #16
 8001d9a:	4038      	ands	r0, r7
        currentColors[i] = WS2812B_Color(r, g, b);
 8001d9c:	9301      	str	r3, [sp, #4]
        uint8_t r = ((color >> 16) & 0xFF) * 0.85;
 8001d9e:	f7ff f9fd 	bl	800119c <__aeabi_ui2d>
 8001da2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <WS2812B_CometEffect+0xf0>)
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <WS2812B_CometEffect+0xf4>)
 8001da6:	f7fe fb59 	bl	800045c <__aeabi_dmul>
 8001daa:	f7fe fb39 	bl	8000420 <__aeabi_d2uiz>
        currentColors[i] = WS2812B_Color(r, g, b);
 8001dae:	9a00      	ldr	r2, [sp, #0]
 8001db0:	9901      	ldr	r1, [sp, #4]
 8001db2:	b2c0      	uxtb	r0, r0
 8001db4:	f7ff fe1c 	bl	80019f0 <WS2812B_Color>
 8001db8:	c401      	stmia	r4!, {r0}
    for(uint16_t i = W_START; i <= R_END; i++) {
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d1d4      	bne.n	8001d68 <WS2812B_CometEffect+0x40>
    }

    if(cometPos >= W_START && cometPos <= R_END) {
 8001dbe:	4d18      	ldr	r5, [pc, #96]	@ (8001e20 <WS2812B_CometEffect+0xf8>)
 8001dc0:	882c      	ldrh	r4, [r5, #0]
 8001dc2:	2c1c      	cmp	r4, #28
 8001dc4:	d807      	bhi.n	8001dd6 <WS2812B_CometEffect+0xae>
        currentColors[cometPos] = WS2812B_Color(255, 255, 255);
 8001dc6:	22ff      	movs	r2, #255	@ 0xff
 8001dc8:	0011      	movs	r1, r2
 8001dca:	0010      	movs	r0, r2
 8001dcc:	f7ff fe10 	bl	80019f0 <WS2812B_Color>
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <WS2812B_CometEffect+0xec>)
 8001dd2:	00a2      	lsls	r2, r4, #2
 8001dd4:	5098      	str	r0, [r3, r2]
    }

    if(direction) {
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <WS2812B_CometEffect+0xfc>)
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d00b      	beq.n	8001df6 <WS2812B_CometEffect+0xce>
        cometPos++;
 8001dde:	3401      	adds	r4, #1
 8001de0:	b2a4      	uxth	r4, r4
 8001de2:	802c      	strh	r4, [r5, #0]
        if(cometPos > R_END) {
 8001de4:	2c1c      	cmp	r4, #28
 8001de6:	d903      	bls.n	8001df0 <WS2812B_CometEffect+0xc8>
            direction = 0;
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
            cometPos = R_END;
 8001dec:	231c      	movs	r3, #28
 8001dee:	802b      	strh	r3, [r5, #0]
            direction = 1;
            cometPos = W_START;
        }
    }

    WS2812B_SendToLEDs();
 8001df0:	f7ff fe74 	bl	8001adc <WS2812B_SendToLEDs>
}
 8001df4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(cometPos > W_START) {
 8001df6:	2c00      	cmp	r4, #0
 8001df8:	d002      	beq.n	8001e00 <WS2812B_CometEffect+0xd8>
            cometPos--;
 8001dfa:	3c01      	subs	r4, #1
            cometPos = W_START;
 8001dfc:	802c      	strh	r4, [r5, #0]
 8001dfe:	e7f7      	b.n	8001df0 <WS2812B_CometEffect+0xc8>
            direction = 1;
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e7fa      	b.n	8001dfc <WS2812B_CometEffect+0xd4>
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	20000108 	.word	0x20000108
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000012 	.word	0x20000012
 8001e14:	20000134 	.word	0x20000134
 8001e18:	33333333 	.word	0x33333333
 8001e1c:	3feb3333 	.word	0x3feb3333
 8001e20:	20000104 	.word	0x20000104
 8001e24:	2000000e 	.word	0x2000000e

08001e28 <WS2812B_FillEffect>:

void WS2812B_FillEffect(void)
{
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static uint32_t lastUpdate = 0;
    static uint8_t fillPos = 0;
    static uint8_t fillState = 0;

    if (HAL_GetTick() - lastUpdate < 100) return;
 8001e2a:	f000 fabb 	bl	80023a4 <HAL_GetTick>
 8001e2e:	4c29      	ldr	r4, [pc, #164]	@ (8001ed4 <WS2812B_FillEffect+0xac>)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	1ac0      	subs	r0, r0, r3
 8001e34:	2863      	cmp	r0, #99	@ 0x63
 8001e36:	d92b      	bls.n	8001e90 <WS2812B_FillEffect+0x68>
    lastUpdate = HAL_GetTick();
 8001e38:	f000 fab4 	bl	80023a4 <HAL_GetTick>

    globalBrightness = baseBrightness;

    for(int i = R_END + 1; i < LED_COUNT; i++) {
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001e3c:	2796      	movs	r7, #150	@ 0x96
    lastUpdate = HAL_GetTick();
 8001e3e:	6020      	str	r0, [r4, #0]
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001e40:	261e      	movs	r6, #30
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001e42:	241d      	movs	r4, #29
    globalBrightness = baseBrightness;
 8001e44:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <WS2812B_FillEffect+0xb0>)
 8001e46:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <WS2812B_FillEffect+0xb4>)
 8001e48:	7812      	ldrb	r2, [r2, #0]
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001e4a:	4d25      	ldr	r5, [pc, #148]	@ (8001ee0 <WS2812B_FillEffect+0xb8>)
    globalBrightness = baseBrightness;
 8001e4c:	701a      	strb	r2, [r3, #0]
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001e4e:	003a      	movs	r2, r7
 8001e50:	0031      	movs	r1, r6
 8001e52:	0030      	movs	r0, r6
 8001e54:	f7ff fdcc 	bl	80019f0 <WS2812B_Color>
 8001e58:	00a3      	lsls	r3, r4, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001e5a:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001e5c:	50e8      	str	r0, [r5, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001e5e:	2c4c      	cmp	r4, #76	@ 0x4c
 8001e60:	d1f5      	bne.n	8001e4e <WS2812B_FillEffect+0x26>
    }

    switch(fillState) {
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <WS2812B_FillEffect+0xbc>)
 8001e64:	7819      	ldrb	r1, [r3, #0]
 8001e66:	2901      	cmp	r1, #1
 8001e68:	d013      	beq.n	8001e92 <WS2812B_FillEffect+0x6a>
 8001e6a:	2902      	cmp	r1, #2
 8001e6c:	d027      	beq.n	8001ebe <WS2812B_FillEffect+0x96>
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	d10c      	bne.n	8001e8c <WS2812B_FillEffect+0x64>
        case 0: // Fill W section
            if(fillPos < R_START) {
 8001e72:	4e1d      	ldr	r6, [pc, #116]	@ (8001ee8 <WS2812B_FillEffect+0xc0>)
 8001e74:	7834      	ldrb	r4, [r6, #0]
 8001e76:	2c13      	cmp	r4, #19
 8001e78:	d805      	bhi.n	8001e86 <WS2812B_FillEffect+0x5e>
                currentColors[W_START + fillPos] = WS2812B_Color(255, 0, 100);
 8001e7a:	2264      	movs	r2, #100	@ 0x64
 8001e7c:	20ff      	movs	r0, #255	@ 0xff
            }
            break;

        case 2: // Empty all
            if(fillPos <= R_END) {
                currentColors[W_START + fillPos] = WS2812B_Color(0, 0, 0);
 8001e7e:	f7ff fdb7 	bl	80019f0 <WS2812B_Color>
 8001e82:	00a3      	lsls	r3, r4, #2
 8001e84:	e012      	b.n	8001eac <WS2812B_FillEffect+0x84>
                fillState = 1;
 8001e86:	2201      	movs	r2, #1
                fillPos = 0;
 8001e88:	7031      	strb	r1, [r6, #0]
                fillState = 1;
 8001e8a:	701a      	strb	r2, [r3, #0]
                fillPos = 0;
            }
            break;
    }

    WS2812B_SendToLEDs();
 8001e8c:	f7ff fe26 	bl	8001adc <WS2812B_SendToLEDs>
}
 8001e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(fillPos <= (R_END - R_START)) {
 8001e92:	4e15      	ldr	r6, [pc, #84]	@ (8001ee8 <WS2812B_FillEffect+0xc0>)
 8001e94:	7834      	ldrb	r4, [r6, #0]
 8001e96:	2c08      	cmp	r4, #8
 8001e98:	d80c      	bhi.n	8001eb4 <WS2812B_FillEffect+0x8c>
                currentColors[R_START + fillPos] = WS2812B_Color(255, 255, 255);
 8001e9a:	22ff      	movs	r2, #255	@ 0xff
 8001e9c:	0011      	movs	r1, r2
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff fda6 	bl	80019f0 <WS2812B_Color>
 8001ea4:	0023      	movs	r3, r4
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	009b      	lsls	r3, r3, #2
                fillPos++;
 8001eac:	3401      	adds	r4, #1
                currentColors[R_START + fillPos] = WS2812B_Color(255, 255, 255);
 8001eae:	50e8      	str	r0, [r5, r3]
                fillPos++;
 8001eb0:	7034      	strb	r4, [r6, #0]
 8001eb2:	e7eb      	b.n	8001e8c <WS2812B_FillEffect+0x64>
                fillState = 2;
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	701a      	strb	r2, [r3, #0]
                fillPos = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	7033      	strb	r3, [r6, #0]
 8001ebc:	e7e6      	b.n	8001e8c <WS2812B_FillEffect+0x64>
            if(fillPos <= R_END) {
 8001ebe:	4e0a      	ldr	r6, [pc, #40]	@ (8001ee8 <WS2812B_FillEffect+0xc0>)
                currentColors[W_START + fillPos] = WS2812B_Color(0, 0, 0);
 8001ec0:	2200      	movs	r2, #0
            if(fillPos <= R_END) {
 8001ec2:	7834      	ldrb	r4, [r6, #0]
 8001ec4:	2c1c      	cmp	r4, #28
 8001ec6:	d802      	bhi.n	8001ece <WS2812B_FillEffect+0xa6>
                currentColors[W_START + fillPos] = WS2812B_Color(0, 0, 0);
 8001ec8:	0011      	movs	r1, r2
 8001eca:	0010      	movs	r0, r2
 8001ecc:	e7d7      	b.n	8001e7e <WS2812B_FillEffect+0x56>
                fillState = 0;
 8001ece:	701a      	strb	r2, [r3, #0]
                fillPos = 0;
 8001ed0:	7032      	strb	r2, [r6, #0]
 8001ed2:	e7db      	b.n	8001e8c <WS2812B_FillEffect+0x64>
 8001ed4:	20000100 	.word	0x20000100
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000012 	.word	0x20000012
 8001ee0:	20000134 	.word	0x20000134
 8001ee4:	200000fd 	.word	0x200000fd
 8001ee8:	200000fc 	.word	0x200000fc

08001eec <WS2812B_ScannerEffect>:

void WS2812B_ScannerEffect(void)
{
 8001eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t lastUpdate = 0;
    static uint16_t scanPos = W_START;
    static uint8_t direction = 1;
    static uint8_t scanWidth = 3;

    if (HAL_GetTick() - lastUpdate < 50) return;
 8001eee:	f000 fa59 	bl	80023a4 <HAL_GetTick>
 8001ef2:	4c27      	ldr	r4, [pc, #156]	@ (8001f90 <WS2812B_ScannerEffect+0xa4>)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	1ac0      	subs	r0, r0, r3
 8001ef8:	2831      	cmp	r0, #49	@ 0x31
 8001efa:	d93f      	bls.n	8001f7c <WS2812B_ScannerEffect+0x90>
    lastUpdate = HAL_GetTick();
 8001efc:	f000 fa52 	bl	80023a4 <HAL_GetTick>
 8001f00:	6020      	str	r0, [r4, #0]

    globalBrightness = baseBrightness;

    // Clear W and R sections
    for(int i = W_START; i <= R_END; i++) {
 8001f02:	2400      	movs	r4, #0
    globalBrightness = baseBrightness;
 8001f04:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <WS2812B_ScannerEffect+0xa8>)
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <WS2812B_ScannerEffect+0xac>)
 8001f08:	7812      	ldrb	r2, [r2, #0]
        currentColors[i] = WS2812B_Color(0, 0, 0);
 8001f0a:	4f24      	ldr	r7, [pc, #144]	@ (8001f9c <WS2812B_ScannerEffect+0xb0>)
    globalBrightness = baseBrightness;
 8001f0c:	701a      	strb	r2, [r3, #0]
        currentColors[i] = WS2812B_Color(0, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	0011      	movs	r1, r2
 8001f12:	0010      	movs	r0, r2
 8001f14:	f7ff fd6c 	bl	80019f0 <WS2812B_Color>
 8001f18:	00a3      	lsls	r3, r4, #2
    for(int i = W_START; i <= R_END; i++) {
 8001f1a:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(0, 0, 0);
 8001f1c:	50f8      	str	r0, [r7, r3]
    for(int i = W_START; i <= R_END; i++) {
 8001f1e:	2c1d      	cmp	r4, #29
 8001f20:	d1f5      	bne.n	8001f0e <WS2812B_ScannerEffect+0x22>
    }

    // Keep background
    for(int i = R_END + 1; i < LED_COUNT; i++) {
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001f22:	2696      	movs	r6, #150	@ 0x96
 8001f24:	251e      	movs	r5, #30
 8001f26:	0032      	movs	r2, r6
 8001f28:	0029      	movs	r1, r5
 8001f2a:	0028      	movs	r0, r5
 8001f2c:	f7ff fd60 	bl	80019f0 <WS2812B_Color>
 8001f30:	00a3      	lsls	r3, r4, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001f32:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(30, 30, 150);
 8001f34:	50f8      	str	r0, [r7, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8001f36:	2c4c      	cmp	r4, #76	@ 0x4c
 8001f38:	d1f5      	bne.n	8001f26 <WS2812B_ScannerEffect+0x3a>
    }

    // Create scanner beam
    for(uint8_t i = 0; i < scanWidth; i++) {
        uint16_t pos = scanPos + i;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <WS2812B_ScannerEffect+0xb4>)
 8001f3c:	25ff      	movs	r5, #255	@ 0xff
 8001f3e:	881c      	ldrh	r4, [r3, #0]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	0026      	movs	r6, r4
        if(pos >= W_START && pos <= R_END) {
 8001f44:	2e1c      	cmp	r6, #28
 8001f46:	d806      	bhi.n	8001f56 <WS2812B_ScannerEffect+0x6a>
            uint8_t brightness = 255 - (i * 80);
            currentColors[pos] = WS2812B_Color(brightness, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	0028      	movs	r0, r5
 8001f4c:	0011      	movs	r1, r2
 8001f4e:	f7ff fd4f 	bl	80019f0 <WS2812B_Color>
 8001f52:	00b3      	lsls	r3, r6, #2
 8001f54:	50f8      	str	r0, [r7, r3]
    for(uint8_t i = 0; i < scanWidth; i++) {
 8001f56:	3d50      	subs	r5, #80	@ 0x50
 8001f58:	3601      	adds	r6, #1
 8001f5a:	b2ed      	uxtb	r5, r5
 8001f5c:	b2b6      	uxth	r6, r6
 8001f5e:	2d0f      	cmp	r5, #15
 8001f60:	d1f0      	bne.n	8001f44 <WS2812B_ScannerEffect+0x58>
        }
    }

    // Move scanner
    if(direction) {
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <WS2812B_ScannerEffect+0xb8>)
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d009      	beq.n	8001f7e <WS2812B_ScannerEffect+0x92>
        scanPos++;
 8001f6a:	9a01      	ldr	r2, [sp, #4]
 8001f6c:	3401      	adds	r4, #1
 8001f6e:	b2a4      	uxth	r4, r4
 8001f70:	8014      	strh	r4, [r2, #0]
        if(scanPos >= (R_END - scanWidth + 1)) {
            direction = 0;
 8001f72:	2200      	movs	r2, #0
        if(scanPos >= (R_END - scanWidth + 1)) {
 8001f74:	2c19      	cmp	r4, #25
 8001f76:	d809      	bhi.n	8001f8c <WS2812B_ScannerEffect+0xa0>
        } else {
            direction = 1;
        }
    }

    WS2812B_SendToLEDs();
 8001f78:	f7ff fdb0 	bl	8001adc <WS2812B_SendToLEDs>
}
 8001f7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(scanPos > W_START) {
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	d003      	beq.n	8001f8a <WS2812B_ScannerEffect+0x9e>
            scanPos--;
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	3c01      	subs	r4, #1
 8001f86:	801c      	strh	r4, [r3, #0]
 8001f88:	e7f6      	b.n	8001f78 <WS2812B_ScannerEffect+0x8c>
            direction = 1;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e7f3      	b.n	8001f78 <WS2812B_ScannerEffect+0x8c>
 8001f90:	200000f8 	.word	0x200000f8
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000012 	.word	0x20000012
 8001f9c:	20000134 	.word	0x20000134
 8001fa0:	200000f4 	.word	0x200000f4
 8001fa4:	2000000d 	.word	0x2000000d

08001fa8 <WS2812B_StrobeEffect>:
    hue += 2;
    WS2812B_SendToLEDs();
}

void WS2812B_StrobeEffect(void)
{
 8001fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001faa:	b085      	sub	sp, #20
    static uint32_t lastUpdate = 0;
    static uint8_t strobeState = 0;
    static uint8_t strobeCount = 0;

    if (HAL_GetTick() - lastUpdate < 150) return;
 8001fac:	f000 f9fa 	bl	80023a4 <HAL_GetTick>
 8001fb0:	4c30      	ldr	r4, [pc, #192]	@ (8002074 <WS2812B_StrobeEffect+0xcc>)
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	1ac0      	subs	r0, r0, r3
 8001fb6:	2895      	cmp	r0, #149	@ 0x95
 8001fb8:	d942      	bls.n	8002040 <WS2812B_StrobeEffect+0x98>
    lastUpdate = HAL_GetTick();
 8001fba:	f000 f9f3 	bl	80023a4 <HAL_GetTick>

    strobeCount++;
 8001fbe:	4f2e      	ldr	r7, [pc, #184]	@ (8002078 <WS2812B_StrobeEffect+0xd0>)
    globalBrightness = baseBrightness * 2;
 8001fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800207c <WS2812B_StrobeEffect+0xd4>)
    strobeCount++;
 8001fc2:	783b      	ldrb	r3, [r7, #0]
    globalBrightness = baseBrightness * 2;
 8001fc4:	7812      	ldrb	r2, [r2, #0]
    strobeCount++;
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	703b      	strb	r3, [r7, #0]
    globalBrightness = baseBrightness * 2;
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <WS2812B_StrobeEffect+0xd8>)
 8001fd0:	0052      	lsls	r2, r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
    if (globalBrightness > 255) globalBrightness = 255;  // Cap at max

    if(strobeState == 0) {
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <WS2812B_StrobeEffect+0xdc>)
 8001fd6:	4d2c      	ldr	r5, [pc, #176]	@ (8002088 <WS2812B_StrobeEffect+0xe0>)
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	781b      	ldrb	r3, [r3, #0]
    lastUpdate = HAL_GetTick();
 8001fdc:	6020      	str	r0, [r4, #0]
    if(strobeState == 0) {
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d12f      	bne.n	8002044 <WS2812B_StrobeEffect+0x9c>
        // Flash W section only
        for(int i = W_START; i < R_START; i++) {
 8001fe4:	001c      	movs	r4, r3
            currentColors[i] = WS2812B_Color(255, 0, 100);
 8001fe6:	26ff      	movs	r6, #255	@ 0xff
 8001fe8:	2264      	movs	r2, #100	@ 0x64
 8001fea:	2100      	movs	r1, #0
 8001fec:	0030      	movs	r0, r6
 8001fee:	f7ff fcff 	bl	80019f0 <WS2812B_Color>
 8001ff2:	00a3      	lsls	r3, r4, #2
        for(int i = W_START; i < R_START; i++) {
 8001ff4:	3401      	adds	r4, #1
            currentColors[i] = WS2812B_Color(255, 0, 100);
 8001ff6:	50e8      	str	r0, [r5, r3]
        for(int i = W_START; i < R_START; i++) {
 8001ff8:	2c14      	cmp	r4, #20
 8001ffa:	d1f5      	bne.n	8001fe8 <WS2812B_StrobeEffect+0x40>
        }
        for(int i = R_START; i <= R_END; i++) {
            currentColors[i] = WS2812B_Color(0, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	0011      	movs	r1, r2
 8002000:	0010      	movs	r0, r2
 8002002:	f7ff fcf5 	bl	80019f0 <WS2812B_Color>
 8002006:	00a3      	lsls	r3, r4, #2
        for(int i = R_START; i <= R_END; i++) {
 8002008:	3401      	adds	r4, #1
            currentColors[i] = WS2812B_Color(0, 0, 0);
 800200a:	50e8      	str	r0, [r5, r3]
        for(int i = R_START; i <= R_END; i++) {
 800200c:	2c1d      	cmp	r4, #29
 800200e:	d1f5      	bne.n	8001ffc <WS2812B_StrobeEffect+0x54>
        }
    } else {
        // Flash R section only
        for(int i = W_START; i < R_START; i++) {
 8002010:	241d      	movs	r4, #29
        }
    }

    // Keep background dim
    for(int i = R_END + 1; i < LED_COUNT; i++) {
        currentColors[i] = WS2812B_Color(10, 10, 50);
 8002012:	260a      	movs	r6, #10
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	0031      	movs	r1, r6
 8002018:	0030      	movs	r0, r6
 800201a:	f7ff fce9 	bl	80019f0 <WS2812B_Color>
 800201e:	00a3      	lsls	r3, r4, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8002020:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Color(10, 10, 50);
 8002022:	50e8      	str	r0, [r5, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8002024:	2c4c      	cmp	r4, #76	@ 0x4c
 8002026:	d1f5      	bne.n	8002014 <WS2812B_StrobeEffect+0x6c>
    }

    if(strobeCount >= 4) {
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d906      	bls.n	800203c <WS2812B_StrobeEffect+0x94>
        strobeState = 1 - strobeState;
 800202e:	2301      	movs	r3, #1
 8002030:	9a01      	ldr	r2, [sp, #4]
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	9a03      	ldr	r2, [sp, #12]
 8002036:	7013      	strb	r3, [r2, #0]
        strobeCount = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	703b      	strb	r3, [r7, #0]
    }

    WS2812B_SendToLEDs();
 800203c:	f7ff fd4e 	bl	8001adc <WS2812B_SendToLEDs>
}
 8002040:	b005      	add	sp, #20
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(int i = W_START; i < R_START; i++) {
 8002044:	2400      	movs	r4, #0
            currentColors[i] = WS2812B_Color(0, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	0011      	movs	r1, r2
 800204a:	0010      	movs	r0, r2
 800204c:	f7ff fcd0 	bl	80019f0 <WS2812B_Color>
 8002050:	00a3      	lsls	r3, r4, #2
        for(int i = W_START; i < R_START; i++) {
 8002052:	3401      	adds	r4, #1
            currentColors[i] = WS2812B_Color(0, 0, 0);
 8002054:	50e8      	str	r0, [r5, r3]
        for(int i = W_START; i < R_START; i++) {
 8002056:	2c14      	cmp	r4, #20
 8002058:	d1f5      	bne.n	8002046 <WS2812B_StrobeEffect+0x9e>
            currentColors[i] = WS2812B_Color(255, 255, 255);
 800205a:	26ff      	movs	r6, #255	@ 0xff
 800205c:	0032      	movs	r2, r6
 800205e:	0031      	movs	r1, r6
 8002060:	0030      	movs	r0, r6
 8002062:	f7ff fcc5 	bl	80019f0 <WS2812B_Color>
 8002066:	00a3      	lsls	r3, r4, #2
        for(int i = R_START; i <= R_END; i++) {
 8002068:	3401      	adds	r4, #1
            currentColors[i] = WS2812B_Color(255, 255, 255);
 800206a:	50e8      	str	r0, [r5, r3]
        for(int i = R_START; i <= R_END; i++) {
 800206c:	2c1d      	cmp	r4, #29
 800206e:	d1f5      	bne.n	800205c <WS2812B_StrobeEffect+0xb4>
 8002070:	e7ce      	b.n	8002010 <WS2812B_StrobeEffect+0x68>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	200000e8 	.word	0x200000e8
 8002078:	200000e5 	.word	0x200000e5
 800207c:	20000000 	.word	0x20000000
 8002080:	20000012 	.word	0x20000012
 8002084:	200000e4 	.word	0x200000e4
 8002088:	20000134 	.word	0x20000134

0800208c <WS2812B_Wheel>:

uint32_t WS2812B_Wheel(uint8_t wheelPos)
{
    wheelPos = 255 - wheelPos;
 800208c:	43c3      	mvns	r3, r0
 800208e:	b2db      	uxtb	r3, r3
{
 8002090:	b510      	push	{r4, lr}
    if(wheelPos < 85) {
 8002092:	2b54      	cmp	r3, #84	@ 0x54
 8002094:	d80a      	bhi.n	80020ac <WS2812B_Wheel+0x20>
        return WS2812B_Color(255 - wheelPos * 3, 0, wheelPos * 3);
 8002096:	2100      	movs	r1, #0
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	b2d8      	uxtb	r0, r3
 800209e:	4242      	negs	r2, r0
 80020a0:	3801      	subs	r0, #1
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	b2c0      	uxtb	r0, r0
    if(wheelPos < 170) {
        wheelPos -= 85;
        return WS2812B_Color(0, wheelPos * 3, 255 - wheelPos * 3);
    }
    wheelPos -= 170;
    return WS2812B_Color(wheelPos * 3, 255 - wheelPos * 3, 0);
 80020a6:	f7ff fca3 	bl	80019f0 <WS2812B_Color>
}
 80020aa:	bd10      	pop	{r4, pc}
    if(wheelPos < 170) {
 80020ac:	2103      	movs	r1, #3
 80020ae:	2ba9      	cmp	r3, #169	@ 0xa9
 80020b0:	d808      	bhi.n	80020c4 <WS2812B_Wheel+0x38>
        wheelPos -= 85;
 80020b2:	2356      	movs	r3, #86	@ 0x56
 80020b4:	425b      	negs	r3, r3
 80020b6:	1a1b      	subs	r3, r3, r0
        return WS2812B_Color(0, wheelPos * 3, 255 - wheelPos * 3);
 80020b8:	4359      	muls	r1, r3
 80020ba:	b2c9      	uxtb	r1, r1
 80020bc:	43ca      	mvns	r2, r1
 80020be:	2000      	movs	r0, #0
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	e7f0      	b.n	80020a6 <WS2812B_Wheel+0x1a>
    wheelPos -= 170;
 80020c4:	2355      	movs	r3, #85	@ 0x55
 80020c6:	1a1b      	subs	r3, r3, r0
    return WS2812B_Color(wheelPos * 3, 255 - wheelPos * 3, 0);
 80020c8:	4359      	muls	r1, r3
 80020ca:	b2c8      	uxtb	r0, r1
 80020cc:	43c1      	mvns	r1, r0
 80020ce:	2200      	movs	r2, #0
 80020d0:	b2c9      	uxtb	r1, r1
 80020d2:	e7e8      	b.n	80020a6 <WS2812B_Wheel+0x1a>

080020d4 <WS2812B_RainbowEffect>:
{
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (HAL_GetTick() - lastUpdate < 60) return;
 80020d6:	f000 f965 	bl	80023a4 <HAL_GetTick>
 80020da:	4c10      	ldr	r4, [pc, #64]	@ (800211c <WS2812B_RainbowEffect+0x48>)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	1ac0      	subs	r0, r0, r3
 80020e0:	283b      	cmp	r0, #59	@ 0x3b
 80020e2:	d919      	bls.n	8002118 <WS2812B_RainbowEffect+0x44>
    lastUpdate = HAL_GetTick();
 80020e4:	f000 f95e 	bl	80023a4 <HAL_GetTick>
        currentColors[i] = WS2812B_Wheel((i + rainbowStep) & 255);
 80020e8:	4d0d      	ldr	r5, [pc, #52]	@ (8002120 <WS2812B_RainbowEffect+0x4c>)
    lastUpdate = HAL_GetTick();
 80020ea:	6020      	str	r0, [r4, #0]
        currentColors[i] = WS2812B_Wheel((i + rainbowStep) & 255);
 80020ec:	782c      	ldrb	r4, [r5, #0]
    globalBrightness = baseBrightness;
 80020ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <WS2812B_RainbowEffect+0x50>)
 80020f0:	0026      	movs	r6, r4
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <WS2812B_RainbowEffect+0x54>)
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	364c      	adds	r6, #76	@ 0x4c
 80020f8:	4f0c      	ldr	r7, [pc, #48]	@ (800212c <WS2812B_RainbowEffect+0x58>)
 80020fa:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < LED_COUNT; i++) {
 80020fc:	b2f6      	uxtb	r6, r6
        currentColors[i] = WS2812B_Wheel((i + rainbowStep) & 255);
 80020fe:	0020      	movs	r0, r4
 8002100:	f7ff ffc4 	bl	800208c <WS2812B_Wheel>
    for(uint16_t i = 0; i < LED_COUNT; i++) {
 8002104:	3401      	adds	r4, #1
 8002106:	b2e4      	uxtb	r4, r4
        currentColors[i] = WS2812B_Wheel((i + rainbowStep) & 255);
 8002108:	c701      	stmia	r7!, {r0}
    for(uint16_t i = 0; i < LED_COUNT; i++) {
 800210a:	42b4      	cmp	r4, r6
 800210c:	d1f7      	bne.n	80020fe <WS2812B_RainbowEffect+0x2a>
    WS2812B_SendToLEDs();
 800210e:	f7ff fce5 	bl	8001adc <WS2812B_SendToLEDs>
    rainbowStep += 3;
 8002112:	782b      	ldrb	r3, [r5, #0]
 8002114:	3303      	adds	r3, #3
 8002116:	702b      	strb	r3, [r5, #0]
}
 8002118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	20000110 	.word	0x20000110
 8002120:	2000010c 	.word	0x2000010c
 8002124:	20000000 	.word	0x20000000
 8002128:	20000012 	.word	0x20000012
 800212c:	20000134 	.word	0x20000134

08002130 <WS2812B_ColorShiftEffect>:
{
 8002130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (HAL_GetTick() - lastUpdate < 40) return;
 8002132:	f000 f937 	bl	80023a4 <HAL_GetTick>
 8002136:	4c1b      	ldr	r4, [pc, #108]	@ (80021a4 <WS2812B_ColorShiftEffect+0x74>)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	1ac0      	subs	r0, r0, r3
 800213c:	2827      	cmp	r0, #39	@ 0x27
 800213e:	d92f      	bls.n	80021a0 <WS2812B_ColorShiftEffect+0x70>
    lastUpdate = HAL_GetTick();
 8002140:	f000 f930 	bl	80023a4 <HAL_GetTick>
 8002144:	6020      	str	r0, [r4, #0]
    for(int i = W_START; i <= W_END; i++) {
 8002146:	2400      	movs	r4, #0
    globalBrightness = baseBrightness;
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <WS2812B_ColorShiftEffect+0x78>)
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <WS2812B_ColorShiftEffect+0x7c>)
 800214c:	7812      	ldrb	r2, [r2, #0]
        currentColors[i] = WS2812B_Wheel(hue);
 800214e:	4e18      	ldr	r6, [pc, #96]	@ (80021b0 <WS2812B_ColorShiftEffect+0x80>)
    globalBrightness = baseBrightness;
 8002150:	701a      	strb	r2, [r3, #0]
        currentColors[i] = WS2812B_Wheel(hue);
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <WS2812B_ColorShiftEffect+0x84>)
 8002154:	781d      	ldrb	r5, [r3, #0]
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	0028      	movs	r0, r5
 800215a:	f7ff ff97 	bl	800208c <WS2812B_Wheel>
 800215e:	00a3      	lsls	r3, r4, #2
    for(int i = W_START; i <= W_END; i++) {
 8002160:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Wheel(hue);
 8002162:	50f0      	str	r0, [r6, r3]
    for(int i = W_START; i <= W_END; i++) {
 8002164:	2c15      	cmp	r4, #21
 8002166:	d1f7      	bne.n	8002158 <WS2812B_ColorShiftEffect+0x28>
        currentColors[i] = WS2812B_Wheel(hue + 60);
 8002168:	002f      	movs	r7, r5
 800216a:	373c      	adds	r7, #60	@ 0x3c
    for(int i = R_START; i <= R_END; i++) {
 800216c:	3c01      	subs	r4, #1
        currentColors[i] = WS2812B_Wheel(hue + 60);
 800216e:	b2ff      	uxtb	r7, r7
 8002170:	0038      	movs	r0, r7
 8002172:	f7ff ff8b 	bl	800208c <WS2812B_Wheel>
 8002176:	00a3      	lsls	r3, r4, #2
    for(int i = R_START; i <= R_END; i++) {
 8002178:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Wheel(hue + 60);
 800217a:	50f0      	str	r0, [r6, r3]
    for(int i = R_START; i <= R_END; i++) {
 800217c:	2c1d      	cmp	r4, #29
 800217e:	d1f7      	bne.n	8002170 <WS2812B_ColorShiftEffect+0x40>
        currentColors[i] = WS2812B_Wheel(hue + 120);
 8002180:	002f      	movs	r7, r5
 8002182:	3778      	adds	r7, #120	@ 0x78
 8002184:	b2ff      	uxtb	r7, r7
 8002186:	0038      	movs	r0, r7
 8002188:	f7ff ff80 	bl	800208c <WS2812B_Wheel>
 800218c:	00a3      	lsls	r3, r4, #2
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 800218e:	3401      	adds	r4, #1
        currentColors[i] = WS2812B_Wheel(hue + 120);
 8002190:	50f0      	str	r0, [r6, r3]
    for(int i = R_END + 1; i < LED_COUNT; i++) {
 8002192:	2c4c      	cmp	r4, #76	@ 0x4c
 8002194:	d1f7      	bne.n	8002186 <WS2812B_ColorShiftEffect+0x56>
    hue += 2;
 8002196:	9b01      	ldr	r3, [sp, #4]
 8002198:	3502      	adds	r5, #2
 800219a:	701d      	strb	r5, [r3, #0]
    WS2812B_SendToLEDs();
 800219c:	f7ff fc9e 	bl	8001adc <WS2812B_SendToLEDs>
}
 80021a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	200000f0 	.word	0x200000f0
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000012 	.word	0x20000012
 80021b0:	20000134 	.word	0x20000134
 80021b4:	200000ec 	.word	0x200000ec

080021b8 <WS2812B_TriggerStaticLogoUpdate>:
}

// Function to trigger static logo update (call when brightness changes)
void WS2812B_TriggerStaticLogoUpdate(void)
{
    staticLogoNeedsUpdate = 1;
 80021b8:	2201      	movs	r2, #1
 80021ba:	4b01      	ldr	r3, [pc, #4]	@ (80021c0 <WS2812B_TriggerStaticLogoUpdate+0x8>)
 80021bc:	701a      	strb	r2, [r3, #0]
}
 80021be:	4770      	bx	lr
 80021c0:	20000011 	.word	0x20000011

080021c4 <ws_random_byte>:

uint32_t ws_random_byte(uint32_t max)
{
    static uint32_t seed = 1;
    seed = seed * 1664525 + 1013904223;
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <ws_random_byte+0x1c>)
{
 80021c6:	0001      	movs	r1, r0
    seed = seed * 1664525 + 1013904223;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <ws_random_byte+0x20>)
 80021ca:	6810      	ldr	r0, [r2, #0]
{
 80021cc:	b510      	push	{r4, lr}
    seed = seed * 1664525 + 1013904223;
 80021ce:	4343      	muls	r3, r0
 80021d0:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <ws_random_byte+0x24>)
 80021d2:	181b      	adds	r3, r3, r0
 80021d4:	6013      	str	r3, [r2, #0]
    return (seed >> 16) % max;
 80021d6:	0c18      	lsrs	r0, r3, #16
 80021d8:	f7fe f826 	bl	8000228 <__aeabi_uidivmod>
 80021dc:	0008      	movs	r0, r1
}
 80021de:	bd10      	pop	{r4, pc}
 80021e0:	20000008 	.word	0x20000008
 80021e4:	0019660d 	.word	0x0019660d
 80021e8:	3c6ef35f 	.word	0x3c6ef35f

080021ec <WS2812B_SparkleEffect>:
{
 80021ec:	b570      	push	{r4, r5, r6, lr}
    if (HAL_GetTick() - lastSparkle < 150) return;
 80021ee:	f000 f8d9 	bl	80023a4 <HAL_GetTick>
 80021f2:	4c14      	ldr	r4, [pc, #80]	@ (8002244 <WS2812B_SparkleEffect+0x58>)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	1ac0      	subs	r0, r0, r3
 80021f8:	2895      	cmp	r0, #149	@ 0x95
 80021fa:	d91d      	bls.n	8002238 <WS2812B_SparkleEffect+0x4c>
    lastSparkle = HAL_GetTick();
 80021fc:	f000 f8d2 	bl	80023a4 <HAL_GetTick>
    globalBrightness = baseBrightness;
 8002200:	4a11      	ldr	r2, [pc, #68]	@ (8002248 <WS2812B_SparkleEffect+0x5c>)
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <WS2812B_SparkleEffect+0x60>)
 8002204:	7812      	ldrb	r2, [r2, #0]
    if (sparkleState == 0) {
 8002206:	4d12      	ldr	r5, [pc, #72]	@ (8002250 <WS2812B_SparkleEffect+0x64>)
    globalBrightness = baseBrightness;
 8002208:	701a      	strb	r2, [r3, #0]
    if (sparkleState == 0) {
 800220a:	782b      	ldrb	r3, [r5, #0]
    lastSparkle = HAL_GetTick();
 800220c:	6020      	str	r0, [r4, #0]
    if (sparkleState == 0) {
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <WS2812B_SparkleEffect+0x4e>
        WS2812B_SetLogoColors();
 8002212:	f7ff fc91 	bl	8001b38 <WS2812B_SetLogoColors>
        sparklePixel = W_START + ws_random_byte(W_END - W_START + 1);
 8002216:	2015      	movs	r0, #21
 8002218:	f7ff ffd4 	bl	80021c4 <ws_random_byte>
        currentColors[sparklePixel] = WS2812B_Color(255, 255, 255);
 800221c:	22ff      	movs	r2, #255	@ 0xff
        sparklePixel = W_START + ws_random_byte(W_END - W_START + 1);
 800221e:	0004      	movs	r4, r0
        currentColors[sparklePixel] = WS2812B_Color(255, 255, 255);
 8002220:	0011      	movs	r1, r2
 8002222:	0010      	movs	r0, r2
 8002224:	f7ff fbe4 	bl	80019f0 <WS2812B_Color>
 8002228:	b2a4      	uxth	r4, r4
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <WS2812B_SparkleEffect+0x68>)
 800222c:	00a4      	lsls	r4, r4, #2
 800222e:	5118      	str	r0, [r3, r4]
        sparkleState = 1;
 8002230:	2301      	movs	r3, #1
 8002232:	702b      	strb	r3, [r5, #0]
    WS2812B_SendToLEDs();
 8002234:	f7ff fc52 	bl	8001adc <WS2812B_SendToLEDs>
}
 8002238:	bd70      	pop	{r4, r5, r6, pc}
        WS2812B_SetLogoColors();
 800223a:	f7ff fc7d 	bl	8001b38 <WS2812B_SetLogoColors>
 800223e:	2300      	movs	r3, #0
 8002240:	e7f7      	b.n	8002232 <WS2812B_SparkleEffect+0x46>
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	20000128 	.word	0x20000128
 8002248:	20000000 	.word	0x20000000
 800224c:	20000012 	.word	0x20000012
 8002250:	20000124 	.word	0x20000124
 8002254:	20000134 	.word	0x20000134

08002258 <WS2812B_RunEffect>:
{
 8002258:	b510      	push	{r4, lr}
	    if (mode != lastMode) {
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <WS2812B_RunEffect+0x70>)
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	4282      	cmp	r2, r0
 8002260:	d009      	beq.n	8002276 <WS2812B_RunEffect+0x1e>
	        if (mode == MODE_STATIC_LOGO) {
 8002262:	2800      	cmp	r0, #0
 8002264:	d106      	bne.n	8002274 <WS2812B_RunEffect+0x1c>
	            staticLogoNeedsUpdate = 1;
 8002266:	2101      	movs	r1, #1
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <WS2812B_RunEffect+0x74>)
	        lastMode = mode;
 800226a:	7018      	strb	r0, [r3, #0]
	            staticLogoNeedsUpdate = 1;
 800226c:	7011      	strb	r1, [r2, #0]
	                WS2812B_StaticLogoEffect();
 800226e:	f7ff fca3 	bl	8001bb8 <WS2812B_StaticLogoEffect>
}
 8002272:	bd10      	pop	{r4, pc}
	        lastMode = mode;
 8002274:	7018      	strb	r0, [r3, #0]
	    switch(mode) {
 8002276:	3801      	subs	r0, #1
 8002278:	2809      	cmp	r0, #9
 800227a:	d8f8      	bhi.n	800226e <WS2812B_RunEffect+0x16>
 800227c:	f7fd ff44 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002280:	0e0b0805 	.word	0x0e0b0805
 8002284:	1a171411 	.word	0x1a171411
 8002288:	201d      	.short	0x201d
	                WS2812B_BreatheEffect();
 800228a:	f7ff fca9 	bl	8001be0 <WS2812B_BreatheEffect>
	                break;
 800228e:	e7f0      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_SparkleEffect();
 8002290:	f7ff ffac 	bl	80021ec <WS2812B_SparkleEffect>
	                break;
 8002294:	e7ed      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_WaveEffect();
 8002296:	f7ff fcd9 	bl	8001c4c <WS2812B_WaveEffect>
	                break;
 800229a:	e7ea      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_PulseEffect();
 800229c:	f7ff fd1c 	bl	8001cd8 <WS2812B_PulseEffect>
	                break;
 80022a0:	e7e7      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_RainbowEffect();
 80022a2:	f7ff ff17 	bl	80020d4 <WS2812B_RainbowEffect>
	                break;
 80022a6:	e7e4      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_CometEffect();
 80022a8:	f7ff fd3e 	bl	8001d28 <WS2812B_CometEffect>
	                break;
 80022ac:	e7e1      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_FillEffect();
 80022ae:	f7ff fdbb 	bl	8001e28 <WS2812B_FillEffect>
	                break;
 80022b2:	e7de      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_ScannerEffect();
 80022b4:	f7ff fe1a 	bl	8001eec <WS2812B_ScannerEffect>
	                break;
 80022b8:	e7db      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_ColorShiftEffect();
 80022ba:	f7ff ff39 	bl	8002130 <WS2812B_ColorShiftEffect>
	                break;
 80022be:	e7d8      	b.n	8002272 <WS2812B_RunEffect+0x1a>
	                WS2812B_StrobeEffect();
 80022c0:	f7ff fe72 	bl	8001fa8 <WS2812B_StrobeEffect>
}
 80022c4:	e7d5      	b.n	8002272 <WS2812B_RunEffect+0x1a>
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	20000011 	.word	0x20000011

080022d0 <Reset_Handler>:
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <LoopForever+0x2>)
 80022d2:	4685      	mov	sp, r0
 80022d4:	f7ff fb8a 	bl	80019ec <SystemInit>
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
 80022de:	2300      	movs	r3, #0
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:
 80022e2:	58d4      	ldr	r4, [r2, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:
 80022e8:	18c4      	adds	r4, r0, r3
 80022ea:	428c      	cmp	r4, r1
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
 80022f2:	2300      	movs	r3, #0
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:
 80022fa:	42a2      	cmp	r2, r4
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>
 80022fe:	f001 fb3f 	bl	8003980 <__libc_init_array>
 8002302:	f7ff fa29 	bl	8001758 <main>

08002306 <LoopForever>:
 8002306:	e7fe      	b.n	8002306 <LoopForever>
 8002308:	20001000 	.word	0x20001000
 800230c:	20000000 	.word	0x20000000
 8002310:	20000018 	.word	0x20000018
 8002314:	08003a20 	.word	0x08003a20
 8002318:	20000018 	.word	0x20000018
 800231c:	200009e0 	.word	0x200009e0

08002320 <ADC1_IRQHandler>:
 8002320:	e7fe      	b.n	8002320 <ADC1_IRQHandler>
	...

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	20fa      	movs	r0, #250	@ 0xfa
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_InitTick+0x3c>)
 800232c:	0080      	lsls	r0, r0, #2
 800232e:	7819      	ldrb	r1, [r3, #0]
 8002330:	f7fd fef4 	bl	800011c <__udivsi3>
 8002334:	4c0b      	ldr	r4, [pc, #44]	@ (8002364 <HAL_InitTick+0x40>)
 8002336:	0001      	movs	r1, r0
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	f7fd feef 	bl	800011c <__udivsi3>
 800233e:	f000 f87f 	bl	8002440 <HAL_SYSTICK_Config>
 8002342:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002346:	2c00      	cmp	r4, #0
 8002348:	d109      	bne.n	800235e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	2d03      	cmp	r5, #3
 800234c:	d807      	bhi.n	800235e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234e:	3802      	subs	r0, #2
 8002350:	0022      	movs	r2, r4
 8002352:	0029      	movs	r1, r5
 8002354:	f000 f83e 	bl	80023d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	0020      	movs	r0, r4
 800235a:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_InitTick+0x44>)
 800235c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	20000013 	.word	0x20000013
 8002364:	20000004 	.word	0x20000004
 8002368:	20000014 	.word	0x20000014

0800236c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	2310      	movs	r3, #16
 800236e:	4a06      	ldr	r2, [pc, #24]	@ (8002388 <HAL_Init+0x1c>)
{
 8002370:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002372:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002374:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002376:	430b      	orrs	r3, r1
 8002378:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	f7ff ffd3 	bl	8002324 <HAL_InitTick>
  HAL_MspInit();
 800237e:	f7ff faa3 	bl	80018c8 <HAL_MspInit>
}
 8002382:	2000      	movs	r0, #0
 8002384:	bd10      	pop	{r4, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	40022000 	.word	0x40022000

0800238c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800238c:	4a03      	ldr	r2, [pc, #12]	@ (800239c <HAL_IncTick+0x10>)
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <HAL_IncTick+0x14>)
 8002390:	6811      	ldr	r1, [r2, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	185b      	adds	r3, r3, r1
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	4770      	bx	lr
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	200009b8 	.word	0x200009b8
 80023a0:	20000013 	.word	0x20000013

080023a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023a4:	4b01      	ldr	r3, [pc, #4]	@ (80023ac <HAL_GetTick+0x8>)
 80023a6:	6818      	ldr	r0, [r3, #0]
}
 80023a8:	4770      	bx	lr
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	200009b8 	.word	0x200009b8

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fff6 	bl	80023a4 <HAL_GetTick>
 80023b8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	1c63      	adds	r3, r4, #1
 80023bc:	d002      	beq.n	80023c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <HAL_Delay+0x20>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	1b40      	subs	r0, r0, r5
 80023ca:	42a0      	cmp	r0, r4
 80023cc:	d3fa      	bcc.n	80023c4 <HAL_Delay+0x14>
  {
  }
}
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	20000013 	.word	0x20000013

080023d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d6:	24ff      	movs	r4, #255	@ 0xff
 80023d8:	2203      	movs	r2, #3
 80023da:	000b      	movs	r3, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	4002      	ands	r2, r0
 80023e0:	00d2      	lsls	r2, r2, #3
 80023e2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ea:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80023ec:	2800      	cmp	r0, #0
 80023ee:	db0a      	blt.n	8002406 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f0:	24c0      	movs	r4, #192	@ 0xc0
 80023f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002420 <HAL_NVIC_SetPriority+0x4c>)
 80023f4:	0880      	lsrs	r0, r0, #2
 80023f6:	0080      	lsls	r0, r0, #2
 80023f8:	1880      	adds	r0, r0, r2
 80023fa:	00a4      	lsls	r4, r4, #2
 80023fc:	5902      	ldr	r2, [r0, r4]
 80023fe:	400a      	ands	r2, r1
 8002400:	4313      	orrs	r3, r2
 8002402:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002404:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002406:	220f      	movs	r2, #15
 8002408:	4010      	ands	r0, r2
 800240a:	3808      	subs	r0, #8
 800240c:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <HAL_NVIC_SetPriority+0x50>)
 800240e:	0880      	lsrs	r0, r0, #2
 8002410:	0080      	lsls	r0, r0, #2
 8002412:	1880      	adds	r0, r0, r2
 8002414:	69c2      	ldr	r2, [r0, #28]
 8002416:	4011      	ands	r1, r2
 8002418:	4319      	orrs	r1, r3
 800241a:	61c1      	str	r1, [r0, #28]
 800241c:	e7f2      	b.n	8002404 <HAL_NVIC_SetPriority+0x30>
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002428:	2800      	cmp	r0, #0
 800242a:	db05      	blt.n	8002438 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242c:	231f      	movs	r3, #31
 800242e:	4018      	ands	r0, r3
 8002430:	3b1e      	subs	r3, #30
 8002432:	4083      	lsls	r3, r0
 8002434:	4a01      	ldr	r2, [pc, #4]	@ (800243c <HAL_NVIC_EnableIRQ+0x14>)
 8002436:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002438:	4770      	bx	lr
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	e000e100 	.word	0xe000e100

08002440 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	2280      	movs	r2, #128	@ 0x80
 8002442:	1e43      	subs	r3, r0, #1
 8002444:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	4293      	cmp	r3, r2
 800244a:	d20d      	bcs.n	8002468 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a07      	ldr	r2, [pc, #28]	@ (800246c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	0609      	lsls	r1, r1, #24
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	430b      	orrs	r3, r1
 800245e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002468:	4770      	bx	lr
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	e000e010 	.word	0xe000e010
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
  if (NULL == hdma)
 800247a:	2c00      	cmp	r4, #0
 800247c:	d024      	beq.n	80024c8 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	1ca5      	adds	r5, r4, #2
 8002482:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002484:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8002488:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800248a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800248c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800248e:	6863      	ldr	r3, [r4, #4]
 8002490:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	68e1      	ldr	r1, [r4, #12]
 8002494:	430b      	orrs	r3, r1
 8002496:	6921      	ldr	r1, [r4, #16]
 8002498:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	6961      	ldr	r1, [r4, #20]
 800249c:	430b      	orrs	r3, r1
 800249e:	69a1      	ldr	r1, [r4, #24]
 80024a0:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	69e1      	ldr	r1, [r4, #28]
 80024a4:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80024a6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024a8:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_DMA_Init+0x5c>)
 80024ac:	2114      	movs	r1, #20
 80024ae:	18c0      	adds	r0, r0, r3
 80024b0:	f7fd fe34 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024b6:	0080      	lsls	r0, r0, #2
 80024b8:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ba:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024bc:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 80024c2:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80024c4:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80024c6:	77e0      	strb	r0, [r4, #31]
}
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	ffffc00f 	.word	0xffffc00f
 80024d0:	bffdfff8 	.word	0xbffdfff8
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_DMA_Start_IT>:
{
 80024d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80024da:	1c44      	adds	r4, r0, #1
{
 80024dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80024de:	7fe5      	ldrb	r5, [r4, #31]
 80024e0:	2d01      	cmp	r5, #1
 80024e2:	d033      	beq.n	800254c <HAL_DMA_Start_IT+0x74>
 80024e4:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80024e6:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 80024e8:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80024ea:	7ffd      	ldrb	r5, [r7, #31]
 80024ec:	2600      	movs	r6, #0
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4663      	mov	r3, ip
 80024f2:	b2ed      	uxtb	r5, r5
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d128      	bne.n	800254a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	2402      	movs	r4, #2
 80024fa:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024fc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fe:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002500:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002502:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002504:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002506:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002508:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 800250a:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800250c:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 800250e:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002510:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002512:	6843      	ldr	r3, [r0, #4]
 8002514:	2b10      	cmp	r3, #16
 8002516:	d10e      	bne.n	8002536 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8002518:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800251a:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800251c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800251e:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002524:	230e      	movs	r3, #14
 8002526:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002528:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800252a:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	6023      	str	r3, [r4, #0]
}
 8002534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002536:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002538:	60e2      	str	r2, [r4, #12]
 800253a:	e7ef      	b.n	800251c <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800253c:	230a      	movs	r3, #10
 800253e:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002540:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002542:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	4393      	bics	r3, r2
 8002548:	e7ee      	b.n	8002528 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800254a:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 800254c:	2002      	movs	r0, #2
 800254e:	e7f1      	b.n	8002534 <HAL_DMA_Start_IT+0x5c>

08002550 <HAL_DMA_Abort_IT>:
{
 8002550:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002552:	1c84      	adds	r4, r0, #2
 8002554:	7fe3      	ldrb	r3, [r4, #31]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	2304      	movs	r3, #4
 800255c:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800255e:	2001      	movs	r0, #1
}
 8002560:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002562:	210e      	movs	r1, #14
 8002564:	6803      	ldr	r3, [r0, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800256c:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800256e:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	4391      	bics	r1, r2
 8002574:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002576:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002578:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800257a:	408d      	lsls	r5, r1
 800257c:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800257e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002580:	1883      	adds	r3, r0, r2
 8002582:	2200      	movs	r2, #0
 8002584:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8002586:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002588:	4293      	cmp	r3, r2
 800258a:	d000      	beq.n	800258e <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 800258c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2000      	movs	r0, #0
 8002590:	e7e6      	b.n	8002560 <HAL_DMA_Abort_IT+0x10>

08002592 <HAL_DMA_IRQHandler>:
{
 8002592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002594:	2704      	movs	r7, #4
 8002596:	003e      	movs	r6, r7
 8002598:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800259a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800259c:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800259e:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80025a0:	6803      	ldr	r3, [r0, #0]
 80025a2:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025a4:	4235      	tst	r5, r6
 80025a6:	d00d      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x32>
 80025a8:	423c      	tst	r4, r7
 80025aa:	d00b      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	0689      	lsls	r1, r1, #26
 80025b0:	d402      	bmi.n	80025b8 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	43b9      	bics	r1, r7
 80025b6:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80025b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025ba:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d019      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 80025c0:	4798      	blx	r3
}
 80025c2:	e017      	b.n	80025f4 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025c4:	2702      	movs	r7, #2
 80025c6:	003e      	movs	r6, r7
 80025c8:	408e      	lsls	r6, r1
 80025ca:	4235      	tst	r5, r6
 80025cc:	d013      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x64>
 80025ce:	423c      	tst	r4, r7
 80025d0:	d011      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	0689      	lsls	r1, r1, #26
 80025d6:	d406      	bmi.n	80025e6 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025d8:	240a      	movs	r4, #10
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	43a1      	bics	r1, r4
 80025de:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80025e0:	2101      	movs	r1, #1
 80025e2:	19c3      	adds	r3, r0, r7
 80025e4:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025e6:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 80025e8:	2200      	movs	r2, #0
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80025ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d1e5      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x2e>
}
 80025f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025f6:	2608      	movs	r6, #8
 80025f8:	0037      	movs	r7, r6
 80025fa:	408f      	lsls	r7, r1
 80025fc:	423d      	tst	r5, r7
 80025fe:	d0f9      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x62>
 8002600:	4234      	tst	r4, r6
 8002602:	d0f7      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002604:	250e      	movs	r5, #14
 8002606:	681c      	ldr	r4, [r3, #0]
 8002608:	43ac      	bics	r4, r5
 800260a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800260c:	2301      	movs	r3, #1
 800260e:	001c      	movs	r4, r3
 8002610:	408c      	lsls	r4, r1
 8002612:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002614:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002616:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002618:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800261a:	2200      	movs	r2, #0
 800261c:	18c3      	adds	r3, r0, r3
 800261e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002620:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002622:	e7e5      	b.n	80025f0 <HAL_DMA_IRQHandler+0x5e>

08002624 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002624:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <FLASH_SetErrorCode+0x34>)
 8002626:	2110      	movs	r1, #16
 8002628:	68d0      	ldr	r0, [r2, #12]
{
 800262a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800262c:	0003      	movs	r3, r0
 800262e:	400b      	ands	r3, r1
 8002630:	4208      	tst	r0, r1
 8002632:	d005      	beq.n	8002640 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002634:	2302      	movs	r3, #2
 8002636:	4809      	ldr	r0, [pc, #36]	@ (800265c <FLASH_SetErrorCode+0x38>)
 8002638:	69c4      	ldr	r4, [r0, #28]
 800263a:	4323      	orrs	r3, r4
 800263c:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800263e:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002640:	2004      	movs	r0, #4
 8002642:	68d1      	ldr	r1, [r2, #12]
 8002644:	4201      	tst	r1, r0
 8002646:	d005      	beq.n	8002654 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002648:	2101      	movs	r1, #1
 800264a:	4c04      	ldr	r4, [pc, #16]	@ (800265c <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 800264c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800264e:	69e5      	ldr	r5, [r4, #28]
 8002650:	4329      	orrs	r1, r5
 8002652:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002654:	60d3      	str	r3, [r2, #12]
}  
 8002656:	bd30      	pop	{r4, r5, pc}
 8002658:	40022000 	.word	0x40022000
 800265c:	200009c0 	.word	0x200009c0

08002660 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	0612      	lsls	r2, r2, #24
 8002668:	d506      	bpl.n	8002678 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <HAL_FLASH_Unlock+0x20>)
 800266c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_FLASH_Unlock+0x24>)
 8002670:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002672:	6918      	ldr	r0, [r3, #16]
 8002674:	0600      	lsls	r0, r0, #24
 8002676:	0fc0      	lsrs	r0, r0, #31
}
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	40022000 	.word	0x40022000
 8002680:	45670123 	.word	0x45670123
 8002684:	cdef89ab 	.word	0xcdef89ab

08002688 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	4a03      	ldr	r2, [pc, #12]	@ (8002698 <HAL_FLASH_Lock+0x10>)
}
 800268c:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800268e:	6911      	ldr	r1, [r2, #16]
 8002690:	430b      	orrs	r3, r1
 8002692:	6113      	str	r3, [r2, #16]
}
 8002694:	4770      	bx	lr
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	40022000 	.word	0x40022000

0800269c <FLASH_WaitForLastOperation>:
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff fe80 	bl	80023a4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026a4:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80026a6:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026a8:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <FLASH_WaitForLastOperation+0x50>)
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4232      	tst	r2, r6
 80026ae:	d111      	bne.n	80026d4 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80026b0:	2220      	movs	r2, #32
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	4211      	tst	r1, r2
 80026b6:	d000      	beq.n	80026ba <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026b8:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	2210      	movs	r2, #16
 80026be:	0008      	movs	r0, r1
 80026c0:	4010      	ands	r0, r2
 80026c2:	4211      	tst	r1, r2
 80026c4:	d102      	bne.n	80026cc <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80026c6:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80026c8:	075b      	lsls	r3, r3, #29
 80026ca:	d508      	bpl.n	80026de <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 80026cc:	f7ff ffaa 	bl	8002624 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026d0:	2001      	movs	r0, #1
 80026d2:	e004      	b.n	80026de <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80026d4:	1c62      	adds	r2, r4, #1
 80026d6:	d0e8      	beq.n	80026aa <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026d8:	2c00      	cmp	r4, #0
 80026da:	d101      	bne.n	80026e0 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
}
 80026de:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026e0:	f7ff fe60 	bl	80023a4 <HAL_GetTick>
 80026e4:	1b40      	subs	r0, r0, r5
 80026e6:	42a0      	cmp	r0, r4
 80026e8:	d9de      	bls.n	80026a8 <FLASH_WaitForLastOperation+0xc>
 80026ea:	e7f7      	b.n	80026dc <FLASH_WaitForLastOperation+0x40>
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_FLASH_Program>:
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 80026f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_FLASH_Program+0x80>)
{
 80026f8:	9100      	str	r1, [sp, #0]
 80026fa:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 80026fc:	7e1a      	ldrb	r2, [r3, #24]
{
 80026fe:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8002700:	2002      	movs	r0, #2
 8002702:	2a01      	cmp	r2, #1
 8002704:	d031      	beq.n	800276a <HAL_FLASH_Program+0x7a>
 8002706:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002708:	481a      	ldr	r0, [pc, #104]	@ (8002774 <HAL_FLASH_Program+0x84>)
  __HAL_LOCK(&pFlash);
 800270a:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800270c:	f7ff ffc6 	bl	800269c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002710:	2800      	cmp	r0, #0
 8002712:	d127      	bne.n	8002764 <HAL_FLASH_Program+0x74>
      nbiterations = 1U;
 8002714:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002716:	2c01      	cmp	r4, #1
 8002718:	d003      	beq.n	8002722 <HAL_FLASH_Program+0x32>
      nbiterations = 4U;
 800271a:	2604      	movs	r6, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800271c:	2c02      	cmp	r4, #2
 800271e:	d100      	bne.n	8002722 <HAL_FLASH_Program+0x32>
      nbiterations = 2U;
 8002720:	0026      	movs	r6, r4
      nbiterations = 4U;
 8002722:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_FLASH_Program+0x80>)
 8002726:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002728:	9802      	ldr	r0, [sp, #8]
 800272a:	9903      	ldr	r1, [sp, #12]
 800272c:	0122      	lsls	r2, r4, #4
 800272e:	f7fd fe6b 	bl	8000408 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002732:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002734:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002736:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002738:	4d0f      	ldr	r5, [pc, #60]	@ (8002778 <HAL_FLASH_Program+0x88>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800273a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800273c:	692b      	ldr	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 800273e:	9a00      	ldr	r2, [sp, #0]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002740:	433b      	orrs	r3, r7
 8002742:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8002744:	0063      	lsls	r3, r4, #1
 8002746:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002748:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 800274a:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800274c:	4809      	ldr	r0, [pc, #36]	@ (8002774 <HAL_FLASH_Program+0x84>)
 800274e:	f7ff ffa5 	bl	800269c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002752:	692b      	ldr	r3, [r5, #16]
 8002754:	43bb      	bics	r3, r7
 8002756:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8002758:	2800      	cmp	r0, #0
 800275a:	d103      	bne.n	8002764 <HAL_FLASH_Program+0x74>
    for (index = 0U; index < nbiterations; index++)
 800275c:	19e4      	adds	r4, r4, r7
 800275e:	b2e3      	uxtb	r3, r4
 8002760:	429e      	cmp	r6, r3
 8002762:	d8e1      	bhi.n	8002728 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8002764:	2200      	movs	r2, #0
 8002766:	4b02      	ldr	r3, [pc, #8]	@ (8002770 <HAL_FLASH_Program+0x80>)
 8002768:	761a      	strb	r2, [r3, #24]
}
 800276a:	b005      	add	sp, #20
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	200009c0 	.word	0x200009c0
 8002774:	0000c350 	.word	0x0000c350
 8002778:	40022000 	.word	0x40022000

0800277c <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800277c:	2200      	movs	r2, #0
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <FLASH_MassErase+0x1c>)
 8002780:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <FLASH_MassErase+0x20>)
 8002784:	3204      	adds	r2, #4
 8002786:	6919      	ldr	r1, [r3, #16]
 8002788:	430a      	orrs	r2, r1
 800278a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800278c:	2240      	movs	r2, #64	@ 0x40
 800278e:	6919      	ldr	r1, [r3, #16]
 8002790:	430a      	orrs	r2, r1
 8002792:	611a      	str	r2, [r3, #16]
}
 8002794:	4770      	bx	lr
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	200009c0 	.word	0x200009c0
 800279c:	40022000 	.word	0x40022000

080027a0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027a0:	2200      	movs	r2, #0
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <FLASH_PageErase+0x1c>)
 80027a4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <FLASH_PageErase+0x20>)
 80027a8:	3202      	adds	r2, #2
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027b0:	2240      	movs	r2, #64	@ 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 80027b2:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
}
 80027ba:	4770      	bx	lr
 80027bc:	200009c0 	.word	0x200009c0
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_FLASHEx_Erase>:
{
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80027c6:	4f21      	ldr	r7, [pc, #132]	@ (800284c <HAL_FLASHEx_Erase+0x88>)
{
 80027c8:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80027ca:	7e3b      	ldrb	r3, [r7, #24]
{
 80027cc:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80027ce:	2002      	movs	r0, #2
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d00c      	beq.n	80027ee <HAL_FLASHEx_Erase+0x2a>
 80027d4:	2301      	movs	r3, #1
 80027d6:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027d8:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027da:	481d      	ldr	r0, [pc, #116]	@ (8002850 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d112      	bne.n	8002806 <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027e0:	f7ff ff5c 	bl	800269c <FLASH_WaitForLastOperation>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80027ea:	2300      	movs	r3, #0
 80027ec:	763b      	strb	r3, [r7, #24]
}
 80027ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80027f0:	f7ff ffc4 	bl	800277c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027f4:	4816      	ldr	r0, [pc, #88]	@ (8002850 <HAL_FLASHEx_Erase+0x8c>)
 80027f6:	f7ff ff51 	bl	800269c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80027fa:	2104      	movs	r1, #4
 80027fc:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_FLASHEx_Erase+0x90>)
 80027fe:	6913      	ldr	r3, [r2, #16]
 8002800:	438b      	bics	r3, r1
 8002802:	6113      	str	r3, [r2, #16]
 8002804:	e7f1      	b.n	80027ea <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002806:	f7ff ff49 	bl	800269c <FLASH_WaitForLastOperation>
 800280a:	2800      	cmp	r0, #0
 800280c:	d1ec      	bne.n	80027e8 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800280e:	2301      	movs	r3, #1
 8002810:	425b      	negs	r3, r3
 8002812:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002814:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002816:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002818:	68a3      	ldr	r3, [r4, #8]
 800281a:	6862      	ldr	r2, [r4, #4]
 800281c:	029b      	lsls	r3, r3, #10
 800281e:	189b      	adds	r3, r3, r2
 8002820:	42ab      	cmp	r3, r5
 8002822:	d9e2      	bls.n	80027ea <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002824:	0028      	movs	r0, r5
 8002826:	f7ff ffbb 	bl	80027a0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800282a:	4809      	ldr	r0, [pc, #36]	@ (8002850 <HAL_FLASHEx_Erase+0x8c>)
 800282c:	f7ff ff36 	bl	800269c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002830:	2102      	movs	r1, #2
 8002832:	4a08      	ldr	r2, [pc, #32]	@ (8002854 <HAL_FLASHEx_Erase+0x90>)
 8002834:	6913      	ldr	r3, [r2, #16]
 8002836:	438b      	bics	r3, r1
 8002838:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800283a:	2800      	cmp	r0, #0
 800283c:	d001      	beq.n	8002842 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800283e:	6035      	str	r5, [r6, #0]
            break;
 8002840:	e7d3      	b.n	80027ea <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	18ed      	adds	r5, r5, r3
 8002848:	e7e6      	b.n	8002818 <HAL_FLASHEx_Erase+0x54>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	200009c0 	.word	0x200009c0
 8002850:	0000c350 	.word	0x0000c350
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8002858:	2300      	movs	r3, #0
{
 800285a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	680a      	ldr	r2, [r1, #0]
 8002860:	0014      	movs	r4, r2
 8002862:	40dc      	lsrs	r4, r3
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8002866:	b007      	add	sp, #28
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800286a:	2501      	movs	r5, #1
 800286c:	0014      	movs	r4, r2
 800286e:	409d      	lsls	r5, r3
 8002870:	402c      	ands	r4, r5
 8002872:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002874:	422a      	tst	r2, r5
 8002876:	d100      	bne.n	800287a <HAL_GPIO_Init+0x22>
 8002878:	e098      	b.n	80029ac <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800287a:	684a      	ldr	r2, [r1, #4]
 800287c:	005f      	lsls	r7, r3, #1
 800287e:	4694      	mov	ip, r2
 8002880:	2203      	movs	r2, #3
 8002882:	4664      	mov	r4, ip
 8002884:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002886:	2403      	movs	r4, #3
 8002888:	40bc      	lsls	r4, r7
 800288a:	43e4      	mvns	r4, r4
 800288c:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800288e:	1e54      	subs	r4, r2, #1
 8002890:	2c01      	cmp	r4, #1
 8002892:	d82e      	bhi.n	80028f2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8002894:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002896:	9c01      	ldr	r4, [sp, #4]
 8002898:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800289a:	68cc      	ldr	r4, [r1, #12]
 800289c:	40bc      	lsls	r4, r7
 800289e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80028a0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80028a2:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a4:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a6:	43ac      	bics	r4, r5
 80028a8:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028aa:	4664      	mov	r4, ip
 80028ac:	0924      	lsrs	r4, r4, #4
 80028ae:	4034      	ands	r4, r6
 80028b0:	409c      	lsls	r4, r3
 80028b2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80028b4:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80028b6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028b8:	9c01      	ldr	r4, [sp, #4]
 80028ba:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028bc:	688c      	ldr	r4, [r1, #8]
 80028be:	40bc      	lsls	r4, r7
 80028c0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80028c2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c4:	2a02      	cmp	r2, #2
 80028c6:	d116      	bne.n	80028f6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c8:	2507      	movs	r5, #7
 80028ca:	260f      	movs	r6, #15
 80028cc:	401d      	ands	r5, r3
 80028ce:	00ad      	lsls	r5, r5, #2
 80028d0:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80028d2:	08dc      	lsrs	r4, r3, #3
 80028d4:	00a4      	lsls	r4, r4, #2
 80028d6:	1904      	adds	r4, r0, r4
 80028d8:	9402      	str	r4, [sp, #8]
 80028da:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028dc:	9603      	str	r6, [sp, #12]
 80028de:	0026      	movs	r6, r4
 80028e0:	9c03      	ldr	r4, [sp, #12]
 80028e2:	43a6      	bics	r6, r4
 80028e4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028e6:	690e      	ldr	r6, [r1, #16]
 80028e8:	40ae      	lsls	r6, r5
 80028ea:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 80028ec:	9c02      	ldr	r4, [sp, #8]
 80028ee:	6226      	str	r6, [r4, #32]
 80028f0:	e001      	b.n	80028f6 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f2:	2a03      	cmp	r2, #3
 80028f4:	d1df      	bne.n	80028b6 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028f6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80028f8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028fa:	9d01      	ldr	r5, [sp, #4]
 80028fc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028fe:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002900:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8002902:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002904:	4662      	mov	r2, ip
 8002906:	02a4      	lsls	r4, r4, #10
 8002908:	4222      	tst	r2, r4
 800290a:	d04f      	beq.n	80029ac <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290c:	2501      	movs	r5, #1
 800290e:	4a28      	ldr	r2, [pc, #160]	@ (80029b0 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002910:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002914:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	432c      	orrs	r4, r5
 8002918:	6194      	str	r4, [r2, #24]
 800291a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800291c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	402a      	ands	r2, r5
 8002920:	9205      	str	r2, [sp, #20]
 8002922:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002924:	4a23      	ldr	r2, [pc, #140]	@ (80029b4 <HAL_GPIO_Init+0x15c>)
 8002926:	00a4      	lsls	r4, r4, #2
 8002928:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292a:	220f      	movs	r2, #15
 800292c:	3502      	adds	r5, #2
 800292e:	401d      	ands	r5, r3
 8002930:	00ad      	lsls	r5, r5, #2
 8002932:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002934:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002936:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002938:	2200      	movs	r2, #0
 800293a:	42b8      	cmp	r0, r7
 800293c:	d00c      	beq.n	8002958 <HAL_GPIO_Init+0x100>
 800293e:	4f1e      	ldr	r7, [pc, #120]	@ (80029b8 <HAL_GPIO_Init+0x160>)
 8002940:	3201      	adds	r2, #1
 8002942:	42b8      	cmp	r0, r7
 8002944:	d008      	beq.n	8002958 <HAL_GPIO_Init+0x100>
 8002946:	4f1d      	ldr	r7, [pc, #116]	@ (80029bc <HAL_GPIO_Init+0x164>)
 8002948:	3201      	adds	r2, #1
 800294a:	42b8      	cmp	r0, r7
 800294c:	d004      	beq.n	8002958 <HAL_GPIO_Init+0x100>
 800294e:	4f1c      	ldr	r7, [pc, #112]	@ (80029c0 <HAL_GPIO_Init+0x168>)
 8002950:	3203      	adds	r2, #3
 8002952:	42b8      	cmp	r0, r7
 8002954:	d100      	bne.n	8002958 <HAL_GPIO_Init+0x100>
 8002956:	3a02      	subs	r2, #2
 8002958:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800295a:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800295c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800295e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8002960:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8002962:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8002964:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002966:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8002968:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800296a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296c:	02ff      	lsls	r7, r7, #11
 800296e:	d401      	bmi.n	8002974 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8002970:	0035      	movs	r5, r6
 8002972:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002974:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002976:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002978:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800297a:	9d00      	ldr	r5, [sp, #0]
 800297c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800297e:	02bf      	lsls	r7, r7, #10
 8002980:	d401      	bmi.n	8002986 <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8002982:	0035      	movs	r5, r6
 8002984:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002986:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8002988:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800298a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800298c:	9d00      	ldr	r5, [sp, #0]
 800298e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002990:	03bf      	lsls	r7, r7, #14
 8002992:	d401      	bmi.n	8002998 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8002994:	0035      	movs	r5, r6
 8002996:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002998:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800299a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800299c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800299e:	9e00      	ldr	r6, [sp, #0]
 80029a0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a2:	03ff      	lsls	r7, r7, #15
 80029a4:	d401      	bmi.n	80029aa <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80029a6:	4025      	ands	r5, r4
 80029a8:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80029aa:	6016      	str	r6, [r2, #0]
    position++;
 80029ac:	3301      	adds	r3, #1
 80029ae:	e756      	b.n	800285e <HAL_GPIO_Init+0x6>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	48000400 	.word	0x48000400
 80029bc:	48000800 	.word	0x48000800
 80029c0:	48000c00 	.word	0x48000c00
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c8:	6900      	ldr	r0, [r0, #16]
 80029ca:	4008      	ands	r0, r1
 80029cc:	1e43      	subs	r3, r0, #1
 80029ce:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80029d0:	b2c0      	uxtb	r0, r0
  }
 80029d2:	4770      	bx	lr

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	0004      	movs	r4, r0
 80029d8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029da:	2800      	cmp	r0, #0
 80029dc:	d045      	beq.n	8002a6a <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	07db      	lsls	r3, r3, #31
 80029e2:	d42f      	bmi.n	8002a44 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	079b      	lsls	r3, r3, #30
 80029e8:	d500      	bpl.n	80029ec <HAL_RCC_OscConfig+0x18>
 80029ea:	e081      	b.n	8002af0 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	071b      	lsls	r3, r3, #28
 80029f0:	d500      	bpl.n	80029f4 <HAL_RCC_OscConfig+0x20>
 80029f2:	e0bc      	b.n	8002b6e <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	075b      	lsls	r3, r3, #29
 80029f8:	d500      	bpl.n	80029fc <HAL_RCC_OscConfig+0x28>
 80029fa:	e0df      	b.n	8002bbc <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	06db      	lsls	r3, r3, #27
 8002a00:	d51a      	bpl.n	8002a38 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a02:	6962      	ldr	r2, [r4, #20]
 8002a04:	2304      	movs	r3, #4
 8002a06:	4db4      	ldr	r5, [pc, #720]	@ (8002cd8 <HAL_RCC_OscConfig+0x304>)
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	d000      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3a>
 8002a0c:	e148      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a0e:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a10:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a12:	430b      	orrs	r3, r1
 8002a14:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002a16:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002a1c:	f7ff fcc2 	bl	80023a4 <HAL_GetTick>
 8002a20:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a22:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002a24:	423b      	tst	r3, r7
 8002a26:	d100      	bne.n	8002a2a <HAL_RCC_OscConfig+0x56>
 8002a28:	e133      	b.n	8002c92 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a2a:	21f8      	movs	r1, #248	@ 0xf8
 8002a2c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002a2e:	69a3      	ldr	r3, [r4, #24]
 8002a30:	438a      	bics	r2, r1
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a38:	6a23      	ldr	r3, [r4, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <HAL_RCC_OscConfig+0x6c>
 8002a3e:	e157      	b.n	8002cf0 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
 8002a42:	e02a      	b.n	8002a9a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a44:	220c      	movs	r2, #12
 8002a46:	4da4      	ldr	r5, [pc, #656]	@ (8002cd8 <HAL_RCC_OscConfig+0x304>)
 8002a48:	686b      	ldr	r3, [r5, #4]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d006      	beq.n	8002a5e <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	686b      	ldr	r3, [r5, #4]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d10a      	bne.n	8002a6e <HAL_RCC_OscConfig+0x9a>
 8002a58:	686b      	ldr	r3, [r5, #4]
 8002a5a:	03db      	lsls	r3, r3, #15
 8002a5c:	d507      	bpl.n	8002a6e <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	039b      	lsls	r3, r3, #14
 8002a62:	d5bf      	bpl.n	80029e4 <HAL_RCC_OscConfig+0x10>
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1bc      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d114      	bne.n	8002a9e <HAL_RCC_OscConfig+0xca>
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	682a      	ldr	r2, [r5, #0]
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fc91 	bl	80023a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002a84:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	02bf      	lsls	r7, r7, #10
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	423b      	tst	r3, r7
 8002a8c:	d1aa      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8e:	f7ff fc89 	bl	80023a4 <HAL_GetTick>
 8002a92:	1b80      	subs	r0, r0, r6
 8002a94:	2864      	cmp	r0, #100	@ 0x64
 8002a96:	d9f7      	bls.n	8002a88 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8002a98:	2003      	movs	r0, #3
}
 8002a9a:	b005      	add	sp, #20
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xfc>
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	4a8d      	ldr	r2, [pc, #564]	@ (8002cdc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	602b      	str	r3, [r5, #0]
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	4a8c      	ldr	r2, [pc, #560]	@ (8002ce0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab0:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fc75 	bl	80023a4 <HAL_GetTick>
 8002aba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	423b      	tst	r3, r7
 8002ac0:	d100      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xf0>
 8002ac2:	e78f      	b.n	80029e4 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7ff fc6e 	bl	80023a4 <HAL_GetTick>
 8002ac8:	1b80      	subs	r0, r0, r6
 8002aca:	2864      	cmp	r0, #100	@ 0x64
 8002acc:	d9f6      	bls.n	8002abc <HAL_RCC_OscConfig+0xe8>
 8002ace:	e7e3      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x10c>
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	682a      	ldr	r2, [r5, #0]
 8002ad8:	02db      	lsls	r3, r3, #11
 8002ada:	4313      	orrs	r3, r2
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	e7c9      	b.n	8002a74 <HAL_RCC_OscConfig+0xa0>
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cdc <HAL_RCC_OscConfig+0x308>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	602b      	str	r3, [r5, #0]
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	4a7d      	ldr	r2, [pc, #500]	@ (8002ce0 <HAL_RCC_OscConfig+0x30c>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	e7c5      	b.n	8002a7c <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002af0:	220c      	movs	r2, #12
 8002af2:	4d79      	ldr	r5, [pc, #484]	@ (8002cd8 <HAL_RCC_OscConfig+0x304>)
 8002af4:	686b      	ldr	r3, [r5, #4]
 8002af6:	4213      	tst	r3, r2
 8002af8:	d006      	beq.n	8002b08 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002afa:	686b      	ldr	r3, [r5, #4]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d110      	bne.n	8002b24 <HAL_RCC_OscConfig+0x150>
 8002b02:	686b      	ldr	r3, [r5, #4]
 8002b04:	03db      	lsls	r3, r3, #15
 8002b06:	d40d      	bmi.n	8002b24 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	079b      	lsls	r3, r3, #30
 8002b0c:	d502      	bpl.n	8002b14 <HAL_RCC_OscConfig+0x140>
 8002b0e:	68e3      	ldr	r3, [r4, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d1aa      	bne.n	8002a6a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	21f8      	movs	r1, #248	@ 0xf8
 8002b16:	682a      	ldr	r2, [r5, #0]
 8002b18:	6923      	ldr	r3, [r4, #16]
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	602b      	str	r3, [r5, #0]
 8002b22:	e763      	b.n	80029ec <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	68e2      	ldr	r2, [r4, #12]
 8002b26:	2301      	movs	r3, #1
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d00f      	beq.n	8002b4c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002b30:	4313      	orrs	r3, r2
 8002b32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b34:	f7ff fc36 	bl	80023a4 <HAL_GetTick>
 8002b38:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	423b      	tst	r3, r7
 8002b3e:	d1e9      	bne.n	8002b14 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b40:	f7ff fc30 	bl	80023a4 <HAL_GetTick>
 8002b44:	1b80      	subs	r0, r0, r6
 8002b46:	2802      	cmp	r0, #2
 8002b48:	d9f7      	bls.n	8002b3a <HAL_RCC_OscConfig+0x166>
 8002b4a:	e7a5      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8002b4c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002b50:	439a      	bics	r2, r3
 8002b52:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002b54:	f7ff fc26 	bl	80023a4 <HAL_GetTick>
 8002b58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	423b      	tst	r3, r7
 8002b5e:	d100      	bne.n	8002b62 <HAL_RCC_OscConfig+0x18e>
 8002b60:	e744      	b.n	80029ec <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b62:	f7ff fc1f 	bl	80023a4 <HAL_GetTick>
 8002b66:	1b80      	subs	r0, r0, r6
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d9f6      	bls.n	8002b5a <HAL_RCC_OscConfig+0x186>
 8002b6c:	e794      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	69e2      	ldr	r2, [r4, #28]
 8002b70:	2301      	movs	r3, #1
 8002b72:	4d59      	ldr	r5, [pc, #356]	@ (8002cd8 <HAL_RCC_OscConfig+0x304>)
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002b78:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002b80:	f7ff fc10 	bl	80023a4 <HAL_GetTick>
 8002b84:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002b88:	423b      	tst	r3, r7
 8002b8a:	d000      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1ba>
 8002b8c:	e732      	b.n	80029f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7ff fc09 	bl	80023a4 <HAL_GetTick>
 8002b92:	1b80      	subs	r0, r0, r6
 8002b94:	2802      	cmp	r0, #2
 8002b96:	d9f6      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1b2>
 8002b98:	e77e      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002b9a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002b9e:	439a      	bics	r2, r3
 8002ba0:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fbff 	bl	80023a4 <HAL_GetTick>
 8002ba6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002baa:	423b      	tst	r3, r7
 8002bac:	d100      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1dc>
 8002bae:	e721      	b.n	80029f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fbf8 	bl	80023a4 <HAL_GetTick>
 8002bb4:	1b80      	subs	r0, r0, r6
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	d9f6      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x1d4>
 8002bba:	e76d      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbc:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc0:	4d45      	ldr	r5, [pc, #276]	@ (8002cd8 <HAL_RCC_OscConfig+0x304>)
 8002bc2:	0552      	lsls	r2, r2, #21
 8002bc4:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc8:	4213      	tst	r3, r2
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	69eb      	ldr	r3, [r5, #28]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61eb      	str	r3, [r5, #28]
 8002bd2:	69eb      	ldr	r3, [r5, #28]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	9303      	str	r3, [sp, #12]
 8002bd8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	2780      	movs	r7, #128	@ 0x80
 8002be0:	4e40      	ldr	r6, [pc, #256]	@ (8002ce4 <HAL_RCC_OscConfig+0x310>)
 8002be2:	007f      	lsls	r7, r7, #1
 8002be4:	6833      	ldr	r3, [r6, #0]
 8002be6:	423b      	tst	r3, r7
 8002be8:	d015      	beq.n	8002c16 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bea:	68a3      	ldr	r3, [r4, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d122      	bne.n	8002c36 <HAL_RCC_OscConfig+0x262>
 8002bf0:	6a2a      	ldr	r2, [r5, #32]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002bf6:	f7ff fbd5 	bl	80023a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002bfc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	6a2b      	ldr	r3, [r5, #32]
 8002c00:	423b      	tst	r3, r7
 8002c02:	d03f      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8002c04:	9b00      	ldr	r3, [sp, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d000      	beq.n	8002c0c <HAL_RCC_OscConfig+0x238>
 8002c0a:	e6f7      	b.n	80029fc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	69eb      	ldr	r3, [r5, #28]
 8002c0e:	4a36      	ldr	r2, [pc, #216]	@ (8002ce8 <HAL_RCC_OscConfig+0x314>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	61eb      	str	r3, [r5, #28]
 8002c14:	e6f2      	b.n	80029fc <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	433b      	orrs	r3, r7
 8002c1a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fbc2 	bl	80023a4 <HAL_GetTick>
 8002c20:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	6833      	ldr	r3, [r6, #0]
 8002c24:	423b      	tst	r3, r7
 8002c26:	d1e0      	bne.n	8002bea <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7ff fbbc 	bl	80023a4 <HAL_GetTick>
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	1ac0      	subs	r0, r0, r3
 8002c30:	2864      	cmp	r0, #100	@ 0x64
 8002c32:	d9f6      	bls.n	8002c22 <HAL_RCC_OscConfig+0x24e>
 8002c34:	e730      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	2201      	movs	r2, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d114      	bne.n	8002c66 <HAL_RCC_OscConfig+0x292>
 8002c3c:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	4393      	bics	r3, r2
 8002c42:	622b      	str	r3, [r5, #32]
 8002c44:	6a2b      	ldr	r3, [r5, #32]
 8002c46:	3203      	adds	r2, #3
 8002c48:	4393      	bics	r3, r2
 8002c4a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002c4c:	f7ff fbaa 	bl	80023a4 <HAL_GetTick>
 8002c50:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	6a2b      	ldr	r3, [r5, #32]
 8002c54:	423b      	tst	r3, r7
 8002c56:	d0d5      	beq.n	8002c04 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7ff fba4 	bl	80023a4 <HAL_GetTick>
 8002c5c:	4b23      	ldr	r3, [pc, #140]	@ (8002cec <HAL_RCC_OscConfig+0x318>)
 8002c5e:	1b80      	subs	r0, r0, r6
 8002c60:	4298      	cmp	r0, r3
 8002c62:	d9f6      	bls.n	8002c52 <HAL_RCC_OscConfig+0x27e>
 8002c64:	e718      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x2a2>
 8002c6a:	6a29      	ldr	r1, [r5, #32]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	622b      	str	r3, [r5, #32]
 8002c72:	6a2b      	ldr	r3, [r5, #32]
 8002c74:	e7bd      	b.n	8002bf2 <HAL_RCC_OscConfig+0x21e>
 8002c76:	6a2b      	ldr	r3, [r5, #32]
 8002c78:	4393      	bics	r3, r2
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	622b      	str	r3, [r5, #32]
 8002c7e:	6a2b      	ldr	r3, [r5, #32]
 8002c80:	4393      	bics	r3, r2
 8002c82:	e7b7      	b.n	8002bf4 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7ff fb8e 	bl	80023a4 <HAL_GetTick>
 8002c88:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <HAL_RCC_OscConfig+0x318>)
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	d9b6      	bls.n	8002bfe <HAL_RCC_OscConfig+0x22a>
 8002c90:	e702      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c92:	f7ff fb87 	bl	80023a4 <HAL_GetTick>
 8002c96:	1b80      	subs	r0, r0, r6
 8002c98:	2802      	cmp	r0, #2
 8002c9a:	d800      	bhi.n	8002c9e <HAL_RCC_OscConfig+0x2ca>
 8002c9c:	e6c1      	b.n	8002a22 <HAL_RCC_OscConfig+0x4e>
 8002c9e:	e6fb      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ca0:	3205      	adds	r2, #5
 8002ca2:	d103      	bne.n	8002cac <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ca4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002ca6:	439a      	bics	r2, r3
 8002ca8:	636a      	str	r2, [r5, #52]	@ 0x34
 8002caa:	e6be      	b.n	8002a2a <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cac:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cae:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cb0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002cb2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cb4:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002cb6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002cb8:	4393      	bics	r3, r2
 8002cba:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002cbc:	f7ff fb72 	bl	80023a4 <HAL_GetTick>
 8002cc0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cc2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002cc4:	423b      	tst	r3, r7
 8002cc6:	d100      	bne.n	8002cca <HAL_RCC_OscConfig+0x2f6>
 8002cc8:	e6b6      	b.n	8002a38 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cca:	f7ff fb6b 	bl	80023a4 <HAL_GetTick>
 8002cce:	1b80      	subs	r0, r0, r6
 8002cd0:	2802      	cmp	r0, #2
 8002cd2:	d9f6      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2ee>
 8002cd4:	e6e0      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	fffeffff 	.word	0xfffeffff
 8002ce0:	fffbffff 	.word	0xfffbffff
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	efffffff 	.word	0xefffffff
 8002cec:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	210c      	movs	r1, #12
 8002cf2:	4d34      	ldr	r5, [pc, #208]	@ (8002dc4 <HAL_RCC_OscConfig+0x3f0>)
 8002cf4:	686a      	ldr	r2, [r5, #4]
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	2a08      	cmp	r2, #8
 8002cfa:	d047      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	4a32      	ldr	r2, [pc, #200]	@ (8002dc8 <HAL_RCC_OscConfig+0x3f4>)
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d132      	bne.n	8002d68 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8002d02:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d04:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4013      	ands	r3, r2
 8002d08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fb4b 	bl	80023a4 <HAL_GetTick>
 8002d0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d10:	04bf      	lsls	r7, r7, #18
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	423b      	tst	r3, r7
 8002d16:	d121      	bne.n	8002d5c <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	220f      	movs	r2, #15
 8002d1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1e:	4393      	bics	r3, r2
 8002d20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d22:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d24:	4313      	orrs	r3, r2
 8002d26:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8002d28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d2c:	686a      	ldr	r2, [r5, #4]
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	4926      	ldr	r1, [pc, #152]	@ (8002dcc <HAL_RCC_OscConfig+0x3f8>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	682a      	ldr	r2, [r5, #0]
 8002d3c:	045b      	lsls	r3, r3, #17
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d42:	f7ff fb2f 	bl	80023a4 <HAL_GetTick>
 8002d46:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	4233      	tst	r3, r6
 8002d4c:	d000      	beq.n	8002d50 <HAL_RCC_OscConfig+0x37c>
 8002d4e:	e677      	b.n	8002a40 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7ff fb28 	bl	80023a4 <HAL_GetTick>
 8002d54:	1b00      	subs	r0, r0, r4
 8002d56:	2802      	cmp	r0, #2
 8002d58:	d9f6      	bls.n	8002d48 <HAL_RCC_OscConfig+0x374>
 8002d5a:	e69d      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7ff fb22 	bl	80023a4 <HAL_GetTick>
 8002d60:	1b80      	subs	r0, r0, r6
 8002d62:	2802      	cmp	r0, #2
 8002d64:	d9d5      	bls.n	8002d12 <HAL_RCC_OscConfig+0x33e>
 8002d66:	e697      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8002d68:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d70:	f7ff fb18 	bl	80023a4 <HAL_GetTick>
 8002d74:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d76:	04b6      	lsls	r6, r6, #18
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	4233      	tst	r3, r6
 8002d7c:	d100      	bne.n	8002d80 <HAL_RCC_OscConfig+0x3ac>
 8002d7e:	e65f      	b.n	8002a40 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7ff fb10 	bl	80023a4 <HAL_GetTick>
 8002d84:	1b00      	subs	r0, r0, r4
 8002d86:	2802      	cmp	r0, #2
 8002d88:	d9f6      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3a4>
 8002d8a:	e685      	b.n	8002a98 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d100      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3be>
 8002d90:	e66b      	b.n	8002a6a <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8002d94:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002d98:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8002d9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	4002      	ands	r2, r0
 8002d9e:	428a      	cmp	r2, r1
 8002da0:	d000      	beq.n	8002da4 <HAL_RCC_OscConfig+0x3d0>
 8002da2:	e662      	b.n	8002a6a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002da4:	220f      	movs	r2, #15
 8002da6:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d000      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3dc>
 8002dae:	e65c      	b.n	8002a6a <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002db0:	23f0      	movs	r3, #240	@ 0xf0
 8002db2:	039b      	lsls	r3, r3, #14
 8002db4:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002db6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002db8:	1ac0      	subs	r0, r0, r3
 8002dba:	1e43      	subs	r3, r0, #1
 8002dbc:	4198      	sbcs	r0, r3
 8002dbe:	b2c0      	uxtb	r0, r0
 8002dc0:	e66b      	b.n	8002a9a <HAL_RCC_OscConfig+0xc6>
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	feffffff 	.word	0xfeffffff
 8002dcc:	ffc2ffff 	.word	0xffc2ffff

08002dd0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	220c      	movs	r2, #12
{
 8002dd2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002dd4:	4d0c      	ldr	r5, [pc, #48]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x38>)
 8002dd6:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	401a      	ands	r2, r3
 8002dda:	2a08      	cmp	r2, #8
 8002ddc:	d111      	bne.n	8002e02 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dde:	200f      	movs	r0, #15
 8002de0:	490a      	ldr	r1, [pc, #40]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002de2:	0c9a      	lsrs	r2, r3, #18
 8002de4:	4002      	ands	r2, r0
 8002de6:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002de8:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dea:	03db      	lsls	r3, r3, #15
 8002dec:	d507      	bpl.n	8002dfe <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dee:	4908      	ldr	r1, [pc, #32]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x40>)
 8002df0:	4002      	ands	r2, r0
 8002df2:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002df4:	4807      	ldr	r0, [pc, #28]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x44>)
 8002df6:	f7fd f991 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dfa:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x48>)
 8002e00:	e7fb      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8002e02:	4804      	ldr	r0, [pc, #16]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8002e04:	e7fa      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x2c>
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003a05 	.word	0x08003a05
 8002e10:	080039f5 	.word	0x080039f5
 8002e14:	007a1200 	.word	0x007a1200
 8002e18:	003d0900 	.word	0x003d0900

08002e1c <HAL_RCC_ClockConfig>:
{
 8002e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e1e:	0004      	movs	r4, r0
 8002e20:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4d37      	ldr	r5, [pc, #220]	@ (8002f0c <HAL_RCC_ClockConfig+0xf0>)
 8002e2e:	682b      	ldr	r3, [r5, #0]
 8002e30:	4013      	ands	r3, r2
 8002e32:	428b      	cmp	r3, r1
 8002e34:	d31c      	bcc.n	8002e70 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	0793      	lsls	r3, r2, #30
 8002e3a:	d422      	bmi.n	8002e82 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3c:	07d2      	lsls	r2, r2, #31
 8002e3e:	d42f      	bmi.n	8002ea0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	2301      	movs	r3, #1
 8002e42:	682a      	ldr	r2, [r5, #0]
 8002e44:	401a      	ands	r2, r3
 8002e46:	42b2      	cmp	r2, r6
 8002e48:	d851      	bhi.n	8002eee <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	4d30      	ldr	r5, [pc, #192]	@ (8002f10 <HAL_RCC_ClockConfig+0xf4>)
 8002e4e:	075b      	lsls	r3, r3, #29
 8002e50:	d454      	bmi.n	8002efc <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e52:	f7ff ffbd 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002e56:	686b      	ldr	r3, [r5, #4]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_RCC_ClockConfig+0xf8>)
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	0f1b      	lsrs	r3, r3, #28
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	492d      	ldr	r1, [pc, #180]	@ (8002f18 <HAL_RCC_ClockConfig+0xfc>)
 8002e62:	40d8      	lsrs	r0, r3
 8002e64:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e66:	2003      	movs	r0, #3
 8002e68:	f7ff fa5c 	bl	8002324 <HAL_InitTick>
  return HAL_OK;
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e7db      	b.n	8002e28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	4393      	bics	r3, r2
 8002e74:	430b      	orrs	r3, r1
 8002e76:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d1d2      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xa>
 8002e80:	e7d9      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e82:	4923      	ldr	r1, [pc, #140]	@ (8002f10 <HAL_RCC_ClockConfig+0xf4>)
 8002e84:	0753      	lsls	r3, r2, #29
 8002e86:	d504      	bpl.n	8002e92 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e88:	23e0      	movs	r3, #224	@ 0xe0
 8002e8a:	6848      	ldr	r0, [r1, #4]
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4303      	orrs	r3, r0
 8002e90:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e92:	20f0      	movs	r0, #240	@ 0xf0
 8002e94:	684b      	ldr	r3, [r1, #4]
 8002e96:	4383      	bics	r3, r0
 8002e98:	68a0      	ldr	r0, [r4, #8]
 8002e9a:	4303      	orrs	r3, r0
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e7cd      	b.n	8002e3c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea0:	4f1b      	ldr	r7, [pc, #108]	@ (8002f10 <HAL_RCC_ClockConfig+0xf4>)
 8002ea2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea4:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea6:	2a01      	cmp	r2, #1
 8002ea8:	d119      	bne.n	8002ede <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	039b      	lsls	r3, r3, #14
 8002eac:	d5bb      	bpl.n	8002e26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	2103      	movs	r1, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	438b      	bics	r3, r1
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002eb8:	f7ff fa74 	bl	80023a4 <HAL_GetTick>
 8002ebc:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d0b9      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7ff fa6a 	bl	80023a4 <HAL_GetTick>
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	1ac0      	subs	r0, r0, r3
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_ClockConfig+0x100>)
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d9f1      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002eda:	2003      	movs	r0, #3
 8002edc:	e7a4      	b.n	8002e28 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	2a02      	cmp	r2, #2
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	d4e3      	bmi.n	8002eae <HAL_RCC_ClockConfig+0x92>
 8002ee6:	e79e      	b.n	8002e26 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	079b      	lsls	r3, r3, #30
 8002eea:	d4e0      	bmi.n	8002eae <HAL_RCC_ClockConfig+0x92>
 8002eec:	e79b      	b.n	8002e26 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	682a      	ldr	r2, [r5, #0]
 8002ef0:	439a      	bics	r2, r3
 8002ef2:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef4:	682a      	ldr	r2, [r5, #0]
 8002ef6:	421a      	tst	r2, r3
 8002ef8:	d0a7      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x2e>
 8002efa:	e794      	b.n	8002e26 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	686b      	ldr	r3, [r5, #4]
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_RCC_ClockConfig+0x104>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	68e2      	ldr	r2, [r4, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	606b      	str	r3, [r5, #4]
 8002f08:	e7a3      	b.n	8002e52 <HAL_RCC_ClockConfig+0x36>
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	080039e5 	.word	0x080039e5
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	00001388 	.word	0x00001388
 8002f20:	fffff8ff 	.word	0xfffff8ff

08002f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8002f28:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2a:	6a02      	ldr	r2, [r0, #32]
 8002f2c:	43a2      	bics	r2, r4
 8002f2e:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f30:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8002f32:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f34:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f36:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f38:	680a      	ldr	r2, [r1, #0]
 8002f3a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f40:	688a      	ldr	r2, [r1, #8]
 8002f42:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f44:	4a11      	ldr	r2, [pc, #68]	@ (8002f8c <TIM_OC1_SetConfig+0x68>)
 8002f46:	4290      	cmp	r0, r2
 8002f48:	d005      	beq.n	8002f56 <TIM_OC1_SetConfig+0x32>
 8002f4a:	4e11      	ldr	r6, [pc, #68]	@ (8002f90 <TIM_OC1_SetConfig+0x6c>)
 8002f4c:	42b0      	cmp	r0, r6
 8002f4e:	d002      	beq.n	8002f56 <TIM_OC1_SetConfig+0x32>
 8002f50:	4e10      	ldr	r6, [pc, #64]	@ (8002f94 <TIM_OC1_SetConfig+0x70>)
 8002f52:	42b0      	cmp	r0, r6
 8002f54:	d113      	bne.n	8002f7e <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f56:	2608      	movs	r6, #8
 8002f58:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f5a:	68ce      	ldr	r6, [r1, #12]
 8002f5c:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f5e:	2604      	movs	r6, #4
 8002f60:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f62:	4290      	cmp	r0, r2
 8002f64:	d005      	beq.n	8002f72 <TIM_OC1_SetConfig+0x4e>
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <TIM_OC1_SetConfig+0x6c>)
 8002f68:	4290      	cmp	r0, r2
 8002f6a:	d002      	beq.n	8002f72 <TIM_OC1_SetConfig+0x4e>
 8002f6c:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <TIM_OC1_SetConfig+0x70>)
 8002f6e:	4290      	cmp	r0, r2
 8002f70:	d105      	bne.n	8002f7e <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f74:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f76:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f78:	694c      	ldr	r4, [r1, #20]
 8002f7a:	4334      	orrs	r4, r6
 8002f7c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f7e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f80:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f82:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002f84:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f86:	6203      	str	r3, [r0, #32]
}
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40014400 	.word	0x40014400
 8002f94:	40014800 	.word	0x40014800
 8002f98:	fffffcff 	.word	0xfffffcff

08002f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f9e:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 8002fa0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fa2:	6a03      	ldr	r3, [r0, #32]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa8:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8002faa:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002fac:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fae:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <TIM_OC3_SetConfig+0x64>)
 8002fb6:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb8:	688b      	ldr	r3, [r1, #8]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fbe:	4d11      	ldr	r5, [pc, #68]	@ (8003004 <TIM_OC3_SetConfig+0x68>)
 8002fc0:	42a8      	cmp	r0, r5
 8002fc2:	d10e      	bne.n	8002fe2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fc4:	4d10      	ldr	r5, [pc, #64]	@ (8003008 <TIM_OC3_SetConfig+0x6c>)
 8002fc6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fc8:	68cb      	ldr	r3, [r1, #12]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fce:	4d0f      	ldr	r5, [pc, #60]	@ (800300c <TIM_OC3_SetConfig+0x70>)
 8002fd0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fd2:	4d0f      	ldr	r5, [pc, #60]	@ (8003010 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fd6:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fd8:	698a      	ldr	r2, [r1, #24]
 8002fda:	4332      	orrs	r2, r6
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	432a      	orrs	r2, r5
 8002fe0:	e005      	b.n	8002fee <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	4d0c      	ldr	r5, [pc, #48]	@ (8003014 <TIM_OC3_SetConfig+0x78>)
 8002fe4:	42a8      	cmp	r0, r5
 8002fe6:	d0f4      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x36>
 8002fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8003018 <TIM_OC3_SetConfig+0x7c>)
 8002fea:	42a8      	cmp	r0, r5
 8002fec:	d0f1      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fee:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ff2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff6:	6203      	str	r3, [r0, #32]
}
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	fffffeff 	.word	0xfffffeff
 8003000:	fffffdff 	.word	0xfffffdff
 8003004:	40012c00 	.word	0x40012c00
 8003008:	fffff7ff 	.word	0xfffff7ff
 800300c:	fffffbff 	.word	0xfffffbff
 8003010:	ffffcfff 	.word	0xffffcfff
 8003014:	40014400 	.word	0x40014400
 8003018:	40014800 	.word	0x40014800

0800301c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003020:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003022:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003024:	4d11      	ldr	r5, [pc, #68]	@ (800306c <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003026:	4013      	ands	r3, r2
 8003028:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800302a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800302c:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003030:	680d      	ldr	r5, [r1, #0]
 8003032:	022d      	lsls	r5, r5, #8
 8003034:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003036:	4a0e      	ldr	r2, [pc, #56]	@ (8003070 <TIM_OC4_SetConfig+0x54>)
 8003038:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303a:	688a      	ldr	r2, [r1, #8]
 800303c:	0312      	lsls	r2, r2, #12
 800303e:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003040:	4c0c      	ldr	r4, [pc, #48]	@ (8003074 <TIM_OC4_SetConfig+0x58>)
 8003042:	42a0      	cmp	r0, r4
 8003044:	d005      	beq.n	8003052 <TIM_OC4_SetConfig+0x36>
 8003046:	4c0c      	ldr	r4, [pc, #48]	@ (8003078 <TIM_OC4_SetConfig+0x5c>)
 8003048:	42a0      	cmp	r0, r4
 800304a:	d002      	beq.n	8003052 <TIM_OC4_SetConfig+0x36>
 800304c:	4c0b      	ldr	r4, [pc, #44]	@ (800307c <TIM_OC4_SetConfig+0x60>)
 800304e:	42a0      	cmp	r0, r4
 8003050:	d104      	bne.n	800305c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003052:	4c0b      	ldr	r4, [pc, #44]	@ (8003080 <TIM_OC4_SetConfig+0x64>)
 8003054:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003056:	694b      	ldr	r3, [r1, #20]
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800305e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003060:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003062:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	6202      	str	r2, [r0, #32]
}
 8003066:	bd30      	pop	{r4, r5, pc}
 8003068:	ffffefff 	.word	0xffffefff
 800306c:	ffff8cff 	.word	0xffff8cff
 8003070:	ffffdfff 	.word	0xffffdfff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800
 8003080:	ffffbfff 	.word	0xffffbfff

08003084 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800308a:	4770      	bx	lr

0800308c <TIM_DMADelayPulseCplt>:
{
 800308c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800308e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003090:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003092:	4282      	cmp	r2, r0
 8003094:	d10d      	bne.n	80030b2 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003096:	2301      	movs	r3, #1
 8003098:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800309a:	6992      	ldr	r2, [r2, #24]
 800309c:	2a00      	cmp	r2, #0
 800309e:	d102      	bne.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	0022      	movs	r2, r4
 80030a2:	323e      	adds	r2, #62	@ 0x3e
 80030a4:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a6:	0020      	movs	r0, r4
 80030a8:	f7fe fc02 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ac:	2300      	movs	r3, #0
 80030ae:	7723      	strb	r3, [r4, #28]
}
 80030b0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030b4:	4283      	cmp	r3, r0
 80030b6:	d109      	bne.n	80030cc <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b8:	2202      	movs	r2, #2
 80030ba:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f1      	bne.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	0023      	movs	r3, r4
 80030c4:	3a01      	subs	r2, #1
 80030c6:	333f      	adds	r3, #63	@ 0x3f
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e7ec      	b.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030ce:	4283      	cmp	r3, r0
 80030d0:	d108      	bne.n	80030e4 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d2:	2204      	movs	r2, #4
 80030d4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e4      	bne.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	0023      	movs	r3, r4
 80030de:	3a03      	subs	r2, #3
 80030e0:	3340      	adds	r3, #64	@ 0x40
 80030e2:	e7f1      	b.n	80030c8 <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80030e6:	4283      	cmp	r3, r0
 80030e8:	d1dd      	bne.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ea:	2208      	movs	r2, #8
 80030ec:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1d8      	bne.n	80030a6 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	0023      	movs	r3, r4
 80030f6:	3a07      	subs	r2, #7
 80030f8:	3341      	adds	r3, #65	@ 0x41
 80030fa:	e7e5      	b.n	80030c8 <TIM_DMADelayPulseCplt+0x3c>

080030fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 80030fc:	4770      	bx	lr

080030fe <TIM_DMADelayPulseHalfCplt>:
{
 80030fe:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003100:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003102:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003104:	4283      	cmp	r3, r0
 8003106:	d107      	bne.n	8003118 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003108:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800310c:	0020      	movs	r0, r4
 800310e:	f7ff fff5 	bl	80030fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	2300      	movs	r3, #0
 8003114:	7723      	strb	r3, [r4, #28]
}
 8003116:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003118:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800311a:	4283      	cmp	r3, r0
 800311c:	d101      	bne.n	8003122 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311e:	2302      	movs	r3, #2
 8003120:	e7f3      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003122:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003124:	4283      	cmp	r3, r0
 8003126:	d101      	bne.n	800312c <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003128:	2304      	movs	r3, #4
 800312a:	e7ee      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800312c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800312e:	4283      	cmp	r3, r0
 8003130:	d1ec      	bne.n	800310c <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	2308      	movs	r3, #8
 8003134:	e7e9      	b.n	800310a <TIM_DMADelayPulseHalfCplt+0xc>

08003136 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003136:	4770      	bx	lr

08003138 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003138:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 800313a:	6803      	ldr	r3, [r0, #0]
{
 800313c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800313e:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003140:	691e      	ldr	r6, [r3, #16]
{
 8003142:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003144:	4216      	tst	r6, r2
 8003146:	d00d      	beq.n	8003164 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003148:	4215      	tst	r5, r2
 800314a:	d00b      	beq.n	8003164 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800314c:	3a05      	subs	r2, #5
 800314e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003150:	3204      	adds	r2, #4
 8003152:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	079b      	lsls	r3, r3, #30
 8003158:	d100      	bne.n	800315c <HAL_TIM_IRQHandler+0x24>
 800315a:	e071      	b.n	8003240 <HAL_TIM_IRQHandler+0x108>
          HAL_TIM_IC_CaptureCallback(htim);
 800315c:	f7ff ff95 	bl	800308a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003160:	2300      	movs	r3, #0
 8003162:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003164:	2304      	movs	r3, #4
 8003166:	421e      	tst	r6, r3
 8003168:	d011      	beq.n	800318e <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800316a:	421d      	tst	r5, r3
 800316c:	d00f      	beq.n	800318e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800316e:	2205      	movs	r2, #5
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	4252      	negs	r2, r2
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003176:	3207      	adds	r2, #7
 8003178:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	23c0      	movs	r3, #192	@ 0xc0
 800317e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003180:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003182:	421a      	tst	r2, r3
 8003184:	d062      	beq.n	800324c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	f7ff ff80 	bl	800308a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	2300      	movs	r3, #0
 800318c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800318e:	2308      	movs	r3, #8
 8003190:	421e      	tst	r6, r3
 8003192:	d00f      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003194:	421d      	tst	r5, r3
 8003196:	d00d      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003198:	2209      	movs	r2, #9
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	4252      	negs	r2, r2
 800319e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a0:	320d      	adds	r2, #13
 80031a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a8:	079b      	lsls	r3, r3, #30
 80031aa:	d055      	beq.n	8003258 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80031ac:	f7ff ff6d 	bl	800308a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b0:	2300      	movs	r3, #0
 80031b2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031b4:	2310      	movs	r3, #16
 80031b6:	421e      	tst	r6, r3
 80031b8:	d011      	beq.n	80031de <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ba:	421d      	tst	r5, r3
 80031bc:	d00f      	beq.n	80031de <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031be:	2211      	movs	r2, #17
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	4252      	negs	r2, r2
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	3219      	adds	r2, #25
 80031c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	23c0      	movs	r3, #192	@ 0xc0
 80031ce:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80031d0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d2:	421a      	tst	r2, r3
 80031d4:	d046      	beq.n	8003264 <HAL_TIM_IRQHandler+0x12c>
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	f7ff ff58 	bl	800308a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	2300      	movs	r3, #0
 80031dc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031de:	2301      	movs	r3, #1
 80031e0:	421e      	tst	r6, r3
 80031e2:	d008      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031e4:	421d      	tst	r5, r3
 80031e6:	d006      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031e8:	2202      	movs	r2, #2
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ee:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f2:	f7ff ff48 	bl	8003086 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	421e      	tst	r6, r3
 80031fa:	d008      	beq.n	800320e <HAL_TIM_IRQHandler+0xd6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031fc:	421d      	tst	r5, r3
 80031fe:	d006      	beq.n	800320e <HAL_TIM_IRQHandler+0xd6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003200:	2281      	movs	r2, #129	@ 0x81
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 8003206:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003208:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800320a:	f000 fbb0 	bl	800396e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800320e:	2340      	movs	r3, #64	@ 0x40
 8003210:	421e      	tst	r6, r3
 8003212:	d008      	beq.n	8003226 <HAL_TIM_IRQHandler+0xee>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003214:	421d      	tst	r5, r3
 8003216:	d006      	beq.n	8003226 <HAL_TIM_IRQHandler+0xee>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 800321e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003220:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003222:	f7ff ff88 	bl	8003136 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003226:	2320      	movs	r3, #32
 8003228:	421e      	tst	r6, r3
 800322a:	d008      	beq.n	800323e <HAL_TIM_IRQHandler+0x106>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800322c:	421d      	tst	r5, r3
 800322e:	d006      	beq.n	800323e <HAL_TIM_IRQHandler+0x106>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8003236:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003238:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800323a:	f000 fb97 	bl	800396c <HAL_TIMEx_CommutCallback>
}
 800323e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003240:	f7ff ff22 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	0020      	movs	r0, r4
 8003246:	f7fe fb33 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800324a:	e789      	b.n	8003160 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324c:	f7ff ff1c 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	0020      	movs	r0, r4
 8003252:	f7fe fb2d 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003256:	e798      	b.n	800318a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003258:	f7ff ff16 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	0020      	movs	r0, r4
 800325e:	f7fe fb27 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003262:	e7a5      	b.n	80031b0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	f7ff ff10 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe fb21 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 800326e:	e7b4      	b.n	80031da <HAL_TIM_IRQHandler+0xa2>

08003270 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8003270:	4770      	bx	lr

08003272 <TIM_DMAError>:
{
 8003272:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003274:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003276:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003278:	4283      	cmp	r3, r0
 800327a:	d105      	bne.n	8003288 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327c:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003280:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003282:	323e      	adds	r2, #62	@ 0x3e
    htim->State = HAL_TIM_STATE_READY;
 8003284:	7013      	strb	r3, [r2, #0]
 8003286:	e008      	b.n	800329a <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003288:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800328a:	4283      	cmp	r3, r0
 800328c:	d10b      	bne.n	80032a6 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800328e:	2302      	movs	r3, #2
 8003290:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	0023      	movs	r3, r4
 8003294:	2201      	movs	r2, #1
 8003296:	333f      	adds	r3, #63	@ 0x3f
 8003298:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 800329a:	0020      	movs	r0, r4
 800329c:	f7ff ffe8 	bl	8003270 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a0:	2300      	movs	r3, #0
 80032a2:	7723      	strb	r3, [r4, #28]
}
 80032a4:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80032a8:	2301      	movs	r3, #1
 80032aa:	4282      	cmp	r2, r0
 80032ac:	d104      	bne.n	80032b8 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ae:	2204      	movs	r2, #4
 80032b0:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	0022      	movs	r2, r4
 80032b4:	3240      	adds	r2, #64	@ 0x40
 80032b6:	e7e5      	b.n	8003284 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80032ba:	4282      	cmp	r2, r0
 80032bc:	d104      	bne.n	80032c8 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032be:	2208      	movs	r2, #8
 80032c0:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	0022      	movs	r2, r4
 80032c4:	3241      	adds	r2, #65	@ 0x41
 80032c6:	e7dd      	b.n	8003284 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 80032c8:	0022      	movs	r2, r4
 80032ca:	323d      	adds	r2, #61	@ 0x3d
 80032cc:	e7da      	b.n	8003284 <TIM_DMAError+0x12>
	...

080032d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <TIM_Base_SetConfig+0x74>)
{
 80032d2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80032d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d6:	4290      	cmp	r0, r2
 80032d8:	d002      	beq.n	80032e0 <TIM_Base_SetConfig+0x10>
 80032da:	4c1b      	ldr	r4, [pc, #108]	@ (8003348 <TIM_Base_SetConfig+0x78>)
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	2470      	movs	r4, #112	@ 0x70
 80032e2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80032e4:	684c      	ldr	r4, [r1, #4]
 80032e6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e8:	4290      	cmp	r0, r2
 80032ea:	d00b      	beq.n	8003304 <TIM_Base_SetConfig+0x34>
 80032ec:	4c16      	ldr	r4, [pc, #88]	@ (8003348 <TIM_Base_SetConfig+0x78>)
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d008      	beq.n	8003304 <TIM_Base_SetConfig+0x34>
 80032f2:	4c16      	ldr	r4, [pc, #88]	@ (800334c <TIM_Base_SetConfig+0x7c>)
 80032f4:	42a0      	cmp	r0, r4
 80032f6:	d005      	beq.n	8003304 <TIM_Base_SetConfig+0x34>
 80032f8:	4c15      	ldr	r4, [pc, #84]	@ (8003350 <TIM_Base_SetConfig+0x80>)
 80032fa:	42a0      	cmp	r0, r4
 80032fc:	d002      	beq.n	8003304 <TIM_Base_SetConfig+0x34>
 80032fe:	4c15      	ldr	r4, [pc, #84]	@ (8003354 <TIM_Base_SetConfig+0x84>)
 8003300:	42a0      	cmp	r0, r4
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003304:	4c14      	ldr	r4, [pc, #80]	@ (8003358 <TIM_Base_SetConfig+0x88>)
 8003306:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003308:	68cb      	ldr	r3, [r1, #12]
 800330a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	2480      	movs	r4, #128	@ 0x80
 800330e:	43a3      	bics	r3, r4
 8003310:	694c      	ldr	r4, [r1, #20]
 8003312:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8003314:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003316:	688b      	ldr	r3, [r1, #8]
 8003318:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331e:	4290      	cmp	r0, r2
 8003320:	d005      	beq.n	800332e <TIM_Base_SetConfig+0x5e>
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <TIM_Base_SetConfig+0x80>)
 8003324:	4298      	cmp	r0, r3
 8003326:	d002      	beq.n	800332e <TIM_Base_SetConfig+0x5e>
 8003328:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <TIM_Base_SetConfig+0x84>)
 800332a:	4298      	cmp	r0, r3
 800332c:	d101      	bne.n	8003332 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 800332e:	690b      	ldr	r3, [r1, #16]
 8003330:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003332:	2201      	movs	r2, #1
 8003334:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003336:	6903      	ldr	r3, [r0, #16]
 8003338:	4213      	tst	r3, r2
 800333a:	d002      	beq.n	8003342 <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800333c:	6903      	ldr	r3, [r0, #16]
 800333e:	4393      	bics	r3, r2
 8003340:	6103      	str	r3, [r0, #16]
}
 8003342:	bd10      	pop	{r4, pc}
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40002000 	.word	0x40002000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	fffffcff 	.word	0xfffffcff

0800335c <HAL_TIM_Base_Init>:
{
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003360:	2001      	movs	r0, #1
  if (htim == NULL)
 8003362:	2c00      	cmp	r4, #0
 8003364:	d021      	beq.n	80033aa <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	0025      	movs	r5, r4
 8003368:	353d      	adds	r5, #61	@ 0x3d
 800336a:	782b      	ldrb	r3, [r5, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003372:	0023      	movs	r3, r4
 8003374:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003376:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003378:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800337a:	f7fe fabd 	bl	80018f8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	1d21      	adds	r1, r4, #4
 8003386:	f7ff ffa3 	bl	80032d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800338a:	0022      	movs	r2, r4
 800338c:	2301      	movs	r3, #1
  return HAL_OK;
 800338e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	3246      	adds	r2, #70	@ 0x46
 8003392:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003396:	3a08      	subs	r2, #8
 8003398:	7013      	strb	r3, [r2, #0]
 800339a:	7053      	strb	r3, [r2, #1]
 800339c:	7093      	strb	r3, [r2, #2]
 800339e:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	7113      	strb	r3, [r2, #4]
 80033a2:	7153      	strb	r3, [r2, #5]
 80033a4:	7193      	strb	r3, [r2, #6]
 80033a6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	702b      	strb	r3, [r5, #0]
}
 80033aa:	bd70      	pop	{r4, r5, r6, pc}

080033ac <HAL_TIM_PWM_Init>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
  if (htim == NULL)
 80033b2:	2c00      	cmp	r4, #0
 80033b4:	d021      	beq.n	80033fa <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	0025      	movs	r5, r4
 80033b8:	353d      	adds	r5, #61	@ 0x3d
 80033ba:	782b      	ldrb	r3, [r5, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80033c2:	0023      	movs	r3, r4
 80033c4:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80033c6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80033c8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80033ca:	f7ff fe5b 	bl	8003084 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	1d21      	adds	r1, r4, #4
 80033d6:	f7ff ff7b 	bl	80032d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	0022      	movs	r2, r4
 80033dc:	2301      	movs	r3, #1
  return HAL_OK;
 80033de:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	3246      	adds	r2, #70	@ 0x46
 80033e2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	3a08      	subs	r2, #8
 80033e8:	7013      	strb	r3, [r2, #0]
 80033ea:	7053      	strb	r3, [r2, #1]
 80033ec:	7093      	strb	r3, [r2, #2]
 80033ee:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	7113      	strb	r3, [r2, #4]
 80033f2:	7153      	strb	r3, [r2, #5]
 80033f4:	7193      	strb	r3, [r2, #6]
 80033f6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	702b      	strb	r3, [r5, #0]
}
 80033fa:	bd70      	pop	{r4, r5, r6, pc}

080033fc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033fc:	2210      	movs	r2, #16
{
 80033fe:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8003400:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003404:	4c16      	ldr	r4, [pc, #88]	@ (8003460 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	4393      	bics	r3, r2
 8003408:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800340a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800340c:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800340e:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	680c      	ldr	r4, [r1, #0]
 8003412:	0224      	lsls	r4, r4, #8
 8003414:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8003416:	2320      	movs	r3, #32
 8003418:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800341a:	688b      	ldr	r3, [r1, #8]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003420:	4d10      	ldr	r5, [pc, #64]	@ (8003464 <TIM_OC2_SetConfig+0x68>)
 8003422:	42a8      	cmp	r0, r5
 8003424:	d10f      	bne.n	8003446 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003426:	2580      	movs	r5, #128	@ 0x80
 8003428:	43ab      	bics	r3, r5
 800342a:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800342c:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800342e:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003436:	4d0c      	ldr	r5, [pc, #48]	@ (8003468 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003438:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800343a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800343c:	698a      	ldr	r2, [r1, #24]
 800343e:	4332      	orrs	r2, r6
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	432a      	orrs	r2, r5
 8003444:	e005      	b.n	8003452 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003446:	4d09      	ldr	r5, [pc, #36]	@ (800346c <TIM_OC2_SetConfig+0x70>)
 8003448:	42a8      	cmp	r0, r5
 800344a:	d0f4      	beq.n	8003436 <TIM_OC2_SetConfig+0x3a>
 800344c:	4d08      	ldr	r5, [pc, #32]	@ (8003470 <TIM_OC2_SetConfig+0x74>)
 800344e:	42a8      	cmp	r0, r5
 8003450:	d0f1      	beq.n	8003436 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003452:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003454:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003456:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003458:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800345a:	6203      	str	r3, [r0, #32]
}
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	ffff8cff 	.word	0xffff8cff
 8003464:	40012c00 	.word	0x40012c00
 8003468:	fffff3ff 	.word	0xfffff3ff
 800346c:	40014400 	.word	0x40014400
 8003470:	40014800 	.word	0x40014800

08003474 <HAL_TIM_PWM_ConfigChannel>:
{
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003476:	0006      	movs	r6, r0
 8003478:	363c      	adds	r6, #60	@ 0x3c
{
 800347a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 800347c:	7832      	ldrb	r2, [r6, #0]
{
 800347e:	0003      	movs	r3, r0
 8003480:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8003482:	2002      	movs	r0, #2
 8003484:	2a01      	cmp	r2, #1
 8003486:	d00a      	beq.n	800349e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003488:	3801      	subs	r0, #1
 800348a:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 800348c:	2d08      	cmp	r5, #8
 800348e:	d03f      	beq.n	8003510 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8003490:	d806      	bhi.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8003492:	2d00      	cmp	r5, #0
 8003494:	d019      	beq.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x56>
 8003496:	2d04      	cmp	r5, #4
 8003498:	d029      	beq.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 800349a:	2300      	movs	r3, #0
 800349c:	7033      	strb	r3, [r6, #0]
}
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80034a0:	2d0c      	cmp	r5, #12
 80034a2:	d1fa      	bne.n	800349a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034a4:	681d      	ldr	r5, [r3, #0]
 80034a6:	0028      	movs	r0, r5
 80034a8:	f7ff fdb8 	bl	800301c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	69ea      	ldr	r2, [r5, #28]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b6:	69eb      	ldr	r3, [r5, #28]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034be:	6923      	ldr	r3, [r4, #16]
 80034c0:	69ea      	ldr	r2, [r5, #28]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61eb      	str	r3, [r5, #28]
      break;
 80034c8:	e00f      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034ca:	681d      	ldr	r5, [r3, #0]
 80034cc:	0028      	movs	r0, r5
 80034ce:	f7ff fd29 	bl	8002f24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d2:	2308      	movs	r3, #8
 80034d4:	69aa      	ldr	r2, [r5, #24]
 80034d6:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d8:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034da:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034dc:	69ab      	ldr	r3, [r5, #24]
 80034de:	4393      	bics	r3, r2
 80034e0:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e2:	69ab      	ldr	r3, [r5, #24]
 80034e4:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2000      	movs	r0, #0
 80034ec:	e7d5      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ee:	681d      	ldr	r5, [r3, #0]
 80034f0:	0028      	movs	r0, r5
 80034f2:	f7ff ff83 	bl	80033fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	69aa      	ldr	r2, [r5, #24]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	69ab      	ldr	r3, [r5, #24]
 8003502:	4a0b      	ldr	r2, [pc, #44]	@ (8003530 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8003504:	4013      	ands	r3, r2
 8003506:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003508:	6923      	ldr	r3, [r4, #16]
 800350a:	69aa      	ldr	r2, [r5, #24]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	e7ea      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003510:	681f      	ldr	r7, [r3, #0]
 8003512:	0038      	movs	r0, r7
 8003514:	f7ff fd42 	bl	8002f9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003518:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	431d      	orrs	r5, r3
 800351e:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4393      	bics	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	6922      	ldr	r2, [r4, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]
      break;
 800352e:	e7dc      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x76>
 8003530:	fffffbff 	.word	0xfffffbff

08003534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003534:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003536:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003538:	4d03      	ldr	r5, [pc, #12]	@ (8003548 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800353a:	430a      	orrs	r2, r1
 800353c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003540:	4313      	orrs	r3, r2
 8003542:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003544:	6083      	str	r3, [r0, #8]
}
 8003546:	bd30      	pop	{r4, r5, pc}
 8003548:	ffff00ff 	.word	0xffff00ff

0800354c <HAL_TIM_ConfigClockSource>:
{
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800354e:	0005      	movs	r5, r0
 8003550:	2202      	movs	r2, #2
 8003552:	353c      	adds	r5, #60	@ 0x3c
 8003554:	782c      	ldrb	r4, [r5, #0]
{
 8003556:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003558:	0010      	movs	r0, r2
 800355a:	2c01      	cmp	r4, #1
 800355c:	d01b      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8003560:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003562:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8003564:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003566:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003568:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356a:	4a41      	ldr	r2, [pc, #260]	@ (8003670 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 800356c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003570:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003572:	680b      	ldr	r3, [r1, #0]
 8003574:	2b60      	cmp	r3, #96	@ 0x60
 8003576:	d04e      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xca>
 8003578:	d82d      	bhi.n	80035d6 <HAL_TIM_ConfigClockSource+0x8a>
 800357a:	2b40      	cmp	r3, #64	@ 0x40
 800357c:	d062      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0xf8>
 800357e:	d813      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x5c>
 8003580:	2b20      	cmp	r3, #32
 8003582:	d00b      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x50>
 8003584:	d808      	bhi.n	8003598 <HAL_TIM_ConfigClockSource+0x4c>
 8003586:	2210      	movs	r2, #16
 8003588:	0019      	movs	r1, r3
 800358a:	4391      	bics	r1, r2
 800358c:	d006      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 800358e:	2301      	movs	r3, #1
 8003590:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8003592:	2300      	movs	r3, #0
 8003594:	702b      	strb	r3, [r5, #0]
}
 8003596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003598:	2b30      	cmp	r3, #48	@ 0x30
 800359a:	d1f8      	bne.n	800358e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 800359c:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800359e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a0:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	4313      	orrs	r3, r2
 80035a4:	2207      	movs	r2, #7
 80035a6:	e028      	b.n	80035fa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80035a8:	2b50      	cmp	r3, #80	@ 0x50
 80035aa:	d1f0      	bne.n	800358e <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80035ac:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80035b0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b6:	4387      	bics	r7, r0
 80035b8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ba:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80035bc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035be:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c0:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c2:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80035c4:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c6:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c8:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80035ca:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80035cc:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80035ce:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d0:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	3b19      	subs	r3, #25
 80035d4:	e011      	b.n	80035fa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80035d6:	2280      	movs	r2, #128	@ 0x80
 80035d8:	0152      	lsls	r2, r2, #5
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0xb2>
 80035de:	2280      	movs	r2, #128	@ 0x80
 80035e0:	0192      	lsls	r2, r2, #6
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00d      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xb6>
 80035e6:	2b70      	cmp	r3, #112	@ 0x70
 80035e8:	d1d1      	bne.n	800358e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	68cb      	ldr	r3, [r1, #12]
 80035ec:	684a      	ldr	r2, [r1, #4]
 80035ee:	0020      	movs	r0, r4
 80035f0:	6889      	ldr	r1, [r1, #8]
 80035f2:	f7ff ff9f 	bl	8003534 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 80035f8:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035fa:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 80035fc:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2000      	movs	r0, #0
 8003600:	e7c5      	b.n	800358e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	68cb      	ldr	r3, [r1, #12]
 8003604:	684a      	ldr	r2, [r1, #4]
 8003606:	0020      	movs	r0, r4
 8003608:	6889      	ldr	r1, [r1, #8]
 800360a:	f7ff ff93 	bl	8003534 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	68a2      	ldr	r2, [r4, #8]
 8003612:	01db      	lsls	r3, r3, #7
 8003614:	e7f1      	b.n	80035fa <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8003618:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800361c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003620:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003622:	43b8      	bics	r0, r7
 8003624:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003628:	4f12      	ldr	r7, [pc, #72]	@ (8003674 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800362a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800362e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003630:	20a0      	movs	r0, #160	@ 0xa0
 8003632:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003634:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003636:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003638:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800363a:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800363c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800363e:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003640:	3b09      	subs	r3, #9
 8003642:	e7da      	b.n	80035fa <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8003644:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003646:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003648:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800364c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	4387      	bics	r7, r0
 8003650:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003652:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003654:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003656:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003658:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 800365c:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800365e:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003660:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8003662:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8003664:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003666:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003668:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366a:	3b29      	subs	r3, #41	@ 0x29
 800366c:	e7c5      	b.n	80035fa <HAL_TIM_ConfigClockSource+0xae>
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	ffff0088 	.word	0xffff0088
 8003674:	ffff0fff 	.word	0xffff0fff

08003678 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003678:	231f      	movs	r3, #31
{
 800367a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800367c:	2401      	movs	r4, #1
 800367e:	4019      	ands	r1, r3
 8003680:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003682:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003684:	6a03      	ldr	r3, [r0, #32]
 8003686:	43a3      	bics	r3, r4
 8003688:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800368a:	6a03      	ldr	r3, [r0, #32]
 800368c:	431a      	orrs	r2, r3
 800368e:	6202      	str	r2, [r0, #32]
}
 8003690:	bd10      	pop	{r4, pc}
	...

08003694 <HAL_TIM_OC_Start_DMA>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	000e      	movs	r6, r1
 8003698:	0005      	movs	r5, r0
 800369a:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800369c:	0002      	movs	r2, r0
 800369e:	2e00      	cmp	r6, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_TIM_OC_Start_DMA+0x22>
 80036a2:	323e      	adds	r2, #62	@ 0x3e
 80036a4:	7814      	ldrb	r4, [r2, #0]
    return HAL_BUSY;
 80036a6:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80036a8:	3c02      	subs	r4, #2
 80036aa:	4262      	negs	r2, r4
 80036ac:	4154      	adcs	r4, r2
 80036ae:	b2e4      	uxtb	r4, r4
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_TIM_OC_Start_DMA+0x36>
}
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80036b6:	2e04      	cmp	r6, #4
 80036b8:	d101      	bne.n	80036be <HAL_TIM_OC_Start_DMA+0x2a>
 80036ba:	323f      	adds	r2, #63	@ 0x3f
 80036bc:	e7f2      	b.n	80036a4 <HAL_TIM_OC_Start_DMA+0x10>
 80036be:	2e08      	cmp	r6, #8
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_OC_Start_DMA+0x32>
 80036c2:	3240      	adds	r2, #64	@ 0x40
 80036c4:	e7ee      	b.n	80036a4 <HAL_TIM_OC_Start_DMA+0x10>
 80036c6:	3241      	adds	r2, #65	@ 0x41
 80036c8:	e7ec      	b.n	80036a4 <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80036ca:	002a      	movs	r2, r5
 80036cc:	2e00      	cmp	r6, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_TIM_OC_Start_DMA+0x50>
 80036d0:	323e      	adds	r2, #62	@ 0x3e
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	3a01      	subs	r2, #1
 80036d6:	4250      	negs	r0, r2
 80036d8:	4142      	adcs	r2, r0
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	2a00      	cmp	r2, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_TIM_OC_Start_DMA+0x64>
      return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	e7e7      	b.n	80036b4 <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80036e4:	2e04      	cmp	r6, #4
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_OC_Start_DMA+0x58>
 80036e8:	323f      	adds	r2, #63	@ 0x3f
 80036ea:	e7f2      	b.n	80036d2 <HAL_TIM_OC_Start_DMA+0x3e>
 80036ec:	2e08      	cmp	r6, #8
 80036ee:	d101      	bne.n	80036f4 <HAL_TIM_OC_Start_DMA+0x60>
 80036f0:	3240      	adds	r2, #64	@ 0x40
 80036f2:	e7ee      	b.n	80036d2 <HAL_TIM_OC_Start_DMA+0x3e>
 80036f4:	3241      	adds	r2, #65	@ 0x41
 80036f6:	e7ec      	b.n	80036d2 <HAL_TIM_OC_Start_DMA+0x3e>
    if ((pData == NULL) || (Length == 0U))
 80036f8:	2900      	cmp	r1, #0
 80036fa:	d0f1      	beq.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003700:	2202      	movs	r2, #2
 8003702:	0028      	movs	r0, r5
 8003704:	2e00      	cmp	r6, #0
 8003706:	d131      	bne.n	800376c <HAL_TIM_OC_Start_DMA+0xd8>
 8003708:	303e      	adds	r0, #62	@ 0x3e
 800370a:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800370c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800370e:	4a3d      	ldr	r2, [pc, #244]	@ (8003804 <HAL_TIM_OC_Start_DMA+0x170>)
 8003710:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003712:	4a3d      	ldr	r2, [pc, #244]	@ (8003808 <HAL_TIM_OC_Start_DMA+0x174>)
 8003714:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003716:	4a3d      	ldr	r2, [pc, #244]	@ (800380c <HAL_TIM_OC_Start_DMA+0x178>)
 8003718:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800371a:	682a      	ldr	r2, [r5, #0]
 800371c:	3234      	adds	r2, #52	@ 0x34
 800371e:	f7fe fedb 	bl	80024d8 <HAL_DMA_Start_IT>
 8003722:	2800      	cmp	r0, #0
 8003724:	d1dc      	bne.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	682a      	ldr	r2, [r5, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800372e:	682c      	ldr	r4, [r5, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003734:	0031      	movs	r1, r6
 8003736:	2201      	movs	r2, #1
 8003738:	0020      	movs	r0, r4
 800373a:	f7ff ff9d 	bl	8003678 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800373e:	4a34      	ldr	r2, [pc, #208]	@ (8003810 <HAL_TIM_OC_Start_DMA+0x17c>)
 8003740:	4294      	cmp	r4, r2
 8003742:	d056      	beq.n	80037f2 <HAL_TIM_OC_Start_DMA+0x15e>
 8003744:	4b33      	ldr	r3, [pc, #204]	@ (8003814 <HAL_TIM_OC_Start_DMA+0x180>)
 8003746:	429c      	cmp	r4, r3
 8003748:	d053      	beq.n	80037f2 <HAL_TIM_OC_Start_DMA+0x15e>
 800374a:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_TIM_OC_Start_DMA+0x184>)
 800374c:	429c      	cmp	r4, r3
 800374e:	d050      	beq.n	80037f2 <HAL_TIM_OC_Start_DMA+0x15e>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003750:	4b32      	ldr	r3, [pc, #200]	@ (800381c <HAL_TIM_OC_Start_DMA+0x188>)
 8003752:	429c      	cmp	r4, r3
 8003754:	d104      	bne.n	8003760 <HAL_TIM_OC_Start_DMA+0xcc>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003756:	2207      	movs	r2, #7
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	2b06      	cmp	r3, #6
 800375e:	d003      	beq.n	8003768 <HAL_TIM_OC_Start_DMA+0xd4>
        __HAL_TIM_ENABLE(htim);
 8003760:	2301      	movs	r3, #1
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	6023      	str	r3, [r4, #0]
    return HAL_BUSY;
 8003768:	2000      	movs	r0, #0
 800376a:	e7a3      	b.n	80036b4 <HAL_TIM_OC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800376c:	2e04      	cmp	r6, #4
 800376e:	d113      	bne.n	8003798 <HAL_TIM_OC_Start_DMA+0x104>
 8003770:	303f      	adds	r0, #63	@ 0x3f
 8003772:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003774:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8003776:	4a23      	ldr	r2, [pc, #140]	@ (8003804 <HAL_TIM_OC_Start_DMA+0x170>)
 8003778:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800377a:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_TIM_OC_Start_DMA+0x174>)
 800377c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800377e:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_TIM_OC_Start_DMA+0x178>)
 8003780:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003782:	682a      	ldr	r2, [r5, #0]
 8003784:	3238      	adds	r2, #56	@ 0x38
 8003786:	f7fe fea7 	bl	80024d8 <HAL_DMA_Start_IT>
 800378a:	2800      	cmp	r0, #0
 800378c:	d1a8      	bne.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	682a      	ldr	r2, [r5, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	68d1      	ldr	r1, [r2, #12]
 8003796:	e7ca      	b.n	800372e <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003798:	2e08      	cmp	r6, #8
 800379a:	d113      	bne.n	80037c4 <HAL_TIM_OC_Start_DMA+0x130>
 800379c:	3040      	adds	r0, #64	@ 0x40
 800379e:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80037a2:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <HAL_TIM_OC_Start_DMA+0x170>)
 80037a4:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037a6:	4a18      	ldr	r2, [pc, #96]	@ (8003808 <HAL_TIM_OC_Start_DMA+0x174>)
 80037a8:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80037aa:	4a18      	ldr	r2, [pc, #96]	@ (800380c <HAL_TIM_OC_Start_DMA+0x178>)
 80037ac:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80037ae:	682a      	ldr	r2, [r5, #0]
 80037b0:	323c      	adds	r2, #60	@ 0x3c
 80037b2:	f7fe fe91 	bl	80024d8 <HAL_DMA_Start_IT>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d192      	bne.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	682a      	ldr	r2, [r5, #0]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	68d1      	ldr	r1, [r2, #12]
 80037c2:	e7b4      	b.n	800372e <HAL_TIM_OC_Start_DMA+0x9a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c4:	3041      	adds	r0, #65	@ 0x41
 80037c6:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 80037c8:	2e0c      	cmp	r6, #12
 80037ca:	d189      	bne.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037cc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80037ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <HAL_TIM_OC_Start_DMA+0x170>)
 80037d0:	6282      	str	r2, [r0, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003808 <HAL_TIM_OC_Start_DMA+0x174>)
 80037d4:	62c2      	str	r2, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <HAL_TIM_OC_Start_DMA+0x178>)
 80037d8:	6302      	str	r2, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80037da:	682a      	ldr	r2, [r5, #0]
 80037dc:	3240      	adds	r2, #64	@ 0x40
 80037de:	f7fe fe7b 	bl	80024d8 <HAL_DMA_Start_IT>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d000      	beq.n	80037e8 <HAL_TIM_OC_Start_DMA+0x154>
 80037e6:	e77b      	b.n	80036e0 <HAL_TIM_OC_Start_DMA+0x4c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80037e8:	2380      	movs	r3, #128	@ 0x80
 80037ea:	682a      	ldr	r2, [r5, #0]
 80037ec:	015b      	lsls	r3, r3, #5
 80037ee:	68d1      	ldr	r1, [r2, #12]
 80037f0:	e79d      	b.n	800372e <HAL_TIM_OC_Start_DMA+0x9a>
      __HAL_TIM_MOE_ENABLE(htim);
 80037f2:	2380      	movs	r3, #128	@ 0x80
 80037f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6463      	str	r3, [r4, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	4294      	cmp	r4, r2
 80037fe:	d0aa      	beq.n	8003756 <HAL_TIM_OC_Start_DMA+0xc2>
 8003800:	e7a6      	b.n	8003750 <HAL_TIM_OC_Start_DMA+0xbc>
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	0800308d 	.word	0x0800308d
 8003808:	080030ff 	.word	0x080030ff
 800380c:	08003273 	.word	0x08003273
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40000400 	.word	0x40000400

08003820 <HAL_TIM_PWM_Start_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
 8003820:	b510      	push	{r4, lr}
 8003822:	f7ff ff37 	bl	8003694 <HAL_TIM_OC_Start_DMA>
 8003826:	bd10      	pop	{r4, pc}

08003828 <HAL_TIM_OC_Stop_DMA>:
{
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	0004      	movs	r4, r0
 800382c:	000e      	movs	r6, r1
  switch (Channel)
 800382e:	2908      	cmp	r1, #8
 8003830:	d04b      	beq.n	80038ca <HAL_TIM_OC_Stop_DMA+0xa2>
 8003832:	d805      	bhi.n	8003840 <HAL_TIM_OC_Stop_DMA+0x18>
 8003834:	2900      	cmp	r1, #0
 8003836:	d00c      	beq.n	8003852 <HAL_TIM_OC_Stop_DMA+0x2a>
 8003838:	2904      	cmp	r1, #4
 800383a:	d03f      	beq.n	80038bc <HAL_TIM_OC_Stop_DMA+0x94>
 800383c:	2001      	movs	r0, #1
}
 800383e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003840:	290c      	cmp	r1, #12
 8003842:	d1fb      	bne.n	800383c <HAL_TIM_OC_Stop_DMA+0x14>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003844:	6802      	ldr	r2, [r0, #0]
 8003846:	4929      	ldr	r1, [pc, #164]	@ (80038ec <HAL_TIM_OC_Stop_DMA+0xc4>)
 8003848:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800384a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800384c:	400b      	ands	r3, r1
 800384e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003850:	e005      	b.n	800385e <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003852:	6802      	ldr	r2, [r0, #0]
 8003854:	4926      	ldr	r1, [pc, #152]	@ (80038f0 <HAL_TIM_OC_Stop_DMA+0xc8>)
 8003856:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003858:	6a40      	ldr	r0, [r0, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800385a:	400b      	ands	r3, r1
 800385c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800385e:	f7fe fe77 	bl	8002550 <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	0031      	movs	r1, r6
 8003868:	0028      	movs	r0, r5
 800386a:	f7ff ff05 	bl	8003678 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800386e:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_TIM_OC_Stop_DMA+0xcc>)
 8003870:	4a21      	ldr	r2, [pc, #132]	@ (80038f8 <HAL_TIM_OC_Stop_DMA+0xd0>)
 8003872:	429d      	cmp	r5, r3
 8003874:	d005      	beq.n	8003882 <HAL_TIM_OC_Stop_DMA+0x5a>
 8003876:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_TIM_OC_Stop_DMA+0xd4>)
 8003878:	429d      	cmp	r5, r3
 800387a:	d002      	beq.n	8003882 <HAL_TIM_OC_Stop_DMA+0x5a>
 800387c:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_TIM_OC_Stop_DMA+0xd8>)
 800387e:	429d      	cmp	r5, r3
 8003880:	d10a      	bne.n	8003898 <HAL_TIM_OC_Stop_DMA+0x70>
      __HAL_TIM_MOE_DISABLE(htim);
 8003882:	6a2b      	ldr	r3, [r5, #32]
 8003884:	4213      	tst	r3, r2
 8003886:	d107      	bne.n	8003898 <HAL_TIM_OC_Stop_DMA+0x70>
 8003888:	6a29      	ldr	r1, [r5, #32]
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_TIM_OC_Stop_DMA+0xdc>)
 800388c:	4219      	tst	r1, r3
 800388e:	d103      	bne.n	8003898 <HAL_TIM_OC_Stop_DMA+0x70>
 8003890:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003892:	491d      	ldr	r1, [pc, #116]	@ (8003908 <HAL_TIM_OC_Stop_DMA+0xe0>)
 8003894:	400b      	ands	r3, r1
 8003896:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8003898:	6a2b      	ldr	r3, [r5, #32]
 800389a:	4213      	tst	r3, r2
 800389c:	d107      	bne.n	80038ae <HAL_TIM_OC_Stop_DMA+0x86>
 800389e:	6a2a      	ldr	r2, [r5, #32]
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <HAL_TIM_OC_Stop_DMA+0xdc>)
 80038a2:	421a      	tst	r2, r3
 80038a4:	d103      	bne.n	80038ae <HAL_TIM_OC_Stop_DMA+0x86>
 80038a6:	2201      	movs	r2, #1
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	4393      	bics	r3, r2
 80038ac:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	2301      	movs	r3, #1
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	d111      	bne.n	80038d8 <HAL_TIM_OC_Stop_DMA+0xb0>
 80038b4:	343e      	adds	r4, #62	@ 0x3e
  switch (Channel)
 80038b6:	2000      	movs	r0, #0
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	7023      	strb	r3, [r4, #0]
 80038ba:	e7c0      	b.n	800383e <HAL_TIM_OC_Stop_DMA+0x16>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80038bc:	6802      	ldr	r2, [r0, #0]
 80038be:	4913      	ldr	r1, [pc, #76]	@ (800390c <HAL_TIM_OC_Stop_DMA+0xe4>)
 80038c0:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80038c2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80038c4:	400b      	ands	r3, r1
 80038c6:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80038c8:	e7c9      	b.n	800385e <HAL_TIM_OC_Stop_DMA+0x36>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80038ca:	6802      	ldr	r2, [r0, #0]
 80038cc:	4910      	ldr	r1, [pc, #64]	@ (8003910 <HAL_TIM_OC_Stop_DMA+0xe8>)
 80038ce:	68d3      	ldr	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80038d0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80038d2:	400b      	ands	r3, r1
 80038d4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80038d6:	e7c2      	b.n	800385e <HAL_TIM_OC_Stop_DMA+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	2e04      	cmp	r6, #4
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_OC_Stop_DMA+0xb8>
 80038dc:	343f      	adds	r4, #63	@ 0x3f
 80038de:	e7ea      	b.n	80038b6 <HAL_TIM_OC_Stop_DMA+0x8e>
 80038e0:	2e08      	cmp	r6, #8
 80038e2:	d101      	bne.n	80038e8 <HAL_TIM_OC_Stop_DMA+0xc0>
 80038e4:	3440      	adds	r4, #64	@ 0x40
 80038e6:	e7e6      	b.n	80038b6 <HAL_TIM_OC_Stop_DMA+0x8e>
 80038e8:	3441      	adds	r4, #65	@ 0x41
 80038ea:	e7e4      	b.n	80038b6 <HAL_TIM_OC_Stop_DMA+0x8e>
 80038ec:	ffffefff 	.word	0xffffefff
 80038f0:	fffffdff 	.word	0xfffffdff
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	00001111 	.word	0x00001111
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	00000444 	.word	0x00000444
 8003908:	ffff7fff 	.word	0xffff7fff
 800390c:	fffffbff 	.word	0xfffffbff
 8003910:	fffff7ff 	.word	0xfffff7ff

08003914 <HAL_TIM_PWM_Stop_DMA>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003914:	b510      	push	{r4, lr}
 8003916:	f7ff ff87 	bl	8003828 <HAL_TIM_OC_Stop_DMA>
 800391a:	bd10      	pop	{r4, pc}

0800391c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800391c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391e:	0004      	movs	r4, r0
 8003920:	2202      	movs	r2, #2
 8003922:	343c      	adds	r4, #60	@ 0x3c
 8003924:	7825      	ldrb	r5, [r4, #0]
{
 8003926:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003928:	0010      	movs	r0, r2
 800392a:	2d01      	cmp	r5, #1
 800392c:	d019      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003930:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003932:	353d      	adds	r5, #61	@ 0x3d
 8003934:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800393a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393e:	680e      	ldr	r6, [r1, #0]
 8003940:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003942:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	4807      	ldr	r0, [pc, #28]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 8003946:	4283      	cmp	r3, r0
 8003948:	d002      	beq.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800394a:	4807      	ldr	r0, [pc, #28]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 800394c:	4283      	cmp	r3, r0
 800394e:	d104      	bne.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003950:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003952:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003954:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003956:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800395a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800395c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800395e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003960:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400

0800396c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800396c:	4770      	bx	lr

0800396e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800396e:	4770      	bx	lr

08003970 <memset>:
 8003970:	0003      	movs	r3, r0
 8003972:	1882      	adds	r2, r0, r2
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	2600      	movs	r6, #0
 8003984:	4c0c      	ldr	r4, [pc, #48]	@ (80039b8 <__libc_init_array+0x38>)
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x3c>)
 8003988:	1b64      	subs	r4, r4, r5
 800398a:	10a4      	asrs	r4, r4, #2
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	2600      	movs	r6, #0
 8003992:	f000 f819 	bl	80039c8 <_init>
 8003996:	4c0a      	ldr	r4, [pc, #40]	@ (80039c0 <__libc_init_array+0x40>)
 8003998:	4d0a      	ldr	r5, [pc, #40]	@ (80039c4 <__libc_init_array+0x44>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	00b3      	lsls	r3, r6, #2
 80039a6:	58eb      	ldr	r3, [r5, r3]
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	00b3      	lsls	r3, r6, #2
 80039b0:	58eb      	ldr	r3, [r5, r3]
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	08003a18 	.word	0x08003a18
 80039bc:	08003a18 	.word	0x08003a18
 80039c0:	08003a1c 	.word	0x08003a1c
 80039c4:	08003a18 	.word	0x08003a18

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr
